// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`directives fragments does anonymous inline fragments 1`] = `
"export interface FragmentSelectionOnHuman {
  id: string;
  name: string | null;
}

export interface FragmentSelectionOnDroid {
  id: string;
  name: string | null;
}

export interface FragmentTest {
  heroNoParam: FragmentSelectionOnHuman | FragmentSelectionOnDroid | null;
}
"
`;

exports[`directives fragments does anonymous inline fragments with aliases 1`] = `
"export interface FragmentSelectionOnHuman {
  b: string;
  c: string | null;
}

export interface FragmentSelectionOnDroid {
  b: string;
  c: string | null;
}

export interface FragmentTest {
  heroNoParam: FragmentSelectionOnHuman | FragmentSelectionOnDroid | null;
}
"
`;

exports[`directives fragments works with aliases on fragment spread 1`] = `
"export interface FragmentSelectionOnHuman {
  b: string;
}

export interface FragmentSelectionOnDroid {
  b: string;
}

export interface FragmentTest {
  heroNoParam: FragmentSelectionOnHuman | FragmentSelectionOnDroid | null;
}
"
`;

exports[`directives fragments works with fragment spread 1`] = `
"export interface FragmentSelectionOnHuman {
  id: string;
}

export interface FragmentSelectionOnDroid {
  id: string;
}

export interface FragmentTest {
  heroNoParam: FragmentSelectionOnHuman | FragmentSelectionOnDroid | null;
}
"
`;

exports[`directives fragments works with inline fragments on type 1`] = `
"export interface FragmentSelectionOnHuman {}

export interface FragmentSelectionOnDroid {
  primaryFunction: string | null;
  primaryFunctionNonNull: string;
}

export interface FragmentTest {
  heroNoParam: FragmentSelectionOnHuman | FragmentSelectionOnDroid | null;
}
"
`;

exports[`directives fragments works with inline fragments on type with aliases 1`] = `
"export interface FragmentSelectionOnHuman {}

export interface FragmentSelectionOnDroid {
  b: string | null;
  c: string;
}

export interface FragmentTest {
  heroNoParam: FragmentSelectionOnHuman | FragmentSelectionOnDroid | null;
}
"
`;

exports[`directives on fields works with simple fields 1`] = `
"export interface FragmentSelectionOnHuman {
  id: string;
  name: string | null;
}

export interface FragmentSelectionOnDroid {
  id: string;
  name: string | null;
}

export interface TestQuery {
  heroNoParam: FragmentSelectionOnHuman | FragmentSelectionOnDroid | null;
}
"
`;

exports[`directives outputs bad directives 1`] = `
"export interface FragmentSelectionOnHuman {
  id: string;
  name: string | null;
}

export interface FragmentSelectionOnDroid {
  id: string;
  name: string | null;
}

export interface TestQuery {
  heroNoParam: FragmentSelectionOnHuman | FragmentSelectionOnDroid | null;
}
"
`;

exports[`fragments does anonymous inline fragments 1`] = `
"export interface FragmentSelectionOnHuman {
  id: string;
  name: string | null;
}

export interface FragmentSelectionOnDroid {
  id: string;
  name: string | null;
}

export interface FragmentTest {
  heroNoParam: FragmentSelectionOnHuman | FragmentSelectionOnDroid | null;
}
"
`;

exports[`fragments does anonymous inline fragments with aliases 1`] = `
"export interface FragmentSelectionOnHuman {
  b: string;
  c: string | null;
}

export interface FragmentSelectionOnDroid {
  b: string;
  c: string | null;
}

export interface FragmentTest {
  heroNoParam: FragmentSelectionOnHuman | FragmentSelectionOnDroid | null;
}
"
`;

exports[`fragments does inline fragments on type 1`] = `
"export interface FragmentSelectionOnHuman {}

export interface FragmentSelectionOnDroid {
  primaryFunction: string | null;
  primaryFunctionNonNull: string;
}

export interface FragmentTest {
  heroNoParam: FragmentSelectionOnHuman | FragmentSelectionOnDroid | null;
}
"
`;

exports[`fragments does inline fragments on type with aliases 1`] = `
"export interface FragmentSelectionOnHuman {}

export interface FragmentSelectionOnDroid {
  b: string | null;
  c: string;
}

export interface FragmentTest {
  heroNoParam: FragmentSelectionOnHuman | FragmentSelectionOnDroid | null;
}
"
`;

exports[`fragments does nested fragments 1`] = `
"export interface FragmentSelectionOnHuman {
  id: string;
}

export interface FragmentSelectionOnDroid {
  id: string;
}

export interface FragmentSelectionOnHuman1 {
  friends: Array<
    FragmentSelectionOnHuman | FragmentSelectionOnDroid | null
  > | null;
}

export interface FragmentSelectionOnDroid1 {
  friends: Array<
    FragmentSelectionOnHuman | FragmentSelectionOnDroid | null
  > | null;
}

export interface FragmentTest {
  heroNoParam: FragmentSelectionOnHuman1 | FragmentSelectionOnDroid1 | null;
}
"
`;

exports[`fragments does nested fragments 2 1`] = `
"export interface FragmentSelectionOnHuman {
  id: string;
}

export interface FragmentSelectionOnDroid {
  id: string;
}

export interface FragmentSelectionOnHuman1 {
  id: string;
  friends: Array<
    FragmentSelectionOnHuman | FragmentSelectionOnDroid | null
  > | null;
}

export interface FragmentSelectionOnDroid1 {
  id: string;
  friends: Array<
    FragmentSelectionOnHuman | FragmentSelectionOnDroid | null
  > | null;
}

export interface FragmentTest {
  heroNoParam: FragmentSelectionOnHuman1 | FragmentSelectionOnDroid1 | null;
}
"
`;

exports[`fragments does nested fragments 3 1`] = `
"export interface FragmentSelectionOnHuman {
  id: string;
}

export interface FragmentSelectionOnDroid {
  id: string;
}

export interface FragmentSelectionOnHuman1 {
  id: string;
  name: string | null;
  friends: Array<
    FragmentSelectionOnHuman | FragmentSelectionOnDroid | null
  > | null;
}

export interface FragmentSelectionOnDroid1 {
  id: string;
  name: string | null;
  friends: Array<
    FragmentSelectionOnHuman | FragmentSelectionOnDroid | null
  > | null;
}

export interface FragmentTest {
  heroNoParam: FragmentSelectionOnHuman1 | FragmentSelectionOnDroid1 | null;
}
"
`;

exports[`fragments does simple fragments 1`] = `
"export interface FragmentSelectionOnHuman {
  id: string;
}

export interface FragmentSelectionOnDroid {
  id: string;
}

export interface FragmentTest {
  heroNoParam: FragmentSelectionOnHuman | FragmentSelectionOnDroid | null;
}
"
`;

exports[`fragments does simple fragments with aliases 1`] = `
"export interface FragmentSelectionOnHuman {
  b: string;
}

export interface FragmentSelectionOnDroid {
  b: string;
}

export interface FragmentTest {
  heroNoParam: FragmentSelectionOnHuman | FragmentSelectionOnDroid | null;
}
"
`;

exports[`fragments does simple fragments with other selections 1`] = `
"export interface FragmentSelectionOnHuman {
  name: string | null;
  id: string;
}

export interface FragmentSelectionOnDroid {
  name: string | null;
  id: string;
}

export interface FragmentTest {
  heroNoParam: FragmentSelectionOnHuman | FragmentSelectionOnDroid | null;
}
"
`;

exports[`fragments does simple fragments with other selections and aliases 1`] = `
"export interface FragmentSelectionOnHuman {
  b: string | null;
  c: string;
}

export interface FragmentSelectionOnDroid {
  b: string | null;
  c: string;
}

export interface FragmentTest {
  heroNoParam: FragmentSelectionOnHuman | FragmentSelectionOnDroid | null;
}
"
`;

exports[`simple examples does "naked" queries 1`] = `
"export interface FragmentSelectionOnHuman {
  id: string;
  name: string | null;
}

export interface FragmentSelectionOnDroid {
  id: string;
  name: string | null;
}

export interface AnonymousQuery {
  heroNoParam: FragmentSelectionOnHuman | FragmentSelectionOnDroid | null;
}
"
`;

exports[`simple examples does a very simple query 1`] = `
"export interface FragmentSelectionOnHuman {
  id: string;
  name: string | null;
}

export interface FragmentSelectionOnDroid {
  id: string;
  name: string | null;
}

export interface TestQuery {
  heroNoParam: FragmentSelectionOnHuman | FragmentSelectionOnDroid | null;
}
"
`;

exports[`simple examples does a very simple query with typename 1`] = `
"export interface FragmentSelectionOnHuman {
  __typename: 'Human';
  id: string;
  name: string | null;
}

export interface FragmentSelectionOnDroid {
  __typename: 'Droid';
  id: string;
  name: string | null;
}

export interface TestQuery {
  heroNoParam: FragmentSelectionOnHuman | FragmentSelectionOnDroid | null;
}
"
`;

exports[`simple examples does unnamed queries 1`] = `
"export interface FragmentSelectionOnHuman {
  id: string;
  name: string | null;
}

export interface FragmentSelectionOnDroid {
  id: string;
  name: string | null;
}

export interface AnonymousQuery {
  heroNoParam: FragmentSelectionOnHuman | FragmentSelectionOnDroid | null;
}
"
`;

exports[`simple examples supports arrays 1`] = `
"export interface FragmentSelectionOnHuman {
  id: string;
  name: string | null;
}

export interface FragmentSelectionOnDroid {
  id: string;
  name: string | null;
}

export interface FragmentSelectionOnHuman1 {
  nonNullArr: Array<FragmentSelectionOnHuman | FragmentSelectionOnDroid | null>;
  nonNullArrAndContents: Array<
    FragmentSelectionOnHuman | FragmentSelectionOnDroid
  >;
  nullArrNonNullContents: Array<
    FragmentSelectionOnHuman | FragmentSelectionOnDroid
  > | null;
}

export interface FragmentSelectionOnDroid1 {
  nonNullArr: Array<FragmentSelectionOnHuman | FragmentSelectionOnDroid | null>;
  nonNullArrAndContents: Array<
    FragmentSelectionOnHuman | FragmentSelectionOnDroid
  >;
  nullArrNonNullContents: Array<
    FragmentSelectionOnHuman | FragmentSelectionOnDroid
  > | null;
}

export interface Test {
  heroNoParam: FragmentSelectionOnHuman1 | FragmentSelectionOnDroid1 | null;
}
"
`;

exports[`simple examples supports custom scalars 1`] = `
"export interface CustomScalarQuery {
  test: string | null;
}

export interface CustomScalarQueryInput {
  test?: string | null;
}
"
`;

exports[`simple examples supports enums 1`] = `
"export interface FragmentSelectionOnHuman {
  appearsIn: Array<'NEWHOPE' | 'EMPIRE' | 'JEDI' | null> | null;
}

export interface FragmentSelectionOnDroid {
  appearsIn: Array<'NEWHOPE' | 'EMPIRE' | 'JEDI' | null> | null;
}

export interface EnumQuery {
  hero: FragmentSelectionOnHuman | FragmentSelectionOnDroid | null;
}

export interface EnumQueryInput {
  episode?: 'NEWHOPE' | 'EMPIRE' | 'JEDI' | null;
}
"
`;

exports[`simple examples supports list variables 1`] = `
"export interface FragmentSelectionOnHuman {
  id: string;
  name: string | null;
}

export interface FragmentSelectionOnDroid {
  id: string;
  name: string | null;
}

export interface TestQuery {
  getCharacters: Array<
    FragmentSelectionOnHuman | FragmentSelectionOnDroid | null
  >;
}

export interface TestQueryInput {
  ids: Array<string>;
}
"
`;

exports[`simple examples supports variables 1`] = `
"export interface SelectionOnHuman {
  id: string;
  name: string | null;
}

export interface TestQuery {
  human: SelectionOnHuman | null;
}

export interface TestQueryInput {
  id: string;
}
"
`;

exports[`with subtypes dedupes and enumerates 1`] = `
"export interface FragmentSelectionOnHuman {
  id: string;
  name: string | null;
}

export interface FragmentSelectionOnDroid {
  id: string;
  name: string | null;
}

export interface FragmentSelectionOnHuman1 {
  id: string;
  name: string | null;
  friends: Array<
    FragmentSelectionOnHuman | FragmentSelectionOnDroid | null
  > | null;
}

export interface FragmentSelectionOnDroid1 {
  id: string;
  name: string | null;
  friends: Array<
    FragmentSelectionOnHuman | FragmentSelectionOnDroid | null
  > | null;
}

export interface FragmentSelectionOnHuman2 {
  id: string;
  name: string | null;
  friends: Array<
    FragmentSelectionOnHuman1 | FragmentSelectionOnDroid1 | null
  > | null;
}

export interface FragmentSelectionOnDroid2 {
  id: string;
  name: string | null;
  friends: Array<
    FragmentSelectionOnHuman1 | FragmentSelectionOnDroid1 | null
  > | null;
}

export interface FragmentSelectionOnHuman3 {
  friends: Array<
    FragmentSelectionOnHuman2 | FragmentSelectionOnDroid2 | null
  > | null;
}

export interface FragmentSelectionOnDroid3 {
  friends: Array<
    FragmentSelectionOnHuman2 | FragmentSelectionOnDroid2 | null
  > | null;
}

export interface Test {
  heroNoParam: FragmentSelectionOnHuman3 | FragmentSelectionOnDroid3 | null;
  heroNoParam: FragmentSelectionOnHuman3 | FragmentSelectionOnDroid3 | null;
}
"
`;

exports[`with subtypes does a very simple query 1`] = `
"export interface FragmentSelectionOnHuman {
  id: string;
  name: string | null;
}

export interface FragmentSelectionOnDroid {
  id: string;
  name: string | null;
}

export interface TestQuery {
  heroNoParam: FragmentSelectionOnHuman | FragmentSelectionOnDroid | null;
}
"
`;

exports[`with subtypes does array query 1`] = `
"export interface FragmentSelectionOnHuman {
  id: string;
  name: string | null;
}

export interface FragmentSelectionOnDroid {
  id: string;
  name: string | null;
}

export interface FragmentSelectionOnHuman1 {
  nonNullArr: Array<FragmentSelectionOnHuman | FragmentSelectionOnDroid | null>;
  nonNullArrAndContents: Array<
    FragmentSelectionOnHuman | FragmentSelectionOnDroid
  >;
  nullArrNonNullContents: Array<
    FragmentSelectionOnHuman | FragmentSelectionOnDroid
  > | null;
}

export interface FragmentSelectionOnDroid1 {
  nonNullArr: Array<FragmentSelectionOnHuman | FragmentSelectionOnDroid | null>;
  nonNullArrAndContents: Array<
    FragmentSelectionOnHuman | FragmentSelectionOnDroid
  >;
  nullArrNonNullContents: Array<
    FragmentSelectionOnHuman | FragmentSelectionOnDroid
  > | null;
}

export interface Test {
  heroNoParam: FragmentSelectionOnHuman1 | FragmentSelectionOnDroid1 | null;
}
"
`;

exports[`with subtypes does fragment query 1`] = `
"export interface FragmentSelectionOnHuman {
  id: string;
}

export interface FragmentSelectionOnDroid {
  id: string;
}

export interface FragmentTest {
  heroNoParam: FragmentSelectionOnHuman | FragmentSelectionOnDroid | null;
}
"
`;

exports[`with subtypes does partial fragment query 1`] = `
"export interface FragmentSelectionOnHuman {
  id: string;
  name: string | null;
}

export interface FragmentSelectionOnDroid {
  id: string;
}

export interface FragmentTest {
  heroNoParam: FragmentSelectionOnHuman | FragmentSelectionOnDroid | null;
}
"
`;

exports[`with subtypes does partial fragment query with complex types 1`] = `
"export interface FragmentSelectionOnHuman {
  id: string;
}

export interface FragmentSelectionOnDroid {
  id: string;
}

export interface FragmentSelectionOnHuman1 {
  id: string;
  name: string | null;
  friends: Array<
    FragmentSelectionOnHuman | FragmentSelectionOnDroid | null
  > | null;
}

export interface FragmentTest {
  heroNoParam: FragmentSelectionOnHuman1 | FragmentSelectionOnDroid | null;
}
"
`;

exports[`with subtypes does partial fragment query with complex types and directives 1`] = `
"export interface FragmentSelectionOnHuman {
  id: string;
}

export interface FragmentSelectionOnDroid {
  id: string;
}

export interface FragmentSelectionOnHuman1 {
  id: string;
  name: string | null;
  friends: Array<
    FragmentSelectionOnHuman | FragmentSelectionOnDroid | null
  > | null;
}

export interface FragmentSelectionOnDroid1 {
  id: string;
  name: string | null;
}

export interface FragmentTest {
  heroNoParam: FragmentSelectionOnHuman1 | FragmentSelectionOnDroid1 | null;
}
"
`;
