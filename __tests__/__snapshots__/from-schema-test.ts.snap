// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`gql2ts Supports older TypeScript versions removes Nullability annotations when passed 1`] = `
"interface IGraphQLResponseRoot {
data: IRoot;
errors: Array<IGraphQLResponseError>;
}

interface IGraphQLResponseError {
/** Required for all errors */
message: string;
locations: Array<IGraphQLResponseErrorLocation>;
/** 7.2.2 says 'GraphQL servers may provide additional entries to error' */
[propName: string]: any;
}

interface IGraphQLResponseErrorLocation {
line: number;
column: number;
}

interface IRoot {
__typename: \\"Root\\";
allFilms: IFilmsConnection;
film: IFilm;
allPeople: IPeopleConnection;
person: IPerson;
allPlanets: IPlanetsConnection;
planet: IPlanet;
allSpecies: ISpeciesConnection;
species: ISpecies;
allStarships: IStarshipsConnection;
starship: IStarship;
allVehicles: IVehiclesConnection;
vehicle: IVehicle;

/**
 * Fetches an object given its ID
 */
node: Node;
}

interface IAllFilmsOnRootArguments {
after?: string;
first?: number;
before?: string;
last?: number;
}

interface IFilmOnRootArguments {
id?: string;
filmID?: string;
}

interface IAllPeopleOnRootArguments {
after?: string;
first?: number;
before?: string;
last?: number;
}

interface IPersonOnRootArguments {
id?: string;
personID?: string;
}

interface IAllPlanetsOnRootArguments {
after?: string;
first?: number;
before?: string;
last?: number;
}

interface IPlanetOnRootArguments {
id?: string;
planetID?: string;
}

interface IAllSpeciesOnRootArguments {
after?: string;
first?: number;
before?: string;
last?: number;
}

interface ISpeciesOnRootArguments {
id?: string;
speciesID?: string;
}

interface IAllStarshipsOnRootArguments {
after?: string;
first?: number;
before?: string;
last?: number;
}

interface IStarshipOnRootArguments {
id?: string;
starshipID?: string;
}

interface IAllVehiclesOnRootArguments {
after?: string;
first?: number;
before?: string;
last?: number;
}

interface IVehicleOnRootArguments {
id?: string;
vehicleID?: string;
}

interface INodeOnRootArguments {

  /**
   * The ID of an object
   */
id: string;
}

/**
 * A connection to a list of items.
 */
  interface IFilmsConnection {
__typename: \\"FilmsConnection\\";

/**
 * Information to aid in pagination.
 */
pageInfo: IPageInfo;

/**
 * A list of edges.
 */
edges: Array<IFilmsEdge>;

/**
 * A count of the total number of objects in this connection, ignoring pagination.
* This allows a client to fetch the first five objects by passing \\"5\\" as the
* argument to \\"first\\", then fetch the total count so it could display \\"5 of 83\\",
* for example.
 */
totalCount: number;

/**
 * A list of all of the objects returned in the connection. This is a convenience
* field provided for quickly exploring the API; rather than querying for
* \\"{ edges { node } }\\" when no edge data is needed, this field can be be used
* instead. Note that when clients like Relay need to fetch the \\"cursor\\" field on
* the edge to enable efficient pagination, this shortcut cannot be used, and the
* full \\"{ edges { node } }\\" version should be used instead.
 */
films: Array<IFilm>;
}

/**
 * Information about pagination in a connection.
 */
  interface IPageInfo {
__typename: \\"PageInfo\\";

/**
 * When paginating forwards, are there more items?
 */
hasNextPage: boolean;

/**
 * When paginating backwards, are there more items?
 */
hasPreviousPage: boolean;

/**
 * When paginating backwards, the cursor to continue.
 */
startCursor: string;

/**
 * When paginating forwards, the cursor to continue.
 */
endCursor: string;
}

/**
 * An edge in a connection.
 */
  interface IFilmsEdge {
__typename: \\"FilmsEdge\\";

/**
 * The item at the end of the edge
 */
node: IFilm;

/**
 * A cursor for use in pagination
 */
cursor: string;
}

/**
 * A single film.
 */
  interface IFilm {
__typename: \\"Film\\";

/**
 * The title of this film.
 */
title: string;

/**
 * The episode number of this film.
 */
episodeID: number;

/**
 * The opening paragraphs at the beginning of this film.
 */
openingCrawl: string;

/**
 * The name of the director of this film.
 */
director: string;

/**
 * The name(s) of the producer(s) of this film.
 */
producers: Array<string>;

/**
 * The ISO 8601 date format of film release at original creator country.
 */
releaseDate: string;
speciesConnection: IFilmSpeciesConnection;
starshipConnection: IFilmStarshipsConnection;
vehicleConnection: IFilmVehiclesConnection;
characterConnection: IFilmCharactersConnection;
planetConnection: IFilmPlanetsConnection;

/**
 * The ISO 8601 date format of the time that this resource was created.
 */
created: string;

/**
 * The ISO 8601 date format of the time that this resource was edited.
 */
edited: string;

/**
 * The ID of an object
 */
id: string;
}

interface ISpeciesConnectionOnFilmArguments {
after?: string;
first?: number;
before?: string;
last?: number;
}

interface IStarshipConnectionOnFilmArguments {
after?: string;
first?: number;
before?: string;
last?: number;
}

interface IVehicleConnectionOnFilmArguments {
after?: string;
first?: number;
before?: string;
last?: number;
}

interface ICharacterConnectionOnFilmArguments {
after?: string;
first?: number;
before?: string;
last?: number;
}

interface IPlanetConnectionOnFilmArguments {
after?: string;
first?: number;
before?: string;
last?: number;
}

/**
 * An object with an ID
 */
  type Node = IFilm | ISpecies | IPlanet | IPerson | IStarship | IVehicle;

/**
 * An object with an ID
 */
  interface INode {
__typename: \\"Node\\";

/**
 * The id of the object.
 */
id: string;
}

/**
 * A connection to a list of items.
 */
  interface IFilmSpeciesConnection {
__typename: \\"FilmSpeciesConnection\\";

/**
 * Information to aid in pagination.
 */
pageInfo: IPageInfo;

/**
 * A list of edges.
 */
edges: Array<IFilmSpeciesEdge>;

/**
 * A count of the total number of objects in this connection, ignoring pagination.
* This allows a client to fetch the first five objects by passing \\"5\\" as the
* argument to \\"first\\", then fetch the total count so it could display \\"5 of 83\\",
* for example.
 */
totalCount: number;

/**
 * A list of all of the objects returned in the connection. This is a convenience
* field provided for quickly exploring the API; rather than querying for
* \\"{ edges { node } }\\" when no edge data is needed, this field can be be used
* instead. Note that when clients like Relay need to fetch the \\"cursor\\" field on
* the edge to enable efficient pagination, this shortcut cannot be used, and the
* full \\"{ edges { node } }\\" version should be used instead.
 */
species: Array<ISpecies>;
}

/**
 * An edge in a connection.
 */
  interface IFilmSpeciesEdge {
__typename: \\"FilmSpeciesEdge\\";

/**
 * The item at the end of the edge
 */
node: ISpecies;

/**
 * A cursor for use in pagination
 */
cursor: string;
}

/**
 * A type of person or character within the Star Wars Universe.
 */
  interface ISpecies {
__typename: \\"Species\\";

/**
 * The name of this species.
 */
name: string;

/**
 * The classification of this species, such as \\"mammal\\" or \\"reptile\\".
 */
classification: string;

/**
 * The designation of this species, such as \\"sentient\\".
 */
designation: string;

/**
 * The average height of this species in centimeters.
 */
averageHeight: number;

/**
 * The average lifespan of this species in years, null if unknown.
 */
averageLifespan: number;

/**
 * Common eye colors for this species, null if this species does not typically
* have eyes.
 */
eyeColors: Array<string>;

/**
 * Common hair colors for this species, null if this species does not typically
* have hair.
 */
hairColors: Array<string>;

/**
 * Common skin colors for this species, null if this species does not typically
* have skin.
 */
skinColors: Array<string>;

/**
 * The language commonly spoken by this species.
 */
language: string;

/**
 * A planet that this species originates from.
 */
homeworld: IPlanet;
personConnection: ISpeciesPeopleConnection;
filmConnection: ISpeciesFilmsConnection;

/**
 * The ISO 8601 date format of the time that this resource was created.
 */
created: string;

/**
 * The ISO 8601 date format of the time that this resource was edited.
 */
edited: string;

/**
 * The ID of an object
 */
id: string;
}

interface IPersonConnectionOnSpeciesArguments {
after?: string;
first?: number;
before?: string;
last?: number;
}

interface IFilmConnectionOnSpeciesArguments {
after?: string;
first?: number;
before?: string;
last?: number;
}

/**
 * A large mass, planet or planetoid in the Star Wars Universe, at the time of
* 0 ABY.
 */
  interface IPlanet {
__typename: \\"Planet\\";

/**
 * The name of this planet.
 */
name: string;

/**
 * The diameter of this planet in kilometers.
 */
diameter: number;

/**
 * The number of standard hours it takes for this planet to complete a single
* rotation on its axis.
 */
rotationPeriod: number;

/**
 * The number of standard days it takes for this planet to complete a single orbit
* of its local star.
 */
orbitalPeriod: number;

/**
 * A number denoting the gravity of this planet, where \\"1\\" is normal or 1 standard
* G. \\"2\\" is twice or 2 standard Gs. \\"0.5\\" is half or 0.5 standard Gs.
 */
gravity: string;

/**
 * The average population of sentient beings inhabiting this planet.
 */
population: number;

/**
 * The climates of this planet.
 */
climates: Array<string>;

/**
 * The terrains of this planet.
 */
terrains: Array<string>;

/**
 * The percentage of the planet surface that is naturally occuring water or bodies
* of water.
 */
surfaceWater: number;
residentConnection: IPlanetResidentsConnection;
filmConnection: IPlanetFilmsConnection;

/**
 * The ISO 8601 date format of the time that this resource was created.
 */
created: string;

/**
 * The ISO 8601 date format of the time that this resource was edited.
 */
edited: string;

/**
 * The ID of an object
 */
id: string;
}

interface IResidentConnectionOnPlanetArguments {
after?: string;
first?: number;
before?: string;
last?: number;
}

interface IFilmConnectionOnPlanetArguments {
after?: string;
first?: number;
before?: string;
last?: number;
}

/**
 * A connection to a list of items.
 */
  interface IPlanetResidentsConnection {
__typename: \\"PlanetResidentsConnection\\";

/**
 * Information to aid in pagination.
 */
pageInfo: IPageInfo;

/**
 * A list of edges.
 */
edges: Array<IPlanetResidentsEdge>;

/**
 * A count of the total number of objects in this connection, ignoring pagination.
* This allows a client to fetch the first five objects by passing \\"5\\" as the
* argument to \\"first\\", then fetch the total count so it could display \\"5 of 83\\",
* for example.
 */
totalCount: number;

/**
 * A list of all of the objects returned in the connection. This is a convenience
* field provided for quickly exploring the API; rather than querying for
* \\"{ edges { node } }\\" when no edge data is needed, this field can be be used
* instead. Note that when clients like Relay need to fetch the \\"cursor\\" field on
* the edge to enable efficient pagination, this shortcut cannot be used, and the
* full \\"{ edges { node } }\\" version should be used instead.
 */
residents: Array<IPerson>;
}

/**
 * An edge in a connection.
 */
  interface IPlanetResidentsEdge {
__typename: \\"PlanetResidentsEdge\\";

/**
 * The item at the end of the edge
 */
node: IPerson;

/**
 * A cursor for use in pagination
 */
cursor: string;
}

/**
 * An individual person or character within the Star Wars universe.
 */
  interface IPerson {
__typename: \\"Person\\";

/**
 * The name of this person.
 */
name: string;

/**
 * The birth year of the person, using the in-universe standard of BBY or ABY -
* Before the Battle of Yavin or After the Battle of Yavin. The Battle of Yavin is
* a battle that occurs at the end of Star Wars episode IV: A New Hope.
 */
birthYear: string;

/**
 * The eye color of this person. Will be \\"unknown\\" if not known or \\"n/a\\" if the
* person does not have an eye.
 */
eyeColor: string;

/**
 * The gender of this person. Either \\"Male\\", \\"Female\\" or \\"unknown\\",
* \\"n/a\\" if the person does not have a gender.
 */
gender: string;

/**
 * The hair color of this person. Will be \\"unknown\\" if not known or \\"n/a\\" if the
* person does not have hair.
 */
hairColor: string;

/**
 * The height of the person in centimeters.
 */
height: number;

/**
 * The mass of the person in kilograms.
 */
mass: number;

/**
 * The skin color of this person.
 */
skinColor: string;

/**
 * A planet that this person was born on or inhabits.
 */
homeworld: IPlanet;
filmConnection: IPersonFilmsConnection;

/**
 * The species that this person belongs to, or null if unknown.
 */
species: ISpecies;
starshipConnection: IPersonStarshipsConnection;
vehicleConnection: IPersonVehiclesConnection;

/**
 * The ISO 8601 date format of the time that this resource was created.
 */
created: string;

/**
 * The ISO 8601 date format of the time that this resource was edited.
 */
edited: string;

/**
 * The ID of an object
 */
id: string;
}

interface IFilmConnectionOnPersonArguments {
after?: string;
first?: number;
before?: string;
last?: number;
}

interface IStarshipConnectionOnPersonArguments {
after?: string;
first?: number;
before?: string;
last?: number;
}

interface IVehicleConnectionOnPersonArguments {
after?: string;
first?: number;
before?: string;
last?: number;
}

/**
 * A connection to a list of items.
 */
  interface IPersonFilmsConnection {
__typename: \\"PersonFilmsConnection\\";

/**
 * Information to aid in pagination.
 */
pageInfo: IPageInfo;

/**
 * A list of edges.
 */
edges: Array<IPersonFilmsEdge>;

/**
 * A count of the total number of objects in this connection, ignoring pagination.
* This allows a client to fetch the first five objects by passing \\"5\\" as the
* argument to \\"first\\", then fetch the total count so it could display \\"5 of 83\\",
* for example.
 */
totalCount: number;

/**
 * A list of all of the objects returned in the connection. This is a convenience
* field provided for quickly exploring the API; rather than querying for
* \\"{ edges { node } }\\" when no edge data is needed, this field can be be used
* instead. Note that when clients like Relay need to fetch the \\"cursor\\" field on
* the edge to enable efficient pagination, this shortcut cannot be used, and the
* full \\"{ edges { node } }\\" version should be used instead.
 */
films: Array<IFilm>;
}

/**
 * An edge in a connection.
 */
  interface IPersonFilmsEdge {
__typename: \\"PersonFilmsEdge\\";

/**
 * The item at the end of the edge
 */
node: IFilm;

/**
 * A cursor for use in pagination
 */
cursor: string;
}

/**
 * A connection to a list of items.
 */
  interface IPersonStarshipsConnection {
__typename: \\"PersonStarshipsConnection\\";

/**
 * Information to aid in pagination.
 */
pageInfo: IPageInfo;

/**
 * A list of edges.
 */
edges: Array<IPersonStarshipsEdge>;

/**
 * A count of the total number of objects in this connection, ignoring pagination.
* This allows a client to fetch the first five objects by passing \\"5\\" as the
* argument to \\"first\\", then fetch the total count so it could display \\"5 of 83\\",
* for example.
 */
totalCount: number;

/**
 * A list of all of the objects returned in the connection. This is a convenience
* field provided for quickly exploring the API; rather than querying for
* \\"{ edges { node } }\\" when no edge data is needed, this field can be be used
* instead. Note that when clients like Relay need to fetch the \\"cursor\\" field on
* the edge to enable efficient pagination, this shortcut cannot be used, and the
* full \\"{ edges { node } }\\" version should be used instead.
 */
starships: Array<IStarship>;
}

/**
 * An edge in a connection.
 */
  interface IPersonStarshipsEdge {
__typename: \\"PersonStarshipsEdge\\";

/**
 * The item at the end of the edge
 */
node: IStarship;

/**
 * A cursor for use in pagination
 */
cursor: string;
}

/**
 * A single transport craft that has hyperdrive capability.
 */
  interface IStarship {
__typename: \\"Starship\\";

/**
 * The name of this starship. The common name, such as \\"Death Star\\".
 */
name: string;

/**
 * The model or official name of this starship. Such as \\"T-65 X-wing\\" or \\"DS-1
* Orbital Battle Station\\".
 */
model: string;

/**
 * The class of this starship, such as \\"Starfighter\\" or \\"Deep Space Mobile
* Battlestation\\"
 */
starshipClass: string;

/**
 * The manufacturers of this starship.
 */
manufacturers: Array<string>;

/**
 * The cost of this starship new, in galactic credits.
 */
costInCredits: number;

/**
 * The length of this starship in meters.
 */
length: number;

/**
 * The number of personnel needed to run or pilot this starship.
 */
crew: string;

/**
 * The number of non-essential people this starship can transport.
 */
passengers: string;

/**
 * The maximum speed of this starship in atmosphere. null if this starship is
* incapable of atmosphering flight.
 */
maxAtmospheringSpeed: number;

/**
 * The class of this starships hyperdrive.
 */
hyperdriveRating: number;

/**
 * The Maximum number of Megalights this starship can travel in a standard hour.
* A \\"Megalight\\" is a standard unit of distance and has never been defined before
* within the Star Wars universe. This figure is only really useful for measuring
* the difference in speed of starships. We can assume it is similar to AU, the
* distance between our Sun (Sol) and Earth.
 */
MGLT: number;

/**
 * The maximum number of kilograms that this starship can transport.
 */
cargoCapacity: number;

/**
 * The maximum length of time that this starship can provide consumables for its
* entire crew without having to resupply.
 */
consumables: string;
pilotConnection: IStarshipPilotsConnection;
filmConnection: IStarshipFilmsConnection;

/**
 * The ISO 8601 date format of the time that this resource was created.
 */
created: string;

/**
 * The ISO 8601 date format of the time that this resource was edited.
 */
edited: string;

/**
 * The ID of an object
 */
id: string;
}

interface IPilotConnectionOnStarshipArguments {
after?: string;
first?: number;
before?: string;
last?: number;
}

interface IFilmConnectionOnStarshipArguments {
after?: string;
first?: number;
before?: string;
last?: number;
}

/**
 * A connection to a list of items.
 */
  interface IStarshipPilotsConnection {
__typename: \\"StarshipPilotsConnection\\";

/**
 * Information to aid in pagination.
 */
pageInfo: IPageInfo;

/**
 * A list of edges.
 */
edges: Array<IStarshipPilotsEdge>;

/**
 * A count of the total number of objects in this connection, ignoring pagination.
* This allows a client to fetch the first five objects by passing \\"5\\" as the
* argument to \\"first\\", then fetch the total count so it could display \\"5 of 83\\",
* for example.
 */
totalCount: number;

/**
 * A list of all of the objects returned in the connection. This is a convenience
* field provided for quickly exploring the API; rather than querying for
* \\"{ edges { node } }\\" when no edge data is needed, this field can be be used
* instead. Note that when clients like Relay need to fetch the \\"cursor\\" field on
* the edge to enable efficient pagination, this shortcut cannot be used, and the
* full \\"{ edges { node } }\\" version should be used instead.
 */
pilots: Array<IPerson>;
}

/**
 * An edge in a connection.
 */
  interface IStarshipPilotsEdge {
__typename: \\"StarshipPilotsEdge\\";

/**
 * The item at the end of the edge
 */
node: IPerson;

/**
 * A cursor for use in pagination
 */
cursor: string;
}

/**
 * A connection to a list of items.
 */
  interface IStarshipFilmsConnection {
__typename: \\"StarshipFilmsConnection\\";

/**
 * Information to aid in pagination.
 */
pageInfo: IPageInfo;

/**
 * A list of edges.
 */
edges: Array<IStarshipFilmsEdge>;

/**
 * A count of the total number of objects in this connection, ignoring pagination.
* This allows a client to fetch the first five objects by passing \\"5\\" as the
* argument to \\"first\\", then fetch the total count so it could display \\"5 of 83\\",
* for example.
 */
totalCount: number;

/**
 * A list of all of the objects returned in the connection. This is a convenience
* field provided for quickly exploring the API; rather than querying for
* \\"{ edges { node } }\\" when no edge data is needed, this field can be be used
* instead. Note that when clients like Relay need to fetch the \\"cursor\\" field on
* the edge to enable efficient pagination, this shortcut cannot be used, and the
* full \\"{ edges { node } }\\" version should be used instead.
 */
films: Array<IFilm>;
}

/**
 * An edge in a connection.
 */
  interface IStarshipFilmsEdge {
__typename: \\"StarshipFilmsEdge\\";

/**
 * The item at the end of the edge
 */
node: IFilm;

/**
 * A cursor for use in pagination
 */
cursor: string;
}

/**
 * A connection to a list of items.
 */
  interface IPersonVehiclesConnection {
__typename: \\"PersonVehiclesConnection\\";

/**
 * Information to aid in pagination.
 */
pageInfo: IPageInfo;

/**
 * A list of edges.
 */
edges: Array<IPersonVehiclesEdge>;

/**
 * A count of the total number of objects in this connection, ignoring pagination.
* This allows a client to fetch the first five objects by passing \\"5\\" as the
* argument to \\"first\\", then fetch the total count so it could display \\"5 of 83\\",
* for example.
 */
totalCount: number;

/**
 * A list of all of the objects returned in the connection. This is a convenience
* field provided for quickly exploring the API; rather than querying for
* \\"{ edges { node } }\\" when no edge data is needed, this field can be be used
* instead. Note that when clients like Relay need to fetch the \\"cursor\\" field on
* the edge to enable efficient pagination, this shortcut cannot be used, and the
* full \\"{ edges { node } }\\" version should be used instead.
 */
vehicles: Array<IVehicle>;
}

/**
 * An edge in a connection.
 */
  interface IPersonVehiclesEdge {
__typename: \\"PersonVehiclesEdge\\";

/**
 * The item at the end of the edge
 */
node: IVehicle;

/**
 * A cursor for use in pagination
 */
cursor: string;
}

/**
 * A single transport craft that does not have hyperdrive capability
 */
  interface IVehicle {
__typename: \\"Vehicle\\";

/**
 * The name of this vehicle. The common name, such as \\"Sand Crawler\\" or \\"Speeder
* bike\\".
 */
name: string;

/**
 * The model or official name of this vehicle. Such as \\"All-Terrain Attack
* Transport\\".
 */
model: string;

/**
 * The class of this vehicle, such as \\"Wheeled\\" or \\"Repulsorcraft\\".
 */
vehicleClass: string;

/**
 * The manufacturers of this vehicle.
 */
manufacturers: Array<string>;

/**
 * The cost of this vehicle new, in Galactic Credits.
 */
costInCredits: number;

/**
 * The length of this vehicle in meters.
 */
length: number;

/**
 * The number of personnel needed to run or pilot this vehicle.
 */
crew: string;

/**
 * The number of non-essential people this vehicle can transport.
 */
passengers: string;

/**
 * The maximum speed of this vehicle in atmosphere.
 */
maxAtmospheringSpeed: number;

/**
 * The maximum number of kilograms that this vehicle can transport.
 */
cargoCapacity: number;

/**
 * The maximum length of time that this vehicle can provide consumables for its
* entire crew without having to resupply.
 */
consumables: string;
pilotConnection: IVehiclePilotsConnection;
filmConnection: IVehicleFilmsConnection;

/**
 * The ISO 8601 date format of the time that this resource was created.
 */
created: string;

/**
 * The ISO 8601 date format of the time that this resource was edited.
 */
edited: string;

/**
 * The ID of an object
 */
id: string;
}

interface IPilotConnectionOnVehicleArguments {
after?: string;
first?: number;
before?: string;
last?: number;
}

interface IFilmConnectionOnVehicleArguments {
after?: string;
first?: number;
before?: string;
last?: number;
}

/**
 * A connection to a list of items.
 */
  interface IVehiclePilotsConnection {
__typename: \\"VehiclePilotsConnection\\";

/**
 * Information to aid in pagination.
 */
pageInfo: IPageInfo;

/**
 * A list of edges.
 */
edges: Array<IVehiclePilotsEdge>;

/**
 * A count of the total number of objects in this connection, ignoring pagination.
* This allows a client to fetch the first five objects by passing \\"5\\" as the
* argument to \\"first\\", then fetch the total count so it could display \\"5 of 83\\",
* for example.
 */
totalCount: number;

/**
 * A list of all of the objects returned in the connection. This is a convenience
* field provided for quickly exploring the API; rather than querying for
* \\"{ edges { node } }\\" when no edge data is needed, this field can be be used
* instead. Note that when clients like Relay need to fetch the \\"cursor\\" field on
* the edge to enable efficient pagination, this shortcut cannot be used, and the
* full \\"{ edges { node } }\\" version should be used instead.
 */
pilots: Array<IPerson>;
}

/**
 * An edge in a connection.
 */
  interface IVehiclePilotsEdge {
__typename: \\"VehiclePilotsEdge\\";

/**
 * The item at the end of the edge
 */
node: IPerson;

/**
 * A cursor for use in pagination
 */
cursor: string;
}

/**
 * A connection to a list of items.
 */
  interface IVehicleFilmsConnection {
__typename: \\"VehicleFilmsConnection\\";

/**
 * Information to aid in pagination.
 */
pageInfo: IPageInfo;

/**
 * A list of edges.
 */
edges: Array<IVehicleFilmsEdge>;

/**
 * A count of the total number of objects in this connection, ignoring pagination.
* This allows a client to fetch the first five objects by passing \\"5\\" as the
* argument to \\"first\\", then fetch the total count so it could display \\"5 of 83\\",
* for example.
 */
totalCount: number;

/**
 * A list of all of the objects returned in the connection. This is a convenience
* field provided for quickly exploring the API; rather than querying for
* \\"{ edges { node } }\\" when no edge data is needed, this field can be be used
* instead. Note that when clients like Relay need to fetch the \\"cursor\\" field on
* the edge to enable efficient pagination, this shortcut cannot be used, and the
* full \\"{ edges { node } }\\" version should be used instead.
 */
films: Array<IFilm>;
}

/**
 * An edge in a connection.
 */
  interface IVehicleFilmsEdge {
__typename: \\"VehicleFilmsEdge\\";

/**
 * The item at the end of the edge
 */
node: IFilm;

/**
 * A cursor for use in pagination
 */
cursor: string;
}

/**
 * A connection to a list of items.
 */
  interface IPlanetFilmsConnection {
__typename: \\"PlanetFilmsConnection\\";

/**
 * Information to aid in pagination.
 */
pageInfo: IPageInfo;

/**
 * A list of edges.
 */
edges: Array<IPlanetFilmsEdge>;

/**
 * A count of the total number of objects in this connection, ignoring pagination.
* This allows a client to fetch the first five objects by passing \\"5\\" as the
* argument to \\"first\\", then fetch the total count so it could display \\"5 of 83\\",
* for example.
 */
totalCount: number;

/**
 * A list of all of the objects returned in the connection. This is a convenience
* field provided for quickly exploring the API; rather than querying for
* \\"{ edges { node } }\\" when no edge data is needed, this field can be be used
* instead. Note that when clients like Relay need to fetch the \\"cursor\\" field on
* the edge to enable efficient pagination, this shortcut cannot be used, and the
* full \\"{ edges { node } }\\" version should be used instead.
 */
films: Array<IFilm>;
}

/**
 * An edge in a connection.
 */
  interface IPlanetFilmsEdge {
__typename: \\"PlanetFilmsEdge\\";

/**
 * The item at the end of the edge
 */
node: IFilm;

/**
 * A cursor for use in pagination
 */
cursor: string;
}

/**
 * A connection to a list of items.
 */
  interface ISpeciesPeopleConnection {
__typename: \\"SpeciesPeopleConnection\\";

/**
 * Information to aid in pagination.
 */
pageInfo: IPageInfo;

/**
 * A list of edges.
 */
edges: Array<ISpeciesPeopleEdge>;

/**
 * A count of the total number of objects in this connection, ignoring pagination.
* This allows a client to fetch the first five objects by passing \\"5\\" as the
* argument to \\"first\\", then fetch the total count so it could display \\"5 of 83\\",
* for example.
 */
totalCount: number;

/**
 * A list of all of the objects returned in the connection. This is a convenience
* field provided for quickly exploring the API; rather than querying for
* \\"{ edges { node } }\\" when no edge data is needed, this field can be be used
* instead. Note that when clients like Relay need to fetch the \\"cursor\\" field on
* the edge to enable efficient pagination, this shortcut cannot be used, and the
* full \\"{ edges { node } }\\" version should be used instead.
 */
people: Array<IPerson>;
}

/**
 * An edge in a connection.
 */
  interface ISpeciesPeopleEdge {
__typename: \\"SpeciesPeopleEdge\\";

/**
 * The item at the end of the edge
 */
node: IPerson;

/**
 * A cursor for use in pagination
 */
cursor: string;
}

/**
 * A connection to a list of items.
 */
  interface ISpeciesFilmsConnection {
__typename: \\"SpeciesFilmsConnection\\";

/**
 * Information to aid in pagination.
 */
pageInfo: IPageInfo;

/**
 * A list of edges.
 */
edges: Array<ISpeciesFilmsEdge>;

/**
 * A count of the total number of objects in this connection, ignoring pagination.
* This allows a client to fetch the first five objects by passing \\"5\\" as the
* argument to \\"first\\", then fetch the total count so it could display \\"5 of 83\\",
* for example.
 */
totalCount: number;

/**
 * A list of all of the objects returned in the connection. This is a convenience
* field provided for quickly exploring the API; rather than querying for
* \\"{ edges { node } }\\" when no edge data is needed, this field can be be used
* instead. Note that when clients like Relay need to fetch the \\"cursor\\" field on
* the edge to enable efficient pagination, this shortcut cannot be used, and the
* full \\"{ edges { node } }\\" version should be used instead.
 */
films: Array<IFilm>;
}

/**
 * An edge in a connection.
 */
  interface ISpeciesFilmsEdge {
__typename: \\"SpeciesFilmsEdge\\";

/**
 * The item at the end of the edge
 */
node: IFilm;

/**
 * A cursor for use in pagination
 */
cursor: string;
}

/**
 * A connection to a list of items.
 */
  interface IFilmStarshipsConnection {
__typename: \\"FilmStarshipsConnection\\";

/**
 * Information to aid in pagination.
 */
pageInfo: IPageInfo;

/**
 * A list of edges.
 */
edges: Array<IFilmStarshipsEdge>;

/**
 * A count of the total number of objects in this connection, ignoring pagination.
* This allows a client to fetch the first five objects by passing \\"5\\" as the
* argument to \\"first\\", then fetch the total count so it could display \\"5 of 83\\",
* for example.
 */
totalCount: number;

/**
 * A list of all of the objects returned in the connection. This is a convenience
* field provided for quickly exploring the API; rather than querying for
* \\"{ edges { node } }\\" when no edge data is needed, this field can be be used
* instead. Note that when clients like Relay need to fetch the \\"cursor\\" field on
* the edge to enable efficient pagination, this shortcut cannot be used, and the
* full \\"{ edges { node } }\\" version should be used instead.
 */
starships: Array<IStarship>;
}

/**
 * An edge in a connection.
 */
  interface IFilmStarshipsEdge {
__typename: \\"FilmStarshipsEdge\\";

/**
 * The item at the end of the edge
 */
node: IStarship;

/**
 * A cursor for use in pagination
 */
cursor: string;
}

/**
 * A connection to a list of items.
 */
  interface IFilmVehiclesConnection {
__typename: \\"FilmVehiclesConnection\\";

/**
 * Information to aid in pagination.
 */
pageInfo: IPageInfo;

/**
 * A list of edges.
 */
edges: Array<IFilmVehiclesEdge>;

/**
 * A count of the total number of objects in this connection, ignoring pagination.
* This allows a client to fetch the first five objects by passing \\"5\\" as the
* argument to \\"first\\", then fetch the total count so it could display \\"5 of 83\\",
* for example.
 */
totalCount: number;

/**
 * A list of all of the objects returned in the connection. This is a convenience
* field provided for quickly exploring the API; rather than querying for
* \\"{ edges { node } }\\" when no edge data is needed, this field can be be used
* instead. Note that when clients like Relay need to fetch the \\"cursor\\" field on
* the edge to enable efficient pagination, this shortcut cannot be used, and the
* full \\"{ edges { node } }\\" version should be used instead.
 */
vehicles: Array<IVehicle>;
}

/**
 * An edge in a connection.
 */
  interface IFilmVehiclesEdge {
__typename: \\"FilmVehiclesEdge\\";

/**
 * The item at the end of the edge
 */
node: IVehicle;

/**
 * A cursor for use in pagination
 */
cursor: string;
}

/**
 * A connection to a list of items.
 */
  interface IFilmCharactersConnection {
__typename: \\"FilmCharactersConnection\\";

/**
 * Information to aid in pagination.
 */
pageInfo: IPageInfo;

/**
 * A list of edges.
 */
edges: Array<IFilmCharactersEdge>;

/**
 * A count of the total number of objects in this connection, ignoring pagination.
* This allows a client to fetch the first five objects by passing \\"5\\" as the
* argument to \\"first\\", then fetch the total count so it could display \\"5 of 83\\",
* for example.
 */
totalCount: number;

/**
 * A list of all of the objects returned in the connection. This is a convenience
* field provided for quickly exploring the API; rather than querying for
* \\"{ edges { node } }\\" when no edge data is needed, this field can be be used
* instead. Note that when clients like Relay need to fetch the \\"cursor\\" field on
* the edge to enable efficient pagination, this shortcut cannot be used, and the
* full \\"{ edges { node } }\\" version should be used instead.
 */
characters: Array<IPerson>;
}

/**
 * An edge in a connection.
 */
  interface IFilmCharactersEdge {
__typename: \\"FilmCharactersEdge\\";

/**
 * The item at the end of the edge
 */
node: IPerson;

/**
 * A cursor for use in pagination
 */
cursor: string;
}

/**
 * A connection to a list of items.
 */
  interface IFilmPlanetsConnection {
__typename: \\"FilmPlanetsConnection\\";

/**
 * Information to aid in pagination.
 */
pageInfo: IPageInfo;

/**
 * A list of edges.
 */
edges: Array<IFilmPlanetsEdge>;

/**
 * A count of the total number of objects in this connection, ignoring pagination.
* This allows a client to fetch the first five objects by passing \\"5\\" as the
* argument to \\"first\\", then fetch the total count so it could display \\"5 of 83\\",
* for example.
 */
totalCount: number;

/**
 * A list of all of the objects returned in the connection. This is a convenience
* field provided for quickly exploring the API; rather than querying for
* \\"{ edges { node } }\\" when no edge data is needed, this field can be be used
* instead. Note that when clients like Relay need to fetch the \\"cursor\\" field on
* the edge to enable efficient pagination, this shortcut cannot be used, and the
* full \\"{ edges { node } }\\" version should be used instead.
 */
planets: Array<IPlanet>;
}

/**
 * An edge in a connection.
 */
  interface IFilmPlanetsEdge {
__typename: \\"FilmPlanetsEdge\\";

/**
 * The item at the end of the edge
 */
node: IPlanet;

/**
 * A cursor for use in pagination
 */
cursor: string;
}

/**
 * A connection to a list of items.
 */
  interface IPeopleConnection {
__typename: \\"PeopleConnection\\";

/**
 * Information to aid in pagination.
 */
pageInfo: IPageInfo;

/**
 * A list of edges.
 */
edges: Array<IPeopleEdge>;

/**
 * A count of the total number of objects in this connection, ignoring pagination.
* This allows a client to fetch the first five objects by passing \\"5\\" as the
* argument to \\"first\\", then fetch the total count so it could display \\"5 of 83\\",
* for example.
 */
totalCount: number;

/**
 * A list of all of the objects returned in the connection. This is a convenience
* field provided for quickly exploring the API; rather than querying for
* \\"{ edges { node } }\\" when no edge data is needed, this field can be be used
* instead. Note that when clients like Relay need to fetch the \\"cursor\\" field on
* the edge to enable efficient pagination, this shortcut cannot be used, and the
* full \\"{ edges { node } }\\" version should be used instead.
 */
people: Array<IPerson>;
}

/**
 * An edge in a connection.
 */
  interface IPeopleEdge {
__typename: \\"PeopleEdge\\";

/**
 * The item at the end of the edge
 */
node: IPerson;

/**
 * A cursor for use in pagination
 */
cursor: string;
}

/**
 * A connection to a list of items.
 */
  interface IPlanetsConnection {
__typename: \\"PlanetsConnection\\";

/**
 * Information to aid in pagination.
 */
pageInfo: IPageInfo;

/**
 * A list of edges.
 */
edges: Array<IPlanetsEdge>;

/**
 * A count of the total number of objects in this connection, ignoring pagination.
* This allows a client to fetch the first five objects by passing \\"5\\" as the
* argument to \\"first\\", then fetch the total count so it could display \\"5 of 83\\",
* for example.
 */
totalCount: number;

/**
 * A list of all of the objects returned in the connection. This is a convenience
* field provided for quickly exploring the API; rather than querying for
* \\"{ edges { node } }\\" when no edge data is needed, this field can be be used
* instead. Note that when clients like Relay need to fetch the \\"cursor\\" field on
* the edge to enable efficient pagination, this shortcut cannot be used, and the
* full \\"{ edges { node } }\\" version should be used instead.
 */
planets: Array<IPlanet>;
}

/**
 * An edge in a connection.
 */
  interface IPlanetsEdge {
__typename: \\"PlanetsEdge\\";

/**
 * The item at the end of the edge
 */
node: IPlanet;

/**
 * A cursor for use in pagination
 */
cursor: string;
}

/**
 * A connection to a list of items.
 */
  interface ISpeciesConnection {
__typename: \\"SpeciesConnection\\";

/**
 * Information to aid in pagination.
 */
pageInfo: IPageInfo;

/**
 * A list of edges.
 */
edges: Array<ISpeciesEdge>;

/**
 * A count of the total number of objects in this connection, ignoring pagination.
* This allows a client to fetch the first five objects by passing \\"5\\" as the
* argument to \\"first\\", then fetch the total count so it could display \\"5 of 83\\",
* for example.
 */
totalCount: number;

/**
 * A list of all of the objects returned in the connection. This is a convenience
* field provided for quickly exploring the API; rather than querying for
* \\"{ edges { node } }\\" when no edge data is needed, this field can be be used
* instead. Note that when clients like Relay need to fetch the \\"cursor\\" field on
* the edge to enable efficient pagination, this shortcut cannot be used, and the
* full \\"{ edges { node } }\\" version should be used instead.
 */
species: Array<ISpecies>;
}

/**
 * An edge in a connection.
 */
  interface ISpeciesEdge {
__typename: \\"SpeciesEdge\\";

/**
 * The item at the end of the edge
 */
node: ISpecies;

/**
 * A cursor for use in pagination
 */
cursor: string;
}

/**
 * A connection to a list of items.
 */
  interface IStarshipsConnection {
__typename: \\"StarshipsConnection\\";

/**
 * Information to aid in pagination.
 */
pageInfo: IPageInfo;

/**
 * A list of edges.
 */
edges: Array<IStarshipsEdge>;

/**
 * A count of the total number of objects in this connection, ignoring pagination.
* This allows a client to fetch the first five objects by passing \\"5\\" as the
* argument to \\"first\\", then fetch the total count so it could display \\"5 of 83\\",
* for example.
 */
totalCount: number;

/**
 * A list of all of the objects returned in the connection. This is a convenience
* field provided for quickly exploring the API; rather than querying for
* \\"{ edges { node } }\\" when no edge data is needed, this field can be be used
* instead. Note that when clients like Relay need to fetch the \\"cursor\\" field on
* the edge to enable efficient pagination, this shortcut cannot be used, and the
* full \\"{ edges { node } }\\" version should be used instead.
 */
starships: Array<IStarship>;
}

/**
 * An edge in a connection.
 */
  interface IStarshipsEdge {
__typename: \\"StarshipsEdge\\";

/**
 * The item at the end of the edge
 */
node: IStarship;

/**
 * A cursor for use in pagination
 */
cursor: string;
}

/**
 * A connection to a list of items.
 */
  interface IVehiclesConnection {
__typename: \\"VehiclesConnection\\";

/**
 * Information to aid in pagination.
 */
pageInfo: IPageInfo;

/**
 * A list of edges.
 */
edges: Array<IVehiclesEdge>;

/**
 * A count of the total number of objects in this connection, ignoring pagination.
* This allows a client to fetch the first five objects by passing \\"5\\" as the
* argument to \\"first\\", then fetch the total count so it could display \\"5 of 83\\",
* for example.
 */
totalCount: number;

/**
 * A list of all of the objects returned in the connection. This is a convenience
* field provided for quickly exploring the API; rather than querying for
* \\"{ edges { node } }\\" when no edge data is needed, this field can be be used
* instead. Note that when clients like Relay need to fetch the \\"cursor\\" field on
* the edge to enable efficient pagination, this shortcut cannot be used, and the
* full \\"{ edges { node } }\\" version should be used instead.
 */
vehicles: Array<IVehicle>;
}

/**
 * An edge in a connection.
 */
  interface IVehiclesEdge {
__typename: \\"VehiclesEdge\\";

/**
 * The item at the end of the edge
 */
node: IVehicle;

/**
 * A cursor for use in pagination
 */
cursor: string;
}"
`;

exports[`gql2ts deprecation removes deprecated fields if requested 1`] = `
"interface IGraphQLResponseRoot {
data?: IQuery;
errors?: Array<IGraphQLResponseError>;
}

interface IGraphQLResponseError {
/** Required for all errors */
message: string;
locations?: Array<IGraphQLResponseErrorLocation>;
/** 7.2.2 says 'GraphQL servers may provide additional entries to error' */
[propName: string]: any;
}

interface IGraphQLResponseErrorLocation {
line: number;
column: number;
}

interface IQuery {
__typename: \\"Query\\";
heroNoParam: Character | null;
hero: Character | null;
human: IHuman | null;
droid: IDroid | null;
test: any | null;
humanOrDroid: HumanOrDroid | null;
getCharacters: Array<Character | null>;
}

interface IHeroOnQueryArguments {
episode?: Episode | null;
}

interface IHumanOnQueryArguments {
id: string;
}

interface IDroidOnQueryArguments {
id: string;
}

interface ITestOnQueryArguments {
test?: any | null;
}

interface IHumanOrDroidOnQueryArguments {
id: string;
}

interface IGetCharactersOnQueryArguments {
ids: Array<string>;
}

type Character = IHuman | IDroid;

interface ICharacter {
__typename: \\"Character\\";
id: string;
name: string | null;
friends: Array<Character | null> | null;
appearsIn: Array<Episode | null> | null;
nonNullArr: Array<Character | null>;
nonNullArrAndContents: Array<Character>;
nullArrNonNullContents: Array<Character> | null;
}

const enum Episode {
NEWHOPE = 'NEWHOPE',
EMPIRE = 'EMPIRE',
JEDI = 'JEDI'
}

interface IHuman {
__typename: \\"Human\\";
id: string;
name: string | null;
friends: Array<Character | null> | null;
appearsIn: Array<Episode | null> | null;
homePlanet: string | null;
nonNullArr: Array<Character | null>;
nonNullArrAndContents: Array<Character>;
nullArrNonNullContents: Array<Character> | null;
}

interface IDroid {
__typename: \\"Droid\\";
id: string;
name: string | null;
friends: Array<Character | null> | null;
appearsIn: Array<Episode | null> | null;
primaryFunction: string | null;
primaryFunctionNonNull: string;
nonNullArr: Array<Character | null>;
nonNullArrAndContents: Array<Character>;
nullArrNonNullContents: Array<Character> | null;
}

type HumanOrDroid = IHuman | IDroid;

"
`;

exports[`gql2ts interfaces correctly ignores types 1`] = `
"interface IGraphQLResponseRoot {
data?: IRoot;
errors?: Array<IGraphQLResponseError>;
}

interface IGraphQLResponseError {
/** Required for all errors */
message: string;
locations?: Array<IGraphQLResponseErrorLocation>;
/** 7.2.2 says 'GraphQL servers may provide additional entries to error' */
[propName: string]: any;
}

interface IGraphQLResponseErrorLocation {
line: number;
column: number;
}

interface IRoot {
__typename: \\"Root\\";
allFilms: IFilmsConnection | null;
film: IFilm | null;
allPeople: IPeopleConnection | null;
allPlanets: IPlanetsConnection | null;
planet: IPlanet | null;
allSpecies: ISpeciesConnection | null;
species: ISpecies | null;
allStarships: IStarshipsConnection | null;
starship: IStarship | null;
allVehicles: IVehiclesConnection | null;
vehicle: IVehicle | null;

/**
 * Fetches an object given its ID
 */
node: Node | null;
}

interface IAllFilmsOnRootArguments {
after?: string | null;
first?: number | null;
before?: string | null;
last?: number | null;
}

interface IFilmOnRootArguments {
id?: string | null;
filmID?: string | null;
}

interface IAllPeopleOnRootArguments {
after?: string | null;
first?: number | null;
before?: string | null;
last?: number | null;
}

interface IAllPlanetsOnRootArguments {
after?: string | null;
first?: number | null;
before?: string | null;
last?: number | null;
}

interface IPlanetOnRootArguments {
id?: string | null;
planetID?: string | null;
}

interface IAllSpeciesOnRootArguments {
after?: string | null;
first?: number | null;
before?: string | null;
last?: number | null;
}

interface ISpeciesOnRootArguments {
id?: string | null;
speciesID?: string | null;
}

interface IAllStarshipsOnRootArguments {
after?: string | null;
first?: number | null;
before?: string | null;
last?: number | null;
}

interface IStarshipOnRootArguments {
id?: string | null;
starshipID?: string | null;
}

interface IAllVehiclesOnRootArguments {
after?: string | null;
first?: number | null;
before?: string | null;
last?: number | null;
}

interface IVehicleOnRootArguments {
id?: string | null;
vehicleID?: string | null;
}

interface INodeOnRootArguments {

  /**
   * The ID of an object
   */
id: string;
}

/**
 * A connection to a list of items.
 */
  interface IFilmsConnection {
__typename: \\"FilmsConnection\\";

/**
 * Information to aid in pagination.
 */
pageInfo: IPageInfo;

/**
 * A list of edges.
 */
edges: Array<IFilmsEdge | null> | null;

/**
 * A count of the total number of objects in this connection, ignoring pagination.
* This allows a client to fetch the first five objects by passing \\"5\\" as the
* argument to \\"first\\", then fetch the total count so it could display \\"5 of 83\\",
* for example.
 */
totalCount: number | null;

/**
 * A list of all of the objects returned in the connection. This is a convenience
* field provided for quickly exploring the API; rather than querying for
* \\"{ edges { node } }\\" when no edge data is needed, this field can be be used
* instead. Note that when clients like Relay need to fetch the \\"cursor\\" field on
* the edge to enable efficient pagination, this shortcut cannot be used, and the
* full \\"{ edges { node } }\\" version should be used instead.
 */
films: Array<IFilm | null> | null;
}

/**
 * Information about pagination in a connection.
 */
  interface IPageInfo {
__typename: \\"PageInfo\\";

/**
 * When paginating forwards, are there more items?
 */
hasNextPage: boolean;

/**
 * When paginating backwards, are there more items?
 */
hasPreviousPage: boolean;

/**
 * When paginating backwards, the cursor to continue.
 */
startCursor: string | null;

/**
 * When paginating forwards, the cursor to continue.
 */
endCursor: string | null;
}

/**
 * An edge in a connection.
 */
  interface IFilmsEdge {
__typename: \\"FilmsEdge\\";

/**
 * The item at the end of the edge
 */
node: IFilm | null;

/**
 * A cursor for use in pagination
 */
cursor: string;
}

/**
 * A single film.
 */
  interface IFilm {
__typename: \\"Film\\";

/**
 * The title of this film.
 */
title: string | null;

/**
 * The episode number of this film.
 */
episodeID: number | null;

/**
 * The opening paragraphs at the beginning of this film.
 */
openingCrawl: string | null;

/**
 * The name of the director of this film.
 */
director: string | null;

/**
 * The name(s) of the producer(s) of this film.
 */
producers: Array<string | null> | null;

/**
 * The ISO 8601 date format of film release at original creator country.
 */
releaseDate: string | null;
speciesConnection: IFilmSpeciesConnection | null;
starshipConnection: IFilmStarshipsConnection | null;
vehicleConnection: IFilmVehiclesConnection | null;
characterConnection: IFilmCharactersConnection | null;
planetConnection: IFilmPlanetsConnection | null;

/**
 * The ISO 8601 date format of the time that this resource was created.
 */
created: string | null;

/**
 * The ISO 8601 date format of the time that this resource was edited.
 */
edited: string | null;

/**
 * The ID of an object
 */
id: string;
}

interface ISpeciesConnectionOnFilmArguments {
after?: string | null;
first?: number | null;
before?: string | null;
last?: number | null;
}

interface IStarshipConnectionOnFilmArguments {
after?: string | null;
first?: number | null;
before?: string | null;
last?: number | null;
}

interface IVehicleConnectionOnFilmArguments {
after?: string | null;
first?: number | null;
before?: string | null;
last?: number | null;
}

interface ICharacterConnectionOnFilmArguments {
after?: string | null;
first?: number | null;
before?: string | null;
last?: number | null;
}

interface IPlanetConnectionOnFilmArguments {
after?: string | null;
first?: number | null;
before?: string | null;
last?: number | null;
}

/**
 * An object with an ID
 */
  type Node = IFilm | ISpecies | IPlanet | IStarship | IVehicle;

/**
 * An object with an ID
 */
  interface INode {
__typename: \\"Node\\";

/**
 * The id of the object.
 */
id: string;
}

/**
 * A connection to a list of items.
 */
  interface IFilmSpeciesConnection {
__typename: \\"FilmSpeciesConnection\\";

/**
 * Information to aid in pagination.
 */
pageInfo: IPageInfo;

/**
 * A list of edges.
 */
edges: Array<IFilmSpeciesEdge | null> | null;

/**
 * A count of the total number of objects in this connection, ignoring pagination.
* This allows a client to fetch the first five objects by passing \\"5\\" as the
* argument to \\"first\\", then fetch the total count so it could display \\"5 of 83\\",
* for example.
 */
totalCount: number | null;

/**
 * A list of all of the objects returned in the connection. This is a convenience
* field provided for quickly exploring the API; rather than querying for
* \\"{ edges { node } }\\" when no edge data is needed, this field can be be used
* instead. Note that when clients like Relay need to fetch the \\"cursor\\" field on
* the edge to enable efficient pagination, this shortcut cannot be used, and the
* full \\"{ edges { node } }\\" version should be used instead.
 */
species: Array<ISpecies | null> | null;
}

/**
 * An edge in a connection.
 */
  interface IFilmSpeciesEdge {
__typename: \\"FilmSpeciesEdge\\";

/**
 * The item at the end of the edge
 */
node: ISpecies | null;

/**
 * A cursor for use in pagination
 */
cursor: string;
}

/**
 * A type of person or character within the Star Wars Universe.
 */
  interface ISpecies {
__typename: \\"Species\\";

/**
 * The name of this species.
 */
name: string | null;

/**
 * The classification of this species, such as \\"mammal\\" or \\"reptile\\".
 */
classification: string | null;

/**
 * The designation of this species, such as \\"sentient\\".
 */
designation: string | null;

/**
 * The average height of this species in centimeters.
 */
averageHeight: number | null;

/**
 * The average lifespan of this species in years, null if unknown.
 */
averageLifespan: number | null;

/**
 * Common eye colors for this species, null if this species does not typically
* have eyes.
 */
eyeColors: Array<string | null> | null;

/**
 * Common hair colors for this species, null if this species does not typically
* have hair.
 */
hairColors: Array<string | null> | null;

/**
 * Common skin colors for this species, null if this species does not typically
* have skin.
 */
skinColors: Array<string | null> | null;

/**
 * The language commonly spoken by this species.
 */
language: string | null;

/**
 * A planet that this species originates from.
 */
homeworld: IPlanet | null;
personConnection: ISpeciesPeopleConnection | null;
filmConnection: ISpeciesFilmsConnection | null;

/**
 * The ISO 8601 date format of the time that this resource was created.
 */
created: string | null;

/**
 * The ISO 8601 date format of the time that this resource was edited.
 */
edited: string | null;

/**
 * The ID of an object
 */
id: string;
}

interface IPersonConnectionOnSpeciesArguments {
after?: string | null;
first?: number | null;
before?: string | null;
last?: number | null;
}

interface IFilmConnectionOnSpeciesArguments {
after?: string | null;
first?: number | null;
before?: string | null;
last?: number | null;
}

/**
 * A large mass, planet or planetoid in the Star Wars Universe, at the time of
* 0 ABY.
 */
  interface IPlanet {
__typename: \\"Planet\\";

/**
 * The name of this planet.
 */
name: string | null;

/**
 * The diameter of this planet in kilometers.
 */
diameter: number | null;

/**
 * The number of standard hours it takes for this planet to complete a single
* rotation on its axis.
 */
rotationPeriod: number | null;

/**
 * The number of standard days it takes for this planet to complete a single orbit
* of its local star.
 */
orbitalPeriod: number | null;

/**
 * A number denoting the gravity of this planet, where \\"1\\" is normal or 1 standard
* G. \\"2\\" is twice or 2 standard Gs. \\"0.5\\" is half or 0.5 standard Gs.
 */
gravity: string | null;

/**
 * The average population of sentient beings inhabiting this planet.
 */
population: number | null;

/**
 * The climates of this planet.
 */
climates: Array<string | null> | null;

/**
 * The terrains of this planet.
 */
terrains: Array<string | null> | null;

/**
 * The percentage of the planet surface that is naturally occuring water or bodies
* of water.
 */
surfaceWater: number | null;
residentConnection: IPlanetResidentsConnection | null;
filmConnection: IPlanetFilmsConnection | null;

/**
 * The ISO 8601 date format of the time that this resource was created.
 */
created: string | null;

/**
 * The ISO 8601 date format of the time that this resource was edited.
 */
edited: string | null;

/**
 * The ID of an object
 */
id: string;
}

interface IResidentConnectionOnPlanetArguments {
after?: string | null;
first?: number | null;
before?: string | null;
last?: number | null;
}

interface IFilmConnectionOnPlanetArguments {
after?: string | null;
first?: number | null;
before?: string | null;
last?: number | null;
}

/**
 * A connection to a list of items.
 */
  interface IPlanetResidentsConnection {
__typename: \\"PlanetResidentsConnection\\";

/**
 * Information to aid in pagination.
 */
pageInfo: IPageInfo;

/**
 * A list of edges.
 */
edges: Array<IPlanetResidentsEdge | null> | null;

/**
 * A count of the total number of objects in this connection, ignoring pagination.
* This allows a client to fetch the first five objects by passing \\"5\\" as the
* argument to \\"first\\", then fetch the total count so it could display \\"5 of 83\\",
* for example.
 */
totalCount: number | null;
}

/**
 * An edge in a connection.
 */
  interface IPlanetResidentsEdge {
__typename: \\"PlanetResidentsEdge\\";

/**
 * A cursor for use in pagination
 */
cursor: string;
}

/**
 * A connection to a list of items.
 */
  interface IPersonFilmsConnection {
__typename: \\"PersonFilmsConnection\\";

/**
 * Information to aid in pagination.
 */
pageInfo: IPageInfo;

/**
 * A list of edges.
 */
edges: Array<IPersonFilmsEdge | null> | null;

/**
 * A count of the total number of objects in this connection, ignoring pagination.
* This allows a client to fetch the first five objects by passing \\"5\\" as the
* argument to \\"first\\", then fetch the total count so it could display \\"5 of 83\\",
* for example.
 */
totalCount: number | null;

/**
 * A list of all of the objects returned in the connection. This is a convenience
* field provided for quickly exploring the API; rather than querying for
* \\"{ edges { node } }\\" when no edge data is needed, this field can be be used
* instead. Note that when clients like Relay need to fetch the \\"cursor\\" field on
* the edge to enable efficient pagination, this shortcut cannot be used, and the
* full \\"{ edges { node } }\\" version should be used instead.
 */
films: Array<IFilm | null> | null;
}

/**
 * An edge in a connection.
 */
  interface IPersonFilmsEdge {
__typename: \\"PersonFilmsEdge\\";

/**
 * The item at the end of the edge
 */
node: IFilm | null;

/**
 * A cursor for use in pagination
 */
cursor: string;
}

/**
 * A connection to a list of items.
 */
  interface IPersonStarshipsConnection {
__typename: \\"PersonStarshipsConnection\\";

/**
 * Information to aid in pagination.
 */
pageInfo: IPageInfo;

/**
 * A list of edges.
 */
edges: Array<IPersonStarshipsEdge | null> | null;

/**
 * A count of the total number of objects in this connection, ignoring pagination.
* This allows a client to fetch the first five objects by passing \\"5\\" as the
* argument to \\"first\\", then fetch the total count so it could display \\"5 of 83\\",
* for example.
 */
totalCount: number | null;

/**
 * A list of all of the objects returned in the connection. This is a convenience
* field provided for quickly exploring the API; rather than querying for
* \\"{ edges { node } }\\" when no edge data is needed, this field can be be used
* instead. Note that when clients like Relay need to fetch the \\"cursor\\" field on
* the edge to enable efficient pagination, this shortcut cannot be used, and the
* full \\"{ edges { node } }\\" version should be used instead.
 */
starships: Array<IStarship | null> | null;
}

/**
 * An edge in a connection.
 */
  interface IPersonStarshipsEdge {
__typename: \\"PersonStarshipsEdge\\";

/**
 * The item at the end of the edge
 */
node: IStarship | null;

/**
 * A cursor for use in pagination
 */
cursor: string;
}

/**
 * A single transport craft that has hyperdrive capability.
 */
  interface IStarship {
__typename: \\"Starship\\";

/**
 * The name of this starship. The common name, such as \\"Death Star\\".
 */
name: string | null;

/**
 * The model or official name of this starship. Such as \\"T-65 X-wing\\" or \\"DS-1
* Orbital Battle Station\\".
 */
model: string | null;

/**
 * The class of this starship, such as \\"Starfighter\\" or \\"Deep Space Mobile
* Battlestation\\"
 */
starshipClass: string | null;

/**
 * The manufacturers of this starship.
 */
manufacturers: Array<string | null> | null;

/**
 * The cost of this starship new, in galactic credits.
 */
costInCredits: number | null;

/**
 * The length of this starship in meters.
 */
length: number | null;

/**
 * The number of personnel needed to run or pilot this starship.
 */
crew: string | null;

/**
 * The number of non-essential people this starship can transport.
 */
passengers: string | null;

/**
 * The maximum speed of this starship in atmosphere. null if this starship is
* incapable of atmosphering flight.
 */
maxAtmospheringSpeed: number | null;

/**
 * The class of this starships hyperdrive.
 */
hyperdriveRating: number | null;

/**
 * The Maximum number of Megalights this starship can travel in a standard hour.
* A \\"Megalight\\" is a standard unit of distance and has never been defined before
* within the Star Wars universe. This figure is only really useful for measuring
* the difference in speed of starships. We can assume it is similar to AU, the
* distance between our Sun (Sol) and Earth.
 */
MGLT: number | null;

/**
 * The maximum number of kilograms that this starship can transport.
 */
cargoCapacity: number | null;

/**
 * The maximum length of time that this starship can provide consumables for its
* entire crew without having to resupply.
 */
consumables: string | null;
pilotConnection: IStarshipPilotsConnection | null;
filmConnection: IStarshipFilmsConnection | null;

/**
 * The ISO 8601 date format of the time that this resource was created.
 */
created: string | null;

/**
 * The ISO 8601 date format of the time that this resource was edited.
 */
edited: string | null;

/**
 * The ID of an object
 */
id: string;
}

interface IPilotConnectionOnStarshipArguments {
after?: string | null;
first?: number | null;
before?: string | null;
last?: number | null;
}

interface IFilmConnectionOnStarshipArguments {
after?: string | null;
first?: number | null;
before?: string | null;
last?: number | null;
}

/**
 * A connection to a list of items.
 */
  interface IStarshipPilotsConnection {
__typename: \\"StarshipPilotsConnection\\";

/**
 * Information to aid in pagination.
 */
pageInfo: IPageInfo;

/**
 * A list of edges.
 */
edges: Array<IStarshipPilotsEdge | null> | null;

/**
 * A count of the total number of objects in this connection, ignoring pagination.
* This allows a client to fetch the first five objects by passing \\"5\\" as the
* argument to \\"first\\", then fetch the total count so it could display \\"5 of 83\\",
* for example.
 */
totalCount: number | null;
}

/**
 * An edge in a connection.
 */
  interface IStarshipPilotsEdge {
__typename: \\"StarshipPilotsEdge\\";

/**
 * A cursor for use in pagination
 */
cursor: string;
}

/**
 * A connection to a list of items.
 */
  interface IStarshipFilmsConnection {
__typename: \\"StarshipFilmsConnection\\";

/**
 * Information to aid in pagination.
 */
pageInfo: IPageInfo;

/**
 * A list of edges.
 */
edges: Array<IStarshipFilmsEdge | null> | null;

/**
 * A count of the total number of objects in this connection, ignoring pagination.
* This allows a client to fetch the first five objects by passing \\"5\\" as the
* argument to \\"first\\", then fetch the total count so it could display \\"5 of 83\\",
* for example.
 */
totalCount: number | null;

/**
 * A list of all of the objects returned in the connection. This is a convenience
* field provided for quickly exploring the API; rather than querying for
* \\"{ edges { node } }\\" when no edge data is needed, this field can be be used
* instead. Note that when clients like Relay need to fetch the \\"cursor\\" field on
* the edge to enable efficient pagination, this shortcut cannot be used, and the
* full \\"{ edges { node } }\\" version should be used instead.
 */
films: Array<IFilm | null> | null;
}

/**
 * An edge in a connection.
 */
  interface IStarshipFilmsEdge {
__typename: \\"StarshipFilmsEdge\\";

/**
 * The item at the end of the edge
 */
node: IFilm | null;

/**
 * A cursor for use in pagination
 */
cursor: string;
}

/**
 * A connection to a list of items.
 */
  interface IPersonVehiclesConnection {
__typename: \\"PersonVehiclesConnection\\";

/**
 * Information to aid in pagination.
 */
pageInfo: IPageInfo;

/**
 * A list of edges.
 */
edges: Array<IPersonVehiclesEdge | null> | null;

/**
 * A count of the total number of objects in this connection, ignoring pagination.
* This allows a client to fetch the first five objects by passing \\"5\\" as the
* argument to \\"first\\", then fetch the total count so it could display \\"5 of 83\\",
* for example.
 */
totalCount: number | null;

/**
 * A list of all of the objects returned in the connection. This is a convenience
* field provided for quickly exploring the API; rather than querying for
* \\"{ edges { node } }\\" when no edge data is needed, this field can be be used
* instead. Note that when clients like Relay need to fetch the \\"cursor\\" field on
* the edge to enable efficient pagination, this shortcut cannot be used, and the
* full \\"{ edges { node } }\\" version should be used instead.
 */
vehicles: Array<IVehicle | null> | null;
}

/**
 * An edge in a connection.
 */
  interface IPersonVehiclesEdge {
__typename: \\"PersonVehiclesEdge\\";

/**
 * The item at the end of the edge
 */
node: IVehicle | null;

/**
 * A cursor for use in pagination
 */
cursor: string;
}

/**
 * A single transport craft that does not have hyperdrive capability
 */
  interface IVehicle {
__typename: \\"Vehicle\\";

/**
 * The name of this vehicle. The common name, such as \\"Sand Crawler\\" or \\"Speeder
* bike\\".
 */
name: string | null;

/**
 * The model or official name of this vehicle. Such as \\"All-Terrain Attack
* Transport\\".
 */
model: string | null;

/**
 * The class of this vehicle, such as \\"Wheeled\\" or \\"Repulsorcraft\\".
 */
vehicleClass: string | null;

/**
 * The manufacturers of this vehicle.
 */
manufacturers: Array<string | null> | null;

/**
 * The cost of this vehicle new, in Galactic Credits.
 */
costInCredits: number | null;

/**
 * The length of this vehicle in meters.
 */
length: number | null;

/**
 * The number of personnel needed to run or pilot this vehicle.
 */
crew: string | null;

/**
 * The number of non-essential people this vehicle can transport.
 */
passengers: string | null;

/**
 * The maximum speed of this vehicle in atmosphere.
 */
maxAtmospheringSpeed: number | null;

/**
 * The maximum number of kilograms that this vehicle can transport.
 */
cargoCapacity: number | null;

/**
 * The maximum length of time that this vehicle can provide consumables for its
* entire crew without having to resupply.
 */
consumables: string | null;
pilotConnection: IVehiclePilotsConnection | null;
filmConnection: IVehicleFilmsConnection | null;

/**
 * The ISO 8601 date format of the time that this resource was created.
 */
created: string | null;

/**
 * The ISO 8601 date format of the time that this resource was edited.
 */
edited: string | null;

/**
 * The ID of an object
 */
id: string;
}

interface IPilotConnectionOnVehicleArguments {
after?: string | null;
first?: number | null;
before?: string | null;
last?: number | null;
}

interface IFilmConnectionOnVehicleArguments {
after?: string | null;
first?: number | null;
before?: string | null;
last?: number | null;
}

/**
 * A connection to a list of items.
 */
  interface IVehiclePilotsConnection {
__typename: \\"VehiclePilotsConnection\\";

/**
 * Information to aid in pagination.
 */
pageInfo: IPageInfo;

/**
 * A list of edges.
 */
edges: Array<IVehiclePilotsEdge | null> | null;

/**
 * A count of the total number of objects in this connection, ignoring pagination.
* This allows a client to fetch the first five objects by passing \\"5\\" as the
* argument to \\"first\\", then fetch the total count so it could display \\"5 of 83\\",
* for example.
 */
totalCount: number | null;
}

/**
 * An edge in a connection.
 */
  interface IVehiclePilotsEdge {
__typename: \\"VehiclePilotsEdge\\";

/**
 * A cursor for use in pagination
 */
cursor: string;
}

/**
 * A connection to a list of items.
 */
  interface IVehicleFilmsConnection {
__typename: \\"VehicleFilmsConnection\\";

/**
 * Information to aid in pagination.
 */
pageInfo: IPageInfo;

/**
 * A list of edges.
 */
edges: Array<IVehicleFilmsEdge | null> | null;

/**
 * A count of the total number of objects in this connection, ignoring pagination.
* This allows a client to fetch the first five objects by passing \\"5\\" as the
* argument to \\"first\\", then fetch the total count so it could display \\"5 of 83\\",
* for example.
 */
totalCount: number | null;

/**
 * A list of all of the objects returned in the connection. This is a convenience
* field provided for quickly exploring the API; rather than querying for
* \\"{ edges { node } }\\" when no edge data is needed, this field can be be used
* instead. Note that when clients like Relay need to fetch the \\"cursor\\" field on
* the edge to enable efficient pagination, this shortcut cannot be used, and the
* full \\"{ edges { node } }\\" version should be used instead.
 */
films: Array<IFilm | null> | null;
}

/**
 * An edge in a connection.
 */
  interface IVehicleFilmsEdge {
__typename: \\"VehicleFilmsEdge\\";

/**
 * The item at the end of the edge
 */
node: IFilm | null;

/**
 * A cursor for use in pagination
 */
cursor: string;
}

/**
 * A connection to a list of items.
 */
  interface IPlanetFilmsConnection {
__typename: \\"PlanetFilmsConnection\\";

/**
 * Information to aid in pagination.
 */
pageInfo: IPageInfo;

/**
 * A list of edges.
 */
edges: Array<IPlanetFilmsEdge | null> | null;

/**
 * A count of the total number of objects in this connection, ignoring pagination.
* This allows a client to fetch the first five objects by passing \\"5\\" as the
* argument to \\"first\\", then fetch the total count so it could display \\"5 of 83\\",
* for example.
 */
totalCount: number | null;

/**
 * A list of all of the objects returned in the connection. This is a convenience
* field provided for quickly exploring the API; rather than querying for
* \\"{ edges { node } }\\" when no edge data is needed, this field can be be used
* instead. Note that when clients like Relay need to fetch the \\"cursor\\" field on
* the edge to enable efficient pagination, this shortcut cannot be used, and the
* full \\"{ edges { node } }\\" version should be used instead.
 */
films: Array<IFilm | null> | null;
}

/**
 * An edge in a connection.
 */
  interface IPlanetFilmsEdge {
__typename: \\"PlanetFilmsEdge\\";

/**
 * The item at the end of the edge
 */
node: IFilm | null;

/**
 * A cursor for use in pagination
 */
cursor: string;
}

/**
 * A connection to a list of items.
 */
  interface ISpeciesPeopleConnection {
__typename: \\"SpeciesPeopleConnection\\";

/**
 * Information to aid in pagination.
 */
pageInfo: IPageInfo;

/**
 * A list of edges.
 */
edges: Array<ISpeciesPeopleEdge | null> | null;

/**
 * A count of the total number of objects in this connection, ignoring pagination.
* This allows a client to fetch the first five objects by passing \\"5\\" as the
* argument to \\"first\\", then fetch the total count so it could display \\"5 of 83\\",
* for example.
 */
totalCount: number | null;
}

/**
 * An edge in a connection.
 */
  interface ISpeciesPeopleEdge {
__typename: \\"SpeciesPeopleEdge\\";

/**
 * A cursor for use in pagination
 */
cursor: string;
}

/**
 * A connection to a list of items.
 */
  interface ISpeciesFilmsConnection {
__typename: \\"SpeciesFilmsConnection\\";

/**
 * Information to aid in pagination.
 */
pageInfo: IPageInfo;

/**
 * A list of edges.
 */
edges: Array<ISpeciesFilmsEdge | null> | null;

/**
 * A count of the total number of objects in this connection, ignoring pagination.
* This allows a client to fetch the first five objects by passing \\"5\\" as the
* argument to \\"first\\", then fetch the total count so it could display \\"5 of 83\\",
* for example.
 */
totalCount: number | null;

/**
 * A list of all of the objects returned in the connection. This is a convenience
* field provided for quickly exploring the API; rather than querying for
* \\"{ edges { node } }\\" when no edge data is needed, this field can be be used
* instead. Note that when clients like Relay need to fetch the \\"cursor\\" field on
* the edge to enable efficient pagination, this shortcut cannot be used, and the
* full \\"{ edges { node } }\\" version should be used instead.
 */
films: Array<IFilm | null> | null;
}

/**
 * An edge in a connection.
 */
  interface ISpeciesFilmsEdge {
__typename: \\"SpeciesFilmsEdge\\";

/**
 * The item at the end of the edge
 */
node: IFilm | null;

/**
 * A cursor for use in pagination
 */
cursor: string;
}

/**
 * A connection to a list of items.
 */
  interface IFilmStarshipsConnection {
__typename: \\"FilmStarshipsConnection\\";

/**
 * Information to aid in pagination.
 */
pageInfo: IPageInfo;

/**
 * A list of edges.
 */
edges: Array<IFilmStarshipsEdge | null> | null;

/**
 * A count of the total number of objects in this connection, ignoring pagination.
* This allows a client to fetch the first five objects by passing \\"5\\" as the
* argument to \\"first\\", then fetch the total count so it could display \\"5 of 83\\",
* for example.
 */
totalCount: number | null;

/**
 * A list of all of the objects returned in the connection. This is a convenience
* field provided for quickly exploring the API; rather than querying for
* \\"{ edges { node } }\\" when no edge data is needed, this field can be be used
* instead. Note that when clients like Relay need to fetch the \\"cursor\\" field on
* the edge to enable efficient pagination, this shortcut cannot be used, and the
* full \\"{ edges { node } }\\" version should be used instead.
 */
starships: Array<IStarship | null> | null;
}

/**
 * An edge in a connection.
 */
  interface IFilmStarshipsEdge {
__typename: \\"FilmStarshipsEdge\\";

/**
 * The item at the end of the edge
 */
node: IStarship | null;

/**
 * A cursor for use in pagination
 */
cursor: string;
}

/**
 * A connection to a list of items.
 */
  interface IFilmVehiclesConnection {
__typename: \\"FilmVehiclesConnection\\";

/**
 * Information to aid in pagination.
 */
pageInfo: IPageInfo;

/**
 * A list of edges.
 */
edges: Array<IFilmVehiclesEdge | null> | null;

/**
 * A count of the total number of objects in this connection, ignoring pagination.
* This allows a client to fetch the first five objects by passing \\"5\\" as the
* argument to \\"first\\", then fetch the total count so it could display \\"5 of 83\\",
* for example.
 */
totalCount: number | null;

/**
 * A list of all of the objects returned in the connection. This is a convenience
* field provided for quickly exploring the API; rather than querying for
* \\"{ edges { node } }\\" when no edge data is needed, this field can be be used
* instead. Note that when clients like Relay need to fetch the \\"cursor\\" field on
* the edge to enable efficient pagination, this shortcut cannot be used, and the
* full \\"{ edges { node } }\\" version should be used instead.
 */
vehicles: Array<IVehicle | null> | null;
}

/**
 * An edge in a connection.
 */
  interface IFilmVehiclesEdge {
__typename: \\"FilmVehiclesEdge\\";

/**
 * The item at the end of the edge
 */
node: IVehicle | null;

/**
 * A cursor for use in pagination
 */
cursor: string;
}

/**
 * A connection to a list of items.
 */
  interface IFilmCharactersConnection {
__typename: \\"FilmCharactersConnection\\";

/**
 * Information to aid in pagination.
 */
pageInfo: IPageInfo;

/**
 * A list of edges.
 */
edges: Array<IFilmCharactersEdge | null> | null;

/**
 * A count of the total number of objects in this connection, ignoring pagination.
* This allows a client to fetch the first five objects by passing \\"5\\" as the
* argument to \\"first\\", then fetch the total count so it could display \\"5 of 83\\",
* for example.
 */
totalCount: number | null;
}

/**
 * An edge in a connection.
 */
  interface IFilmCharactersEdge {
__typename: \\"FilmCharactersEdge\\";

/**
 * A cursor for use in pagination
 */
cursor: string;
}

/**
 * A connection to a list of items.
 */
  interface IFilmPlanetsConnection {
__typename: \\"FilmPlanetsConnection\\";

/**
 * Information to aid in pagination.
 */
pageInfo: IPageInfo;

/**
 * A list of edges.
 */
edges: Array<IFilmPlanetsEdge | null> | null;

/**
 * A count of the total number of objects in this connection, ignoring pagination.
* This allows a client to fetch the first five objects by passing \\"5\\" as the
* argument to \\"first\\", then fetch the total count so it could display \\"5 of 83\\",
* for example.
 */
totalCount: number | null;

/**
 * A list of all of the objects returned in the connection. This is a convenience
* field provided for quickly exploring the API; rather than querying for
* \\"{ edges { node } }\\" when no edge data is needed, this field can be be used
* instead. Note that when clients like Relay need to fetch the \\"cursor\\" field on
* the edge to enable efficient pagination, this shortcut cannot be used, and the
* full \\"{ edges { node } }\\" version should be used instead.
 */
planets: Array<IPlanet | null> | null;
}

/**
 * An edge in a connection.
 */
  interface IFilmPlanetsEdge {
__typename: \\"FilmPlanetsEdge\\";

/**
 * The item at the end of the edge
 */
node: IPlanet | null;

/**
 * A cursor for use in pagination
 */
cursor: string;
}

/**
 * A connection to a list of items.
 */
  interface IPeopleConnection {
__typename: \\"PeopleConnection\\";

/**
 * Information to aid in pagination.
 */
pageInfo: IPageInfo;

/**
 * A list of edges.
 */
edges: Array<IPeopleEdge | null> | null;

/**
 * A count of the total number of objects in this connection, ignoring pagination.
* This allows a client to fetch the first five objects by passing \\"5\\" as the
* argument to \\"first\\", then fetch the total count so it could display \\"5 of 83\\",
* for example.
 */
totalCount: number | null;
}

/**
 * An edge in a connection.
 */
  interface IPeopleEdge {
__typename: \\"PeopleEdge\\";

/**
 * A cursor for use in pagination
 */
cursor: string;
}

/**
 * A connection to a list of items.
 */
  interface IPlanetsConnection {
__typename: \\"PlanetsConnection\\";

/**
 * Information to aid in pagination.
 */
pageInfo: IPageInfo;

/**
 * A list of edges.
 */
edges: Array<IPlanetsEdge | null> | null;

/**
 * A count of the total number of objects in this connection, ignoring pagination.
* This allows a client to fetch the first five objects by passing \\"5\\" as the
* argument to \\"first\\", then fetch the total count so it could display \\"5 of 83\\",
* for example.
 */
totalCount: number | null;

/**
 * A list of all of the objects returned in the connection. This is a convenience
* field provided for quickly exploring the API; rather than querying for
* \\"{ edges { node } }\\" when no edge data is needed, this field can be be used
* instead. Note that when clients like Relay need to fetch the \\"cursor\\" field on
* the edge to enable efficient pagination, this shortcut cannot be used, and the
* full \\"{ edges { node } }\\" version should be used instead.
 */
planets: Array<IPlanet | null> | null;
}

/**
 * An edge in a connection.
 */
  interface IPlanetsEdge {
__typename: \\"PlanetsEdge\\";

/**
 * The item at the end of the edge
 */
node: IPlanet | null;

/**
 * A cursor for use in pagination
 */
cursor: string;
}

/**
 * A connection to a list of items.
 */
  interface ISpeciesConnection {
__typename: \\"SpeciesConnection\\";

/**
 * Information to aid in pagination.
 */
pageInfo: IPageInfo;

/**
 * A list of edges.
 */
edges: Array<ISpeciesEdge | null> | null;

/**
 * A count of the total number of objects in this connection, ignoring pagination.
* This allows a client to fetch the first five objects by passing \\"5\\" as the
* argument to \\"first\\", then fetch the total count so it could display \\"5 of 83\\",
* for example.
 */
totalCount: number | null;

/**
 * A list of all of the objects returned in the connection. This is a convenience
* field provided for quickly exploring the API; rather than querying for
* \\"{ edges { node } }\\" when no edge data is needed, this field can be be used
* instead. Note that when clients like Relay need to fetch the \\"cursor\\" field on
* the edge to enable efficient pagination, this shortcut cannot be used, and the
* full \\"{ edges { node } }\\" version should be used instead.
 */
species: Array<ISpecies | null> | null;
}

/**
 * An edge in a connection.
 */
  interface ISpeciesEdge {
__typename: \\"SpeciesEdge\\";

/**
 * The item at the end of the edge
 */
node: ISpecies | null;

/**
 * A cursor for use in pagination
 */
cursor: string;
}

/**
 * A connection to a list of items.
 */
  interface IStarshipsConnection {
__typename: \\"StarshipsConnection\\";

/**
 * Information to aid in pagination.
 */
pageInfo: IPageInfo;

/**
 * A list of edges.
 */
edges: Array<IStarshipsEdge | null> | null;

/**
 * A count of the total number of objects in this connection, ignoring pagination.
* This allows a client to fetch the first five objects by passing \\"5\\" as the
* argument to \\"first\\", then fetch the total count so it could display \\"5 of 83\\",
* for example.
 */
totalCount: number | null;

/**
 * A list of all of the objects returned in the connection. This is a convenience
* field provided for quickly exploring the API; rather than querying for
* \\"{ edges { node } }\\" when no edge data is needed, this field can be be used
* instead. Note that when clients like Relay need to fetch the \\"cursor\\" field on
* the edge to enable efficient pagination, this shortcut cannot be used, and the
* full \\"{ edges { node } }\\" version should be used instead.
 */
starships: Array<IStarship | null> | null;
}

/**
 * An edge in a connection.
 */
  interface IStarshipsEdge {
__typename: \\"StarshipsEdge\\";

/**
 * The item at the end of the edge
 */
node: IStarship | null;

/**
 * A cursor for use in pagination
 */
cursor: string;
}

/**
 * A connection to a list of items.
 */
  interface IVehiclesConnection {
__typename: \\"VehiclesConnection\\";

/**
 * Information to aid in pagination.
 */
pageInfo: IPageInfo;

/**
 * A list of edges.
 */
edges: Array<IVehiclesEdge | null> | null;

/**
 * A count of the total number of objects in this connection, ignoring pagination.
* This allows a client to fetch the first five objects by passing \\"5\\" as the
* argument to \\"first\\", then fetch the total count so it could display \\"5 of 83\\",
* for example.
 */
totalCount: number | null;

/**
 * A list of all of the objects returned in the connection. This is a convenience
* field provided for quickly exploring the API; rather than querying for
* \\"{ edges { node } }\\" when no edge data is needed, this field can be be used
* instead. Note that when clients like Relay need to fetch the \\"cursor\\" field on
* the edge to enable efficient pagination, this shortcut cannot be used, and the
* full \\"{ edges { node } }\\" version should be used instead.
 */
vehicles: Array<IVehicle | null> | null;
}

/**
 * An edge in a connection.
 */
  interface IVehiclesEdge {
__typename: \\"VehiclesEdge\\";

/**
 * The item at the end of the edge
 */
node: IVehicle | null;

/**
 * A cursor for use in pagination
 */
cursor: string;
}"
`;

exports[`gql2ts interfaces correctly translates enums 1`] = `
"interface IGraphQLResponseRoot {
data?: IQuery;
errors?: Array<IGraphQLResponseError>;
}

interface IGraphQLResponseError {
/** Required for all errors */
message: string;
locations?: Array<IGraphQLResponseErrorLocation>;
/** 7.2.2 says 'GraphQL servers may provide additional entries to error' */
[propName: string]: any;
}

interface IGraphQLResponseErrorLocation {
line: number;
column: number;
}

interface IQuery {
__typename: \\"Query\\";
colorEnum: Color | null;
}

const enum Color {
RED = 'RED',
GREEN = 'GREEN',
BLUE = 'BLUE'
}"
`;

exports[`gql2ts interfaces correctly translates enums with types 1`] = `
"interface IGraphQLResponseRoot {
data?: IQuery;
errors?: Array<IGraphQLResponseError>;
}

interface IGraphQLResponseError {
/** Required for all errors */
message: string;
locations?: Array<IGraphQLResponseErrorLocation>;
/** 7.2.2 says 'GraphQL servers may provide additional entries to error' */
[propName: string]: any;
}

interface IGraphQLResponseErrorLocation {
line: number;
column: number;
}

interface IQuery {
__typename: \\"Query\\";
colorEnum: Color | null;
}

type Color = 'RED' | 'GREEN' | 'BLUE';"
`;

exports[`gql2ts interfaces correctly translates the star wars schema into typescript defs 1`] = `
"interface IGraphQLResponseRoot {
data?: IRoot;
errors?: Array<IGraphQLResponseError>;
}

interface IGraphQLResponseError {
/** Required for all errors */
message: string;
locations?: Array<IGraphQLResponseErrorLocation>;
/** 7.2.2 says 'GraphQL servers may provide additional entries to error' */
[propName: string]: any;
}

interface IGraphQLResponseErrorLocation {
line: number;
column: number;
}

interface IRoot {
__typename: \\"Root\\";
allFilms: IFilmsConnection | null;
film: IFilm | null;
allPeople: IPeopleConnection | null;
person: IPerson | null;
allPlanets: IPlanetsConnection | null;
planet: IPlanet | null;
allSpecies: ISpeciesConnection | null;
species: ISpecies | null;
allStarships: IStarshipsConnection | null;
starship: IStarship | null;
allVehicles: IVehiclesConnection | null;
vehicle: IVehicle | null;

/**
 * Fetches an object given its ID
 */
node: Node | null;
}

interface IAllFilmsOnRootArguments {
after?: string | null;
first?: number | null;
before?: string | null;
last?: number | null;
}

interface IFilmOnRootArguments {
id?: string | null;
filmID?: string | null;
}

interface IAllPeopleOnRootArguments {
after?: string | null;
first?: number | null;
before?: string | null;
last?: number | null;
}

interface IPersonOnRootArguments {
id?: string | null;
personID?: string | null;
}

interface IAllPlanetsOnRootArguments {
after?: string | null;
first?: number | null;
before?: string | null;
last?: number | null;
}

interface IPlanetOnRootArguments {
id?: string | null;
planetID?: string | null;
}

interface IAllSpeciesOnRootArguments {
after?: string | null;
first?: number | null;
before?: string | null;
last?: number | null;
}

interface ISpeciesOnRootArguments {
id?: string | null;
speciesID?: string | null;
}

interface IAllStarshipsOnRootArguments {
after?: string | null;
first?: number | null;
before?: string | null;
last?: number | null;
}

interface IStarshipOnRootArguments {
id?: string | null;
starshipID?: string | null;
}

interface IAllVehiclesOnRootArguments {
after?: string | null;
first?: number | null;
before?: string | null;
last?: number | null;
}

interface IVehicleOnRootArguments {
id?: string | null;
vehicleID?: string | null;
}

interface INodeOnRootArguments {

  /**
   * The ID of an object
   */
id: string;
}

/**
 * A connection to a list of items.
 */
  interface IFilmsConnection {
__typename: \\"FilmsConnection\\";

/**
 * Information to aid in pagination.
 */
pageInfo: IPageInfo;

/**
 * A list of edges.
 */
edges: Array<IFilmsEdge | null> | null;

/**
 * A count of the total number of objects in this connection, ignoring pagination.
* This allows a client to fetch the first five objects by passing \\"5\\" as the
* argument to \\"first\\", then fetch the total count so it could display \\"5 of 83\\",
* for example.
 */
totalCount: number | null;

/**
 * A list of all of the objects returned in the connection. This is a convenience
* field provided for quickly exploring the API; rather than querying for
* \\"{ edges { node } }\\" when no edge data is needed, this field can be be used
* instead. Note that when clients like Relay need to fetch the \\"cursor\\" field on
* the edge to enable efficient pagination, this shortcut cannot be used, and the
* full \\"{ edges { node } }\\" version should be used instead.
 */
films: Array<IFilm | null> | null;
}

/**
 * Information about pagination in a connection.
 */
  interface IPageInfo {
__typename: \\"PageInfo\\";

/**
 * When paginating forwards, are there more items?
 */
hasNextPage: boolean;

/**
 * When paginating backwards, are there more items?
 */
hasPreviousPage: boolean;

/**
 * When paginating backwards, the cursor to continue.
 */
startCursor: string | null;

/**
 * When paginating forwards, the cursor to continue.
 */
endCursor: string | null;
}

/**
 * An edge in a connection.
 */
  interface IFilmsEdge {
__typename: \\"FilmsEdge\\";

/**
 * The item at the end of the edge
 */
node: IFilm | null;

/**
 * A cursor for use in pagination
 */
cursor: string;
}

/**
 * A single film.
 */
  interface IFilm {
__typename: \\"Film\\";

/**
 * The title of this film.
 */
title: string | null;

/**
 * The episode number of this film.
 */
episodeID: number | null;

/**
 * The opening paragraphs at the beginning of this film.
 */
openingCrawl: string | null;

/**
 * The name of the director of this film.
 */
director: string | null;

/**
 * The name(s) of the producer(s) of this film.
 */
producers: Array<string | null> | null;

/**
 * The ISO 8601 date format of film release at original creator country.
 */
releaseDate: string | null;
speciesConnection: IFilmSpeciesConnection | null;
starshipConnection: IFilmStarshipsConnection | null;
vehicleConnection: IFilmVehiclesConnection | null;
characterConnection: IFilmCharactersConnection | null;
planetConnection: IFilmPlanetsConnection | null;

/**
 * The ISO 8601 date format of the time that this resource was created.
 */
created: string | null;

/**
 * The ISO 8601 date format of the time that this resource was edited.
 */
edited: string | null;

/**
 * The ID of an object
 */
id: string;
}

interface ISpeciesConnectionOnFilmArguments {
after?: string | null;
first?: number | null;
before?: string | null;
last?: number | null;
}

interface IStarshipConnectionOnFilmArguments {
after?: string | null;
first?: number | null;
before?: string | null;
last?: number | null;
}

interface IVehicleConnectionOnFilmArguments {
after?: string | null;
first?: number | null;
before?: string | null;
last?: number | null;
}

interface ICharacterConnectionOnFilmArguments {
after?: string | null;
first?: number | null;
before?: string | null;
last?: number | null;
}

interface IPlanetConnectionOnFilmArguments {
after?: string | null;
first?: number | null;
before?: string | null;
last?: number | null;
}

/**
 * An object with an ID
 */
  type Node = IFilm | ISpecies | IPlanet | IPerson | IStarship | IVehicle;

/**
 * An object with an ID
 */
  interface INode {
__typename: \\"Node\\";

/**
 * The id of the object.
 */
id: string;
}

/**
 * A connection to a list of items.
 */
  interface IFilmSpeciesConnection {
__typename: \\"FilmSpeciesConnection\\";

/**
 * Information to aid in pagination.
 */
pageInfo: IPageInfo;

/**
 * A list of edges.
 */
edges: Array<IFilmSpeciesEdge | null> | null;

/**
 * A count of the total number of objects in this connection, ignoring pagination.
* This allows a client to fetch the first five objects by passing \\"5\\" as the
* argument to \\"first\\", then fetch the total count so it could display \\"5 of 83\\",
* for example.
 */
totalCount: number | null;

/**
 * A list of all of the objects returned in the connection. This is a convenience
* field provided for quickly exploring the API; rather than querying for
* \\"{ edges { node } }\\" when no edge data is needed, this field can be be used
* instead. Note that when clients like Relay need to fetch the \\"cursor\\" field on
* the edge to enable efficient pagination, this shortcut cannot be used, and the
* full \\"{ edges { node } }\\" version should be used instead.
 */
species: Array<ISpecies | null> | null;
}

/**
 * An edge in a connection.
 */
  interface IFilmSpeciesEdge {
__typename: \\"FilmSpeciesEdge\\";

/**
 * The item at the end of the edge
 */
node: ISpecies | null;

/**
 * A cursor for use in pagination
 */
cursor: string;
}

/**
 * A type of person or character within the Star Wars Universe.
 */
  interface ISpecies {
__typename: \\"Species\\";

/**
 * The name of this species.
 */
name: string | null;

/**
 * The classification of this species, such as \\"mammal\\" or \\"reptile\\".
 */
classification: string | null;

/**
 * The designation of this species, such as \\"sentient\\".
 */
designation: string | null;

/**
 * The average height of this species in centimeters.
 */
averageHeight: number | null;

/**
 * The average lifespan of this species in years, null if unknown.
 */
averageLifespan: number | null;

/**
 * Common eye colors for this species, null if this species does not typically
* have eyes.
 */
eyeColors: Array<string | null> | null;

/**
 * Common hair colors for this species, null if this species does not typically
* have hair.
 */
hairColors: Array<string | null> | null;

/**
 * Common skin colors for this species, null if this species does not typically
* have skin.
 */
skinColors: Array<string | null> | null;

/**
 * The language commonly spoken by this species.
 */
language: string | null;

/**
 * A planet that this species originates from.
 */
homeworld: IPlanet | null;
personConnection: ISpeciesPeopleConnection | null;
filmConnection: ISpeciesFilmsConnection | null;

/**
 * The ISO 8601 date format of the time that this resource was created.
 */
created: string | null;

/**
 * The ISO 8601 date format of the time that this resource was edited.
 */
edited: string | null;

/**
 * The ID of an object
 */
id: string;
}

interface IPersonConnectionOnSpeciesArguments {
after?: string | null;
first?: number | null;
before?: string | null;
last?: number | null;
}

interface IFilmConnectionOnSpeciesArguments {
after?: string | null;
first?: number | null;
before?: string | null;
last?: number | null;
}

/**
 * A large mass, planet or planetoid in the Star Wars Universe, at the time of
* 0 ABY.
 */
  interface IPlanet {
__typename: \\"Planet\\";

/**
 * The name of this planet.
 */
name: string | null;

/**
 * The diameter of this planet in kilometers.
 */
diameter: number | null;

/**
 * The number of standard hours it takes for this planet to complete a single
* rotation on its axis.
 */
rotationPeriod: number | null;

/**
 * The number of standard days it takes for this planet to complete a single orbit
* of its local star.
 */
orbitalPeriod: number | null;

/**
 * A number denoting the gravity of this planet, where \\"1\\" is normal or 1 standard
* G. \\"2\\" is twice or 2 standard Gs. \\"0.5\\" is half or 0.5 standard Gs.
 */
gravity: string | null;

/**
 * The average population of sentient beings inhabiting this planet.
 */
population: number | null;

/**
 * The climates of this planet.
 */
climates: Array<string | null> | null;

/**
 * The terrains of this planet.
 */
terrains: Array<string | null> | null;

/**
 * The percentage of the planet surface that is naturally occuring water or bodies
* of water.
 */
surfaceWater: number | null;
residentConnection: IPlanetResidentsConnection | null;
filmConnection: IPlanetFilmsConnection | null;

/**
 * The ISO 8601 date format of the time that this resource was created.
 */
created: string | null;

/**
 * The ISO 8601 date format of the time that this resource was edited.
 */
edited: string | null;

/**
 * The ID of an object
 */
id: string;
}

interface IResidentConnectionOnPlanetArguments {
after?: string | null;
first?: number | null;
before?: string | null;
last?: number | null;
}

interface IFilmConnectionOnPlanetArguments {
after?: string | null;
first?: number | null;
before?: string | null;
last?: number | null;
}

/**
 * A connection to a list of items.
 */
  interface IPlanetResidentsConnection {
__typename: \\"PlanetResidentsConnection\\";

/**
 * Information to aid in pagination.
 */
pageInfo: IPageInfo;

/**
 * A list of edges.
 */
edges: Array<IPlanetResidentsEdge | null> | null;

/**
 * A count of the total number of objects in this connection, ignoring pagination.
* This allows a client to fetch the first five objects by passing \\"5\\" as the
* argument to \\"first\\", then fetch the total count so it could display \\"5 of 83\\",
* for example.
 */
totalCount: number | null;

/**
 * A list of all of the objects returned in the connection. This is a convenience
* field provided for quickly exploring the API; rather than querying for
* \\"{ edges { node } }\\" when no edge data is needed, this field can be be used
* instead. Note that when clients like Relay need to fetch the \\"cursor\\" field on
* the edge to enable efficient pagination, this shortcut cannot be used, and the
* full \\"{ edges { node } }\\" version should be used instead.
 */
residents: Array<IPerson | null> | null;
}

/**
 * An edge in a connection.
 */
  interface IPlanetResidentsEdge {
__typename: \\"PlanetResidentsEdge\\";

/**
 * The item at the end of the edge
 */
node: IPerson | null;

/**
 * A cursor for use in pagination
 */
cursor: string;
}

/**
 * An individual person or character within the Star Wars universe.
 */
  interface IPerson {
__typename: \\"Person\\";

/**
 * The name of this person.
 */
name: string | null;

/**
 * The birth year of the person, using the in-universe standard of BBY or ABY -
* Before the Battle of Yavin or After the Battle of Yavin. The Battle of Yavin is
* a battle that occurs at the end of Star Wars episode IV: A New Hope.
 */
birthYear: string | null;

/**
 * The eye color of this person. Will be \\"unknown\\" if not known or \\"n/a\\" if the
* person does not have an eye.
 */
eyeColor: string | null;

/**
 * The gender of this person. Either \\"Male\\", \\"Female\\" or \\"unknown\\",
* \\"n/a\\" if the person does not have a gender.
 */
gender: string | null;

/**
 * The hair color of this person. Will be \\"unknown\\" if not known or \\"n/a\\" if the
* person does not have hair.
 */
hairColor: string | null;

/**
 * The height of the person in centimeters.
 */
height: number | null;

/**
 * The mass of the person in kilograms.
 */
mass: number | null;

/**
 * The skin color of this person.
 */
skinColor: string | null;

/**
 * A planet that this person was born on or inhabits.
 */
homeworld: IPlanet | null;
filmConnection: IPersonFilmsConnection | null;

/**
 * The species that this person belongs to, or null if unknown.
 */
species: ISpecies | null;
starshipConnection: IPersonStarshipsConnection | null;
vehicleConnection: IPersonVehiclesConnection | null;

/**
 * The ISO 8601 date format of the time that this resource was created.
 */
created: string | null;

/**
 * The ISO 8601 date format of the time that this resource was edited.
 */
edited: string | null;

/**
 * The ID of an object
 */
id: string;
}

interface IFilmConnectionOnPersonArguments {
after?: string | null;
first?: number | null;
before?: string | null;
last?: number | null;
}

interface IStarshipConnectionOnPersonArguments {
after?: string | null;
first?: number | null;
before?: string | null;
last?: number | null;
}

interface IVehicleConnectionOnPersonArguments {
after?: string | null;
first?: number | null;
before?: string | null;
last?: number | null;
}

/**
 * A connection to a list of items.
 */
  interface IPersonFilmsConnection {
__typename: \\"PersonFilmsConnection\\";

/**
 * Information to aid in pagination.
 */
pageInfo: IPageInfo;

/**
 * A list of edges.
 */
edges: Array<IPersonFilmsEdge | null> | null;

/**
 * A count of the total number of objects in this connection, ignoring pagination.
* This allows a client to fetch the first five objects by passing \\"5\\" as the
* argument to \\"first\\", then fetch the total count so it could display \\"5 of 83\\",
* for example.
 */
totalCount: number | null;

/**
 * A list of all of the objects returned in the connection. This is a convenience
* field provided for quickly exploring the API; rather than querying for
* \\"{ edges { node } }\\" when no edge data is needed, this field can be be used
* instead. Note that when clients like Relay need to fetch the \\"cursor\\" field on
* the edge to enable efficient pagination, this shortcut cannot be used, and the
* full \\"{ edges { node } }\\" version should be used instead.
 */
films: Array<IFilm | null> | null;
}

/**
 * An edge in a connection.
 */
  interface IPersonFilmsEdge {
__typename: \\"PersonFilmsEdge\\";

/**
 * The item at the end of the edge
 */
node: IFilm | null;

/**
 * A cursor for use in pagination
 */
cursor: string;
}

/**
 * A connection to a list of items.
 */
  interface IPersonStarshipsConnection {
__typename: \\"PersonStarshipsConnection\\";

/**
 * Information to aid in pagination.
 */
pageInfo: IPageInfo;

/**
 * A list of edges.
 */
edges: Array<IPersonStarshipsEdge | null> | null;

/**
 * A count of the total number of objects in this connection, ignoring pagination.
* This allows a client to fetch the first five objects by passing \\"5\\" as the
* argument to \\"first\\", then fetch the total count so it could display \\"5 of 83\\",
* for example.
 */
totalCount: number | null;

/**
 * A list of all of the objects returned in the connection. This is a convenience
* field provided for quickly exploring the API; rather than querying for
* \\"{ edges { node } }\\" when no edge data is needed, this field can be be used
* instead. Note that when clients like Relay need to fetch the \\"cursor\\" field on
* the edge to enable efficient pagination, this shortcut cannot be used, and the
* full \\"{ edges { node } }\\" version should be used instead.
 */
starships: Array<IStarship | null> | null;
}

/**
 * An edge in a connection.
 */
  interface IPersonStarshipsEdge {
__typename: \\"PersonStarshipsEdge\\";

/**
 * The item at the end of the edge
 */
node: IStarship | null;

/**
 * A cursor for use in pagination
 */
cursor: string;
}

/**
 * A single transport craft that has hyperdrive capability.
 */
  interface IStarship {
__typename: \\"Starship\\";

/**
 * The name of this starship. The common name, such as \\"Death Star\\".
 */
name: string | null;

/**
 * The model or official name of this starship. Such as \\"T-65 X-wing\\" or \\"DS-1
* Orbital Battle Station\\".
 */
model: string | null;

/**
 * The class of this starship, such as \\"Starfighter\\" or \\"Deep Space Mobile
* Battlestation\\"
 */
starshipClass: string | null;

/**
 * The manufacturers of this starship.
 */
manufacturers: Array<string | null> | null;

/**
 * The cost of this starship new, in galactic credits.
 */
costInCredits: number | null;

/**
 * The length of this starship in meters.
 */
length: number | null;

/**
 * The number of personnel needed to run or pilot this starship.
 */
crew: string | null;

/**
 * The number of non-essential people this starship can transport.
 */
passengers: string | null;

/**
 * The maximum speed of this starship in atmosphere. null if this starship is
* incapable of atmosphering flight.
 */
maxAtmospheringSpeed: number | null;

/**
 * The class of this starships hyperdrive.
 */
hyperdriveRating: number | null;

/**
 * The Maximum number of Megalights this starship can travel in a standard hour.
* A \\"Megalight\\" is a standard unit of distance and has never been defined before
* within the Star Wars universe. This figure is only really useful for measuring
* the difference in speed of starships. We can assume it is similar to AU, the
* distance between our Sun (Sol) and Earth.
 */
MGLT: number | null;

/**
 * The maximum number of kilograms that this starship can transport.
 */
cargoCapacity: number | null;

/**
 * The maximum length of time that this starship can provide consumables for its
* entire crew without having to resupply.
 */
consumables: string | null;
pilotConnection: IStarshipPilotsConnection | null;
filmConnection: IStarshipFilmsConnection | null;

/**
 * The ISO 8601 date format of the time that this resource was created.
 */
created: string | null;

/**
 * The ISO 8601 date format of the time that this resource was edited.
 */
edited: string | null;

/**
 * The ID of an object
 */
id: string;
}

interface IPilotConnectionOnStarshipArguments {
after?: string | null;
first?: number | null;
before?: string | null;
last?: number | null;
}

interface IFilmConnectionOnStarshipArguments {
after?: string | null;
first?: number | null;
before?: string | null;
last?: number | null;
}

/**
 * A connection to a list of items.
 */
  interface IStarshipPilotsConnection {
__typename: \\"StarshipPilotsConnection\\";

/**
 * Information to aid in pagination.
 */
pageInfo: IPageInfo;

/**
 * A list of edges.
 */
edges: Array<IStarshipPilotsEdge | null> | null;

/**
 * A count of the total number of objects in this connection, ignoring pagination.
* This allows a client to fetch the first five objects by passing \\"5\\" as the
* argument to \\"first\\", then fetch the total count so it could display \\"5 of 83\\",
* for example.
 */
totalCount: number | null;

/**
 * A list of all of the objects returned in the connection. This is a convenience
* field provided for quickly exploring the API; rather than querying for
* \\"{ edges { node } }\\" when no edge data is needed, this field can be be used
* instead. Note that when clients like Relay need to fetch the \\"cursor\\" field on
* the edge to enable efficient pagination, this shortcut cannot be used, and the
* full \\"{ edges { node } }\\" version should be used instead.
 */
pilots: Array<IPerson | null> | null;
}

/**
 * An edge in a connection.
 */
  interface IStarshipPilotsEdge {
__typename: \\"StarshipPilotsEdge\\";

/**
 * The item at the end of the edge
 */
node: IPerson | null;

/**
 * A cursor for use in pagination
 */
cursor: string;
}

/**
 * A connection to a list of items.
 */
  interface IStarshipFilmsConnection {
__typename: \\"StarshipFilmsConnection\\";

/**
 * Information to aid in pagination.
 */
pageInfo: IPageInfo;

/**
 * A list of edges.
 */
edges: Array<IStarshipFilmsEdge | null> | null;

/**
 * A count of the total number of objects in this connection, ignoring pagination.
* This allows a client to fetch the first five objects by passing \\"5\\" as the
* argument to \\"first\\", then fetch the total count so it could display \\"5 of 83\\",
* for example.
 */
totalCount: number | null;

/**
 * A list of all of the objects returned in the connection. This is a convenience
* field provided for quickly exploring the API; rather than querying for
* \\"{ edges { node } }\\" when no edge data is needed, this field can be be used
* instead. Note that when clients like Relay need to fetch the \\"cursor\\" field on
* the edge to enable efficient pagination, this shortcut cannot be used, and the
* full \\"{ edges { node } }\\" version should be used instead.
 */
films: Array<IFilm | null> | null;
}

/**
 * An edge in a connection.
 */
  interface IStarshipFilmsEdge {
__typename: \\"StarshipFilmsEdge\\";

/**
 * The item at the end of the edge
 */
node: IFilm | null;

/**
 * A cursor for use in pagination
 */
cursor: string;
}

/**
 * A connection to a list of items.
 */
  interface IPersonVehiclesConnection {
__typename: \\"PersonVehiclesConnection\\";

/**
 * Information to aid in pagination.
 */
pageInfo: IPageInfo;

/**
 * A list of edges.
 */
edges: Array<IPersonVehiclesEdge | null> | null;

/**
 * A count of the total number of objects in this connection, ignoring pagination.
* This allows a client to fetch the first five objects by passing \\"5\\" as the
* argument to \\"first\\", then fetch the total count so it could display \\"5 of 83\\",
* for example.
 */
totalCount: number | null;

/**
 * A list of all of the objects returned in the connection. This is a convenience
* field provided for quickly exploring the API; rather than querying for
* \\"{ edges { node } }\\" when no edge data is needed, this field can be be used
* instead. Note that when clients like Relay need to fetch the \\"cursor\\" field on
* the edge to enable efficient pagination, this shortcut cannot be used, and the
* full \\"{ edges { node } }\\" version should be used instead.
 */
vehicles: Array<IVehicle | null> | null;
}

/**
 * An edge in a connection.
 */
  interface IPersonVehiclesEdge {
__typename: \\"PersonVehiclesEdge\\";

/**
 * The item at the end of the edge
 */
node: IVehicle | null;

/**
 * A cursor for use in pagination
 */
cursor: string;
}

/**
 * A single transport craft that does not have hyperdrive capability
 */
  interface IVehicle {
__typename: \\"Vehicle\\";

/**
 * The name of this vehicle. The common name, such as \\"Sand Crawler\\" or \\"Speeder
* bike\\".
 */
name: string | null;

/**
 * The model or official name of this vehicle. Such as \\"All-Terrain Attack
* Transport\\".
 */
model: string | null;

/**
 * The class of this vehicle, such as \\"Wheeled\\" or \\"Repulsorcraft\\".
 */
vehicleClass: string | null;

/**
 * The manufacturers of this vehicle.
 */
manufacturers: Array<string | null> | null;

/**
 * The cost of this vehicle new, in Galactic Credits.
 */
costInCredits: number | null;

/**
 * The length of this vehicle in meters.
 */
length: number | null;

/**
 * The number of personnel needed to run or pilot this vehicle.
 */
crew: string | null;

/**
 * The number of non-essential people this vehicle can transport.
 */
passengers: string | null;

/**
 * The maximum speed of this vehicle in atmosphere.
 */
maxAtmospheringSpeed: number | null;

/**
 * The maximum number of kilograms that this vehicle can transport.
 */
cargoCapacity: number | null;

/**
 * The maximum length of time that this vehicle can provide consumables for its
* entire crew without having to resupply.
 */
consumables: string | null;
pilotConnection: IVehiclePilotsConnection | null;
filmConnection: IVehicleFilmsConnection | null;

/**
 * The ISO 8601 date format of the time that this resource was created.
 */
created: string | null;

/**
 * The ISO 8601 date format of the time that this resource was edited.
 */
edited: string | null;

/**
 * The ID of an object
 */
id: string;
}

interface IPilotConnectionOnVehicleArguments {
after?: string | null;
first?: number | null;
before?: string | null;
last?: number | null;
}

interface IFilmConnectionOnVehicleArguments {
after?: string | null;
first?: number | null;
before?: string | null;
last?: number | null;
}

/**
 * A connection to a list of items.
 */
  interface IVehiclePilotsConnection {
__typename: \\"VehiclePilotsConnection\\";

/**
 * Information to aid in pagination.
 */
pageInfo: IPageInfo;

/**
 * A list of edges.
 */
edges: Array<IVehiclePilotsEdge | null> | null;

/**
 * A count of the total number of objects in this connection, ignoring pagination.
* This allows a client to fetch the first five objects by passing \\"5\\" as the
* argument to \\"first\\", then fetch the total count so it could display \\"5 of 83\\",
* for example.
 */
totalCount: number | null;

/**
 * A list of all of the objects returned in the connection. This is a convenience
* field provided for quickly exploring the API; rather than querying for
* \\"{ edges { node } }\\" when no edge data is needed, this field can be be used
* instead. Note that when clients like Relay need to fetch the \\"cursor\\" field on
* the edge to enable efficient pagination, this shortcut cannot be used, and the
* full \\"{ edges { node } }\\" version should be used instead.
 */
pilots: Array<IPerson | null> | null;
}

/**
 * An edge in a connection.
 */
  interface IVehiclePilotsEdge {
__typename: \\"VehiclePilotsEdge\\";

/**
 * The item at the end of the edge
 */
node: IPerson | null;

/**
 * A cursor for use in pagination
 */
cursor: string;
}

/**
 * A connection to a list of items.
 */
  interface IVehicleFilmsConnection {
__typename: \\"VehicleFilmsConnection\\";

/**
 * Information to aid in pagination.
 */
pageInfo: IPageInfo;

/**
 * A list of edges.
 */
edges: Array<IVehicleFilmsEdge | null> | null;

/**
 * A count of the total number of objects in this connection, ignoring pagination.
* This allows a client to fetch the first five objects by passing \\"5\\" as the
* argument to \\"first\\", then fetch the total count so it could display \\"5 of 83\\",
* for example.
 */
totalCount: number | null;

/**
 * A list of all of the objects returned in the connection. This is a convenience
* field provided for quickly exploring the API; rather than querying for
* \\"{ edges { node } }\\" when no edge data is needed, this field can be be used
* instead. Note that when clients like Relay need to fetch the \\"cursor\\" field on
* the edge to enable efficient pagination, this shortcut cannot be used, and the
* full \\"{ edges { node } }\\" version should be used instead.
 */
films: Array<IFilm | null> | null;
}

/**
 * An edge in a connection.
 */
  interface IVehicleFilmsEdge {
__typename: \\"VehicleFilmsEdge\\";

/**
 * The item at the end of the edge
 */
node: IFilm | null;

/**
 * A cursor for use in pagination
 */
cursor: string;
}

/**
 * A connection to a list of items.
 */
  interface IPlanetFilmsConnection {
__typename: \\"PlanetFilmsConnection\\";

/**
 * Information to aid in pagination.
 */
pageInfo: IPageInfo;

/**
 * A list of edges.
 */
edges: Array<IPlanetFilmsEdge | null> | null;

/**
 * A count of the total number of objects in this connection, ignoring pagination.
* This allows a client to fetch the first five objects by passing \\"5\\" as the
* argument to \\"first\\", then fetch the total count so it could display \\"5 of 83\\",
* for example.
 */
totalCount: number | null;

/**
 * A list of all of the objects returned in the connection. This is a convenience
* field provided for quickly exploring the API; rather than querying for
* \\"{ edges { node } }\\" when no edge data is needed, this field can be be used
* instead. Note that when clients like Relay need to fetch the \\"cursor\\" field on
* the edge to enable efficient pagination, this shortcut cannot be used, and the
* full \\"{ edges { node } }\\" version should be used instead.
 */
films: Array<IFilm | null> | null;
}

/**
 * An edge in a connection.
 */
  interface IPlanetFilmsEdge {
__typename: \\"PlanetFilmsEdge\\";

/**
 * The item at the end of the edge
 */
node: IFilm | null;

/**
 * A cursor for use in pagination
 */
cursor: string;
}

/**
 * A connection to a list of items.
 */
  interface ISpeciesPeopleConnection {
__typename: \\"SpeciesPeopleConnection\\";

/**
 * Information to aid in pagination.
 */
pageInfo: IPageInfo;

/**
 * A list of edges.
 */
edges: Array<ISpeciesPeopleEdge | null> | null;

/**
 * A count of the total number of objects in this connection, ignoring pagination.
* This allows a client to fetch the first five objects by passing \\"5\\" as the
* argument to \\"first\\", then fetch the total count so it could display \\"5 of 83\\",
* for example.
 */
totalCount: number | null;

/**
 * A list of all of the objects returned in the connection. This is a convenience
* field provided for quickly exploring the API; rather than querying for
* \\"{ edges { node } }\\" when no edge data is needed, this field can be be used
* instead. Note that when clients like Relay need to fetch the \\"cursor\\" field on
* the edge to enable efficient pagination, this shortcut cannot be used, and the
* full \\"{ edges { node } }\\" version should be used instead.
 */
people: Array<IPerson | null> | null;
}

/**
 * An edge in a connection.
 */
  interface ISpeciesPeopleEdge {
__typename: \\"SpeciesPeopleEdge\\";

/**
 * The item at the end of the edge
 */
node: IPerson | null;

/**
 * A cursor for use in pagination
 */
cursor: string;
}

/**
 * A connection to a list of items.
 */
  interface ISpeciesFilmsConnection {
__typename: \\"SpeciesFilmsConnection\\";

/**
 * Information to aid in pagination.
 */
pageInfo: IPageInfo;

/**
 * A list of edges.
 */
edges: Array<ISpeciesFilmsEdge | null> | null;

/**
 * A count of the total number of objects in this connection, ignoring pagination.
* This allows a client to fetch the first five objects by passing \\"5\\" as the
* argument to \\"first\\", then fetch the total count so it could display \\"5 of 83\\",
* for example.
 */
totalCount: number | null;

/**
 * A list of all of the objects returned in the connection. This is a convenience
* field provided for quickly exploring the API; rather than querying for
* \\"{ edges { node } }\\" when no edge data is needed, this field can be be used
* instead. Note that when clients like Relay need to fetch the \\"cursor\\" field on
* the edge to enable efficient pagination, this shortcut cannot be used, and the
* full \\"{ edges { node } }\\" version should be used instead.
 */
films: Array<IFilm | null> | null;
}

/**
 * An edge in a connection.
 */
  interface ISpeciesFilmsEdge {
__typename: \\"SpeciesFilmsEdge\\";

/**
 * The item at the end of the edge
 */
node: IFilm | null;

/**
 * A cursor for use in pagination
 */
cursor: string;
}

/**
 * A connection to a list of items.
 */
  interface IFilmStarshipsConnection {
__typename: \\"FilmStarshipsConnection\\";

/**
 * Information to aid in pagination.
 */
pageInfo: IPageInfo;

/**
 * A list of edges.
 */
edges: Array<IFilmStarshipsEdge | null> | null;

/**
 * A count of the total number of objects in this connection, ignoring pagination.
* This allows a client to fetch the first five objects by passing \\"5\\" as the
* argument to \\"first\\", then fetch the total count so it could display \\"5 of 83\\",
* for example.
 */
totalCount: number | null;

/**
 * A list of all of the objects returned in the connection. This is a convenience
* field provided for quickly exploring the API; rather than querying for
* \\"{ edges { node } }\\" when no edge data is needed, this field can be be used
* instead. Note that when clients like Relay need to fetch the \\"cursor\\" field on
* the edge to enable efficient pagination, this shortcut cannot be used, and the
* full \\"{ edges { node } }\\" version should be used instead.
 */
starships: Array<IStarship | null> | null;
}

/**
 * An edge in a connection.
 */
  interface IFilmStarshipsEdge {
__typename: \\"FilmStarshipsEdge\\";

/**
 * The item at the end of the edge
 */
node: IStarship | null;

/**
 * A cursor for use in pagination
 */
cursor: string;
}

/**
 * A connection to a list of items.
 */
  interface IFilmVehiclesConnection {
__typename: \\"FilmVehiclesConnection\\";

/**
 * Information to aid in pagination.
 */
pageInfo: IPageInfo;

/**
 * A list of edges.
 */
edges: Array<IFilmVehiclesEdge | null> | null;

/**
 * A count of the total number of objects in this connection, ignoring pagination.
* This allows a client to fetch the first five objects by passing \\"5\\" as the
* argument to \\"first\\", then fetch the total count so it could display \\"5 of 83\\",
* for example.
 */
totalCount: number | null;

/**
 * A list of all of the objects returned in the connection. This is a convenience
* field provided for quickly exploring the API; rather than querying for
* \\"{ edges { node } }\\" when no edge data is needed, this field can be be used
* instead. Note that when clients like Relay need to fetch the \\"cursor\\" field on
* the edge to enable efficient pagination, this shortcut cannot be used, and the
* full \\"{ edges { node } }\\" version should be used instead.
 */
vehicles: Array<IVehicle | null> | null;
}

/**
 * An edge in a connection.
 */
  interface IFilmVehiclesEdge {
__typename: \\"FilmVehiclesEdge\\";

/**
 * The item at the end of the edge
 */
node: IVehicle | null;

/**
 * A cursor for use in pagination
 */
cursor: string;
}

/**
 * A connection to a list of items.
 */
  interface IFilmCharactersConnection {
__typename: \\"FilmCharactersConnection\\";

/**
 * Information to aid in pagination.
 */
pageInfo: IPageInfo;

/**
 * A list of edges.
 */
edges: Array<IFilmCharactersEdge | null> | null;

/**
 * A count of the total number of objects in this connection, ignoring pagination.
* This allows a client to fetch the first five objects by passing \\"5\\" as the
* argument to \\"first\\", then fetch the total count so it could display \\"5 of 83\\",
* for example.
 */
totalCount: number | null;

/**
 * A list of all of the objects returned in the connection. This is a convenience
* field provided for quickly exploring the API; rather than querying for
* \\"{ edges { node } }\\" when no edge data is needed, this field can be be used
* instead. Note that when clients like Relay need to fetch the \\"cursor\\" field on
* the edge to enable efficient pagination, this shortcut cannot be used, and the
* full \\"{ edges { node } }\\" version should be used instead.
 */
characters: Array<IPerson | null> | null;
}

/**
 * An edge in a connection.
 */
  interface IFilmCharactersEdge {
__typename: \\"FilmCharactersEdge\\";

/**
 * The item at the end of the edge
 */
node: IPerson | null;

/**
 * A cursor for use in pagination
 */
cursor: string;
}

/**
 * A connection to a list of items.
 */
  interface IFilmPlanetsConnection {
__typename: \\"FilmPlanetsConnection\\";

/**
 * Information to aid in pagination.
 */
pageInfo: IPageInfo;

/**
 * A list of edges.
 */
edges: Array<IFilmPlanetsEdge | null> | null;

/**
 * A count of the total number of objects in this connection, ignoring pagination.
* This allows a client to fetch the first five objects by passing \\"5\\" as the
* argument to \\"first\\", then fetch the total count so it could display \\"5 of 83\\",
* for example.
 */
totalCount: number | null;

/**
 * A list of all of the objects returned in the connection. This is a convenience
* field provided for quickly exploring the API; rather than querying for
* \\"{ edges { node } }\\" when no edge data is needed, this field can be be used
* instead. Note that when clients like Relay need to fetch the \\"cursor\\" field on
* the edge to enable efficient pagination, this shortcut cannot be used, and the
* full \\"{ edges { node } }\\" version should be used instead.
 */
planets: Array<IPlanet | null> | null;
}

/**
 * An edge in a connection.
 */
  interface IFilmPlanetsEdge {
__typename: \\"FilmPlanetsEdge\\";

/**
 * The item at the end of the edge
 */
node: IPlanet | null;

/**
 * A cursor for use in pagination
 */
cursor: string;
}

/**
 * A connection to a list of items.
 */
  interface IPeopleConnection {
__typename: \\"PeopleConnection\\";

/**
 * Information to aid in pagination.
 */
pageInfo: IPageInfo;

/**
 * A list of edges.
 */
edges: Array<IPeopleEdge | null> | null;

/**
 * A count of the total number of objects in this connection, ignoring pagination.
* This allows a client to fetch the first five objects by passing \\"5\\" as the
* argument to \\"first\\", then fetch the total count so it could display \\"5 of 83\\",
* for example.
 */
totalCount: number | null;

/**
 * A list of all of the objects returned in the connection. This is a convenience
* field provided for quickly exploring the API; rather than querying for
* \\"{ edges { node } }\\" when no edge data is needed, this field can be be used
* instead. Note that when clients like Relay need to fetch the \\"cursor\\" field on
* the edge to enable efficient pagination, this shortcut cannot be used, and the
* full \\"{ edges { node } }\\" version should be used instead.
 */
people: Array<IPerson | null> | null;
}

/**
 * An edge in a connection.
 */
  interface IPeopleEdge {
__typename: \\"PeopleEdge\\";

/**
 * The item at the end of the edge
 */
node: IPerson | null;

/**
 * A cursor for use in pagination
 */
cursor: string;
}

/**
 * A connection to a list of items.
 */
  interface IPlanetsConnection {
__typename: \\"PlanetsConnection\\";

/**
 * Information to aid in pagination.
 */
pageInfo: IPageInfo;

/**
 * A list of edges.
 */
edges: Array<IPlanetsEdge | null> | null;

/**
 * A count of the total number of objects in this connection, ignoring pagination.
* This allows a client to fetch the first five objects by passing \\"5\\" as the
* argument to \\"first\\", then fetch the total count so it could display \\"5 of 83\\",
* for example.
 */
totalCount: number | null;

/**
 * A list of all of the objects returned in the connection. This is a convenience
* field provided for quickly exploring the API; rather than querying for
* \\"{ edges { node } }\\" when no edge data is needed, this field can be be used
* instead. Note that when clients like Relay need to fetch the \\"cursor\\" field on
* the edge to enable efficient pagination, this shortcut cannot be used, and the
* full \\"{ edges { node } }\\" version should be used instead.
 */
planets: Array<IPlanet | null> | null;
}

/**
 * An edge in a connection.
 */
  interface IPlanetsEdge {
__typename: \\"PlanetsEdge\\";

/**
 * The item at the end of the edge
 */
node: IPlanet | null;

/**
 * A cursor for use in pagination
 */
cursor: string;
}

/**
 * A connection to a list of items.
 */
  interface ISpeciesConnection {
__typename: \\"SpeciesConnection\\";

/**
 * Information to aid in pagination.
 */
pageInfo: IPageInfo;

/**
 * A list of edges.
 */
edges: Array<ISpeciesEdge | null> | null;

/**
 * A count of the total number of objects in this connection, ignoring pagination.
* This allows a client to fetch the first five objects by passing \\"5\\" as the
* argument to \\"first\\", then fetch the total count so it could display \\"5 of 83\\",
* for example.
 */
totalCount: number | null;

/**
 * A list of all of the objects returned in the connection. This is a convenience
* field provided for quickly exploring the API; rather than querying for
* \\"{ edges { node } }\\" when no edge data is needed, this field can be be used
* instead. Note that when clients like Relay need to fetch the \\"cursor\\" field on
* the edge to enable efficient pagination, this shortcut cannot be used, and the
* full \\"{ edges { node } }\\" version should be used instead.
 */
species: Array<ISpecies | null> | null;
}

/**
 * An edge in a connection.
 */
  interface ISpeciesEdge {
__typename: \\"SpeciesEdge\\";

/**
 * The item at the end of the edge
 */
node: ISpecies | null;

/**
 * A cursor for use in pagination
 */
cursor: string;
}

/**
 * A connection to a list of items.
 */
  interface IStarshipsConnection {
__typename: \\"StarshipsConnection\\";

/**
 * Information to aid in pagination.
 */
pageInfo: IPageInfo;

/**
 * A list of edges.
 */
edges: Array<IStarshipsEdge | null> | null;

/**
 * A count of the total number of objects in this connection, ignoring pagination.
* This allows a client to fetch the first five objects by passing \\"5\\" as the
* argument to \\"first\\", then fetch the total count so it could display \\"5 of 83\\",
* for example.
 */
totalCount: number | null;

/**
 * A list of all of the objects returned in the connection. This is a convenience
* field provided for quickly exploring the API; rather than querying for
* \\"{ edges { node } }\\" when no edge data is needed, this field can be be used
* instead. Note that when clients like Relay need to fetch the \\"cursor\\" field on
* the edge to enable efficient pagination, this shortcut cannot be used, and the
* full \\"{ edges { node } }\\" version should be used instead.
 */
starships: Array<IStarship | null> | null;
}

/**
 * An edge in a connection.
 */
  interface IStarshipsEdge {
__typename: \\"StarshipsEdge\\";

/**
 * The item at the end of the edge
 */
node: IStarship | null;

/**
 * A cursor for use in pagination
 */
cursor: string;
}

/**
 * A connection to a list of items.
 */
  interface IVehiclesConnection {
__typename: \\"VehiclesConnection\\";

/**
 * Information to aid in pagination.
 */
pageInfo: IPageInfo;

/**
 * A list of edges.
 */
edges: Array<IVehiclesEdge | null> | null;

/**
 * A count of the total number of objects in this connection, ignoring pagination.
* This allows a client to fetch the first five objects by passing \\"5\\" as the
* argument to \\"first\\", then fetch the total count so it could display \\"5 of 83\\",
* for example.
 */
totalCount: number | null;

/**
 * A list of all of the objects returned in the connection. This is a convenience
* field provided for quickly exploring the API; rather than querying for
* \\"{ edges { node } }\\" when no edge data is needed, this field can be be used
* instead. Note that when clients like Relay need to fetch the \\"cursor\\" field on
* the edge to enable efficient pagination, this shortcut cannot be used, and the
* full \\"{ edges { node } }\\" version should be used instead.
 */
vehicles: Array<IVehicle | null> | null;
}

/**
 * An edge in a connection.
 */
  interface IVehiclesEdge {
__typename: \\"VehiclesEdge\\";

/**
 * The item at the end of the edge
 */
node: IVehicle | null;

/**
 * A cursor for use in pagination
 */
cursor: string;
}"
`;

exports[`gql2ts mutations supports mutations 1`] = `
"interface IGraphQLResponseRoot {
data?: IQuery | IMutation;
errors?: Array<IGraphQLResponseError>;
}

interface IGraphQLResponseError {
/** Required for all errors */
message: string;
locations?: Array<IGraphQLResponseErrorLocation>;
/** 7.2.2 says 'GraphQL servers may provide additional entries to error' */
[propName: string]: any;
}

interface IGraphQLResponseErrorLocation {
line: number;
column: number;
}

interface IQuery {
__typename: \\"Query\\";
getMessage: IMessage | null;
}

interface IGetMessageOnQueryArguments {
id: string;
}

interface IMessage {
__typename: \\"Message\\";
id: string;
content: string | null;
author: string | null;
}

interface IMutation {
__typename: \\"Mutation\\";
createMessage: IMessage | null;
updateMessage: IMessage | null;
}

interface ICreateMessageOnMutationArguments {
input?: IMessageInput | null;
}

interface IUpdateMessageOnMutationArguments {
id: string;
input?: IMessageInput | null;
}

interface IMessageInput {
content?: string | null;
author?: string | null;
}"
`;

exports[`gql2ts namespace correctly generates namespace 1`] = `
"// tslint:disable
// graphql typescript definitions

declare namespace GQL {
  interface IGraphQLResponseRoot {
    data?: IRoot;
    errors?: Array<IGraphQLResponseError>;
  }

  interface IGraphQLResponseError {
    /** Required for all errors */
    message: string;
    locations?: Array<IGraphQLResponseErrorLocation>;
    /** 7.2.2 says 'GraphQL servers may provide additional entries to error' */
    [propName: string]: any;
  }

  interface IGraphQLResponseErrorLocation {
    line: number;
    column: number;
  }

  interface IRoot {
    __typename: 'Root';
    allFilms: IFilmsConnection | null;
    film: IFilm | null;
    allPeople: IPeopleConnection | null;
    person: IPerson | null;
    allPlanets: IPlanetsConnection | null;
    planet: IPlanet | null;
    allSpecies: ISpeciesConnection | null;
    species: ISpecies | null;
    allStarships: IStarshipsConnection | null;
    starship: IStarship | null;
    allVehicles: IVehiclesConnection | null;
    vehicle: IVehicle | null;

    /**
     * Fetches an object given its ID
     */
    node: Node | null;
  }

  interface IAllFilmsOnRootArguments {
    after?: string | null;
    first?: number | null;
    before?: string | null;
    last?: number | null;
  }

  interface IFilmOnRootArguments {
    id?: string | null;
    filmID?: string | null;
  }

  interface IAllPeopleOnRootArguments {
    after?: string | null;
    first?: number | null;
    before?: string | null;
    last?: number | null;
  }

  interface IPersonOnRootArguments {
    id?: string | null;
    personID?: string | null;
  }

  interface IAllPlanetsOnRootArguments {
    after?: string | null;
    first?: number | null;
    before?: string | null;
    last?: number | null;
  }

  interface IPlanetOnRootArguments {
    id?: string | null;
    planetID?: string | null;
  }

  interface IAllSpeciesOnRootArguments {
    after?: string | null;
    first?: number | null;
    before?: string | null;
    last?: number | null;
  }

  interface ISpeciesOnRootArguments {
    id?: string | null;
    speciesID?: string | null;
  }

  interface IAllStarshipsOnRootArguments {
    after?: string | null;
    first?: number | null;
    before?: string | null;
    last?: number | null;
  }

  interface IStarshipOnRootArguments {
    id?: string | null;
    starshipID?: string | null;
  }

  interface IAllVehiclesOnRootArguments {
    after?: string | null;
    first?: number | null;
    before?: string | null;
    last?: number | null;
  }

  interface IVehicleOnRootArguments {
    id?: string | null;
    vehicleID?: string | null;
  }

  interface INodeOnRootArguments {
    /**
     * The ID of an object
     */
    id: string;
  }

  /**
   * A connection to a list of items.
   */
  interface IFilmsConnection {
    __typename: 'FilmsConnection';

    /**
     * Information to aid in pagination.
     */
    pageInfo: IPageInfo;

    /**
     * A list of edges.
     */
    edges: Array<IFilmsEdge | null> | null;

    /**
     * A count of the total number of objects in this connection, ignoring pagination.
     * This allows a client to fetch the first five objects by passing \\"5\\" as the
     * argument to \\"first\\", then fetch the total count so it could display \\"5 of 83\\",
     * for example.
     */
    totalCount: number | null;

    /**
     * A list of all of the objects returned in the connection. This is a convenience
     * field provided for quickly exploring the API; rather than querying for
     * \\"{ edges { node } }\\" when no edge data is needed, this field can be be used
     * instead. Note that when clients like Relay need to fetch the \\"cursor\\" field on
     * the edge to enable efficient pagination, this shortcut cannot be used, and the
     * full \\"{ edges { node } }\\" version should be used instead.
     */
    films: Array<IFilm | null> | null;
  }

  /**
   * Information about pagination in a connection.
   */
  interface IPageInfo {
    __typename: 'PageInfo';

    /**
     * When paginating forwards, are there more items?
     */
    hasNextPage: boolean;

    /**
     * When paginating backwards, are there more items?
     */
    hasPreviousPage: boolean;

    /**
     * When paginating backwards, the cursor to continue.
     */
    startCursor: string | null;

    /**
     * When paginating forwards, the cursor to continue.
     */
    endCursor: string | null;
  }

  /**
   * An edge in a connection.
   */
  interface IFilmsEdge {
    __typename: 'FilmsEdge';

    /**
     * The item at the end of the edge
     */
    node: IFilm | null;

    /**
     * A cursor for use in pagination
     */
    cursor: string;
  }

  /**
   * A single film.
   */
  interface IFilm {
    __typename: 'Film';

    /**
     * The title of this film.
     */
    title: string | null;

    /**
     * The episode number of this film.
     */
    episodeID: number | null;

    /**
     * The opening paragraphs at the beginning of this film.
     */
    openingCrawl: string | null;

    /**
     * The name of the director of this film.
     */
    director: string | null;

    /**
     * The name(s) of the producer(s) of this film.
     */
    producers: Array<string | null> | null;

    /**
     * The ISO 8601 date format of film release at original creator country.
     */
    releaseDate: string | null;
    speciesConnection: IFilmSpeciesConnection | null;
    starshipConnection: IFilmStarshipsConnection | null;
    vehicleConnection: IFilmVehiclesConnection | null;
    characterConnection: IFilmCharactersConnection | null;
    planetConnection: IFilmPlanetsConnection | null;

    /**
     * The ISO 8601 date format of the time that this resource was created.
     */
    created: string | null;

    /**
     * The ISO 8601 date format of the time that this resource was edited.
     */
    edited: string | null;

    /**
     * The ID of an object
     */
    id: string;
  }

  interface ISpeciesConnectionOnFilmArguments {
    after?: string | null;
    first?: number | null;
    before?: string | null;
    last?: number | null;
  }

  interface IStarshipConnectionOnFilmArguments {
    after?: string | null;
    first?: number | null;
    before?: string | null;
    last?: number | null;
  }

  interface IVehicleConnectionOnFilmArguments {
    after?: string | null;
    first?: number | null;
    before?: string | null;
    last?: number | null;
  }

  interface ICharacterConnectionOnFilmArguments {
    after?: string | null;
    first?: number | null;
    before?: string | null;
    last?: number | null;
  }

  interface IPlanetConnectionOnFilmArguments {
    after?: string | null;
    first?: number | null;
    before?: string | null;
    last?: number | null;
  }

  /**
   * An object with an ID
   */
  type Node = IFilm | ISpecies | IPlanet | IPerson | IStarship | IVehicle;

  /**
   * An object with an ID
   */
  interface INode {
    __typename: 'Node';

    /**
     * The id of the object.
     */
    id: string;
  }

  /**
   * A connection to a list of items.
   */
  interface IFilmSpeciesConnection {
    __typename: 'FilmSpeciesConnection';

    /**
     * Information to aid in pagination.
     */
    pageInfo: IPageInfo;

    /**
     * A list of edges.
     */
    edges: Array<IFilmSpeciesEdge | null> | null;

    /**
     * A count of the total number of objects in this connection, ignoring pagination.
     * This allows a client to fetch the first five objects by passing \\"5\\" as the
     * argument to \\"first\\", then fetch the total count so it could display \\"5 of 83\\",
     * for example.
     */
    totalCount: number | null;

    /**
     * A list of all of the objects returned in the connection. This is a convenience
     * field provided for quickly exploring the API; rather than querying for
     * \\"{ edges { node } }\\" when no edge data is needed, this field can be be used
     * instead. Note that when clients like Relay need to fetch the \\"cursor\\" field on
     * the edge to enable efficient pagination, this shortcut cannot be used, and the
     * full \\"{ edges { node } }\\" version should be used instead.
     */
    species: Array<ISpecies | null> | null;
  }

  /**
   * An edge in a connection.
   */
  interface IFilmSpeciesEdge {
    __typename: 'FilmSpeciesEdge';

    /**
     * The item at the end of the edge
     */
    node: ISpecies | null;

    /**
     * A cursor for use in pagination
     */
    cursor: string;
  }

  /**
   * A type of person or character within the Star Wars Universe.
   */
  interface ISpecies {
    __typename: 'Species';

    /**
     * The name of this species.
     */
    name: string | null;

    /**
     * The classification of this species, such as \\"mammal\\" or \\"reptile\\".
     */
    classification: string | null;

    /**
     * The designation of this species, such as \\"sentient\\".
     */
    designation: string | null;

    /**
     * The average height of this species in centimeters.
     */
    averageHeight: number | null;

    /**
     * The average lifespan of this species in years, null if unknown.
     */
    averageLifespan: number | null;

    /**
     * Common eye colors for this species, null if this species does not typically
     * have eyes.
     */
    eyeColors: Array<string | null> | null;

    /**
     * Common hair colors for this species, null if this species does not typically
     * have hair.
     */
    hairColors: Array<string | null> | null;

    /**
     * Common skin colors for this species, null if this species does not typically
     * have skin.
     */
    skinColors: Array<string | null> | null;

    /**
     * The language commonly spoken by this species.
     */
    language: string | null;

    /**
     * A planet that this species originates from.
     */
    homeworld: IPlanet | null;
    personConnection: ISpeciesPeopleConnection | null;
    filmConnection: ISpeciesFilmsConnection | null;

    /**
     * The ISO 8601 date format of the time that this resource was created.
     */
    created: string | null;

    /**
     * The ISO 8601 date format of the time that this resource was edited.
     */
    edited: string | null;

    /**
     * The ID of an object
     */
    id: string;
  }

  interface IPersonConnectionOnSpeciesArguments {
    after?: string | null;
    first?: number | null;
    before?: string | null;
    last?: number | null;
  }

  interface IFilmConnectionOnSpeciesArguments {
    after?: string | null;
    first?: number | null;
    before?: string | null;
    last?: number | null;
  }

  /**
   * A large mass, planet or planetoid in the Star Wars Universe, at the time of
   * 0 ABY.
   */
  interface IPlanet {
    __typename: 'Planet';

    /**
     * The name of this planet.
     */
    name: string | null;

    /**
     * The diameter of this planet in kilometers.
     */
    diameter: number | null;

    /**
     * The number of standard hours it takes for this planet to complete a single
     * rotation on its axis.
     */
    rotationPeriod: number | null;

    /**
     * The number of standard days it takes for this planet to complete a single orbit
     * of its local star.
     */
    orbitalPeriod: number | null;

    /**
     * A number denoting the gravity of this planet, where \\"1\\" is normal or 1 standard
     * G. \\"2\\" is twice or 2 standard Gs. \\"0.5\\" is half or 0.5 standard Gs.
     */
    gravity: string | null;

    /**
     * The average population of sentient beings inhabiting this planet.
     */
    population: number | null;

    /**
     * The climates of this planet.
     */
    climates: Array<string | null> | null;

    /**
     * The terrains of this planet.
     */
    terrains: Array<string | null> | null;

    /**
     * The percentage of the planet surface that is naturally occuring water or bodies
     * of water.
     */
    surfaceWater: number | null;
    residentConnection: IPlanetResidentsConnection | null;
    filmConnection: IPlanetFilmsConnection | null;

    /**
     * The ISO 8601 date format of the time that this resource was created.
     */
    created: string | null;

    /**
     * The ISO 8601 date format of the time that this resource was edited.
     */
    edited: string | null;

    /**
     * The ID of an object
     */
    id: string;
  }

  interface IResidentConnectionOnPlanetArguments {
    after?: string | null;
    first?: number | null;
    before?: string | null;
    last?: number | null;
  }

  interface IFilmConnectionOnPlanetArguments {
    after?: string | null;
    first?: number | null;
    before?: string | null;
    last?: number | null;
  }

  /**
   * A connection to a list of items.
   */
  interface IPlanetResidentsConnection {
    __typename: 'PlanetResidentsConnection';

    /**
     * Information to aid in pagination.
     */
    pageInfo: IPageInfo;

    /**
     * A list of edges.
     */
    edges: Array<IPlanetResidentsEdge | null> | null;

    /**
     * A count of the total number of objects in this connection, ignoring pagination.
     * This allows a client to fetch the first five objects by passing \\"5\\" as the
     * argument to \\"first\\", then fetch the total count so it could display \\"5 of 83\\",
     * for example.
     */
    totalCount: number | null;

    /**
     * A list of all of the objects returned in the connection. This is a convenience
     * field provided for quickly exploring the API; rather than querying for
     * \\"{ edges { node } }\\" when no edge data is needed, this field can be be used
     * instead. Note that when clients like Relay need to fetch the \\"cursor\\" field on
     * the edge to enable efficient pagination, this shortcut cannot be used, and the
     * full \\"{ edges { node } }\\" version should be used instead.
     */
    residents: Array<IPerson | null> | null;
  }

  /**
   * An edge in a connection.
   */
  interface IPlanetResidentsEdge {
    __typename: 'PlanetResidentsEdge';

    /**
     * The item at the end of the edge
     */
    node: IPerson | null;

    /**
     * A cursor for use in pagination
     */
    cursor: string;
  }

  /**
   * An individual person or character within the Star Wars universe.
   */
  interface IPerson {
    __typename: 'Person';

    /**
     * The name of this person.
     */
    name: string | null;

    /**
     * The birth year of the person, using the in-universe standard of BBY or ABY -
     * Before the Battle of Yavin or After the Battle of Yavin. The Battle of Yavin is
     * a battle that occurs at the end of Star Wars episode IV: A New Hope.
     */
    birthYear: string | null;

    /**
     * The eye color of this person. Will be \\"unknown\\" if not known or \\"n/a\\" if the
     * person does not have an eye.
     */
    eyeColor: string | null;

    /**
     * The gender of this person. Either \\"Male\\", \\"Female\\" or \\"unknown\\",
     * \\"n/a\\" if the person does not have a gender.
     */
    gender: string | null;

    /**
     * The hair color of this person. Will be \\"unknown\\" if not known or \\"n/a\\" if the
     * person does not have hair.
     */
    hairColor: string | null;

    /**
     * The height of the person in centimeters.
     */
    height: number | null;

    /**
     * The mass of the person in kilograms.
     */
    mass: number | null;

    /**
     * The skin color of this person.
     */
    skinColor: string | null;

    /**
     * A planet that this person was born on or inhabits.
     */
    homeworld: IPlanet | null;
    filmConnection: IPersonFilmsConnection | null;

    /**
     * The species that this person belongs to, or null if unknown.
     */
    species: ISpecies | null;
    starshipConnection: IPersonStarshipsConnection | null;
    vehicleConnection: IPersonVehiclesConnection | null;

    /**
     * The ISO 8601 date format of the time that this resource was created.
     */
    created: string | null;

    /**
     * The ISO 8601 date format of the time that this resource was edited.
     */
    edited: string | null;

    /**
     * The ID of an object
     */
    id: string;
  }

  interface IFilmConnectionOnPersonArguments {
    after?: string | null;
    first?: number | null;
    before?: string | null;
    last?: number | null;
  }

  interface IStarshipConnectionOnPersonArguments {
    after?: string | null;
    first?: number | null;
    before?: string | null;
    last?: number | null;
  }

  interface IVehicleConnectionOnPersonArguments {
    after?: string | null;
    first?: number | null;
    before?: string | null;
    last?: number | null;
  }

  /**
   * A connection to a list of items.
   */
  interface IPersonFilmsConnection {
    __typename: 'PersonFilmsConnection';

    /**
     * Information to aid in pagination.
     */
    pageInfo: IPageInfo;

    /**
     * A list of edges.
     */
    edges: Array<IPersonFilmsEdge | null> | null;

    /**
     * A count of the total number of objects in this connection, ignoring pagination.
     * This allows a client to fetch the first five objects by passing \\"5\\" as the
     * argument to \\"first\\", then fetch the total count so it could display \\"5 of 83\\",
     * for example.
     */
    totalCount: number | null;

    /**
     * A list of all of the objects returned in the connection. This is a convenience
     * field provided for quickly exploring the API; rather than querying for
     * \\"{ edges { node } }\\" when no edge data is needed, this field can be be used
     * instead. Note that when clients like Relay need to fetch the \\"cursor\\" field on
     * the edge to enable efficient pagination, this shortcut cannot be used, and the
     * full \\"{ edges { node } }\\" version should be used instead.
     */
    films: Array<IFilm | null> | null;
  }

  /**
   * An edge in a connection.
   */
  interface IPersonFilmsEdge {
    __typename: 'PersonFilmsEdge';

    /**
     * The item at the end of the edge
     */
    node: IFilm | null;

    /**
     * A cursor for use in pagination
     */
    cursor: string;
  }

  /**
   * A connection to a list of items.
   */
  interface IPersonStarshipsConnection {
    __typename: 'PersonStarshipsConnection';

    /**
     * Information to aid in pagination.
     */
    pageInfo: IPageInfo;

    /**
     * A list of edges.
     */
    edges: Array<IPersonStarshipsEdge | null> | null;

    /**
     * A count of the total number of objects in this connection, ignoring pagination.
     * This allows a client to fetch the first five objects by passing \\"5\\" as the
     * argument to \\"first\\", then fetch the total count so it could display \\"5 of 83\\",
     * for example.
     */
    totalCount: number | null;

    /**
     * A list of all of the objects returned in the connection. This is a convenience
     * field provided for quickly exploring the API; rather than querying for
     * \\"{ edges { node } }\\" when no edge data is needed, this field can be be used
     * instead. Note that when clients like Relay need to fetch the \\"cursor\\" field on
     * the edge to enable efficient pagination, this shortcut cannot be used, and the
     * full \\"{ edges { node } }\\" version should be used instead.
     */
    starships: Array<IStarship | null> | null;
  }

  /**
   * An edge in a connection.
   */
  interface IPersonStarshipsEdge {
    __typename: 'PersonStarshipsEdge';

    /**
     * The item at the end of the edge
     */
    node: IStarship | null;

    /**
     * A cursor for use in pagination
     */
    cursor: string;
  }

  /**
   * A single transport craft that has hyperdrive capability.
   */
  interface IStarship {
    __typename: 'Starship';

    /**
     * The name of this starship. The common name, such as \\"Death Star\\".
     */
    name: string | null;

    /**
     * The model or official name of this starship. Such as \\"T-65 X-wing\\" or \\"DS-1
     * Orbital Battle Station\\".
     */
    model: string | null;

    /**
     * The class of this starship, such as \\"Starfighter\\" or \\"Deep Space Mobile
     * Battlestation\\"
     */
    starshipClass: string | null;

    /**
     * The manufacturers of this starship.
     */
    manufacturers: Array<string | null> | null;

    /**
     * The cost of this starship new, in galactic credits.
     */
    costInCredits: number | null;

    /**
     * The length of this starship in meters.
     */
    length: number | null;

    /**
     * The number of personnel needed to run or pilot this starship.
     */
    crew: string | null;

    /**
     * The number of non-essential people this starship can transport.
     */
    passengers: string | null;

    /**
     * The maximum speed of this starship in atmosphere. null if this starship is
     * incapable of atmosphering flight.
     */
    maxAtmospheringSpeed: number | null;

    /**
     * The class of this starships hyperdrive.
     */
    hyperdriveRating: number | null;

    /**
     * The Maximum number of Megalights this starship can travel in a standard hour.
     * A \\"Megalight\\" is a standard unit of distance and has never been defined before
     * within the Star Wars universe. This figure is only really useful for measuring
     * the difference in speed of starships. We can assume it is similar to AU, the
     * distance between our Sun (Sol) and Earth.
     */
    MGLT: number | null;

    /**
     * The maximum number of kilograms that this starship can transport.
     */
    cargoCapacity: number | null;

    /**
     * The maximum length of time that this starship can provide consumables for its
     * entire crew without having to resupply.
     */
    consumables: string | null;
    pilotConnection: IStarshipPilotsConnection | null;
    filmConnection: IStarshipFilmsConnection | null;

    /**
     * The ISO 8601 date format of the time that this resource was created.
     */
    created: string | null;

    /**
     * The ISO 8601 date format of the time that this resource was edited.
     */
    edited: string | null;

    /**
     * The ID of an object
     */
    id: string;
  }

  interface IPilotConnectionOnStarshipArguments {
    after?: string | null;
    first?: number | null;
    before?: string | null;
    last?: number | null;
  }

  interface IFilmConnectionOnStarshipArguments {
    after?: string | null;
    first?: number | null;
    before?: string | null;
    last?: number | null;
  }

  /**
   * A connection to a list of items.
   */
  interface IStarshipPilotsConnection {
    __typename: 'StarshipPilotsConnection';

    /**
     * Information to aid in pagination.
     */
    pageInfo: IPageInfo;

    /**
     * A list of edges.
     */
    edges: Array<IStarshipPilotsEdge | null> | null;

    /**
     * A count of the total number of objects in this connection, ignoring pagination.
     * This allows a client to fetch the first five objects by passing \\"5\\" as the
     * argument to \\"first\\", then fetch the total count so it could display \\"5 of 83\\",
     * for example.
     */
    totalCount: number | null;

    /**
     * A list of all of the objects returned in the connection. This is a convenience
     * field provided for quickly exploring the API; rather than querying for
     * \\"{ edges { node } }\\" when no edge data is needed, this field can be be used
     * instead. Note that when clients like Relay need to fetch the \\"cursor\\" field on
     * the edge to enable efficient pagination, this shortcut cannot be used, and the
     * full \\"{ edges { node } }\\" version should be used instead.
     */
    pilots: Array<IPerson | null> | null;
  }

  /**
   * An edge in a connection.
   */
  interface IStarshipPilotsEdge {
    __typename: 'StarshipPilotsEdge';

    /**
     * The item at the end of the edge
     */
    node: IPerson | null;

    /**
     * A cursor for use in pagination
     */
    cursor: string;
  }

  /**
   * A connection to a list of items.
   */
  interface IStarshipFilmsConnection {
    __typename: 'StarshipFilmsConnection';

    /**
     * Information to aid in pagination.
     */
    pageInfo: IPageInfo;

    /**
     * A list of edges.
     */
    edges: Array<IStarshipFilmsEdge | null> | null;

    /**
     * A count of the total number of objects in this connection, ignoring pagination.
     * This allows a client to fetch the first five objects by passing \\"5\\" as the
     * argument to \\"first\\", then fetch the total count so it could display \\"5 of 83\\",
     * for example.
     */
    totalCount: number | null;

    /**
     * A list of all of the objects returned in the connection. This is a convenience
     * field provided for quickly exploring the API; rather than querying for
     * \\"{ edges { node } }\\" when no edge data is needed, this field can be be used
     * instead. Note that when clients like Relay need to fetch the \\"cursor\\" field on
     * the edge to enable efficient pagination, this shortcut cannot be used, and the
     * full \\"{ edges { node } }\\" version should be used instead.
     */
    films: Array<IFilm | null> | null;
  }

  /**
   * An edge in a connection.
   */
  interface IStarshipFilmsEdge {
    __typename: 'StarshipFilmsEdge';

    /**
     * The item at the end of the edge
     */
    node: IFilm | null;

    /**
     * A cursor for use in pagination
     */
    cursor: string;
  }

  /**
   * A connection to a list of items.
   */
  interface IPersonVehiclesConnection {
    __typename: 'PersonVehiclesConnection';

    /**
     * Information to aid in pagination.
     */
    pageInfo: IPageInfo;

    /**
     * A list of edges.
     */
    edges: Array<IPersonVehiclesEdge | null> | null;

    /**
     * A count of the total number of objects in this connection, ignoring pagination.
     * This allows a client to fetch the first five objects by passing \\"5\\" as the
     * argument to \\"first\\", then fetch the total count so it could display \\"5 of 83\\",
     * for example.
     */
    totalCount: number | null;

    /**
     * A list of all of the objects returned in the connection. This is a convenience
     * field provided for quickly exploring the API; rather than querying for
     * \\"{ edges { node } }\\" when no edge data is needed, this field can be be used
     * instead. Note that when clients like Relay need to fetch the \\"cursor\\" field on
     * the edge to enable efficient pagination, this shortcut cannot be used, and the
     * full \\"{ edges { node } }\\" version should be used instead.
     */
    vehicles: Array<IVehicle | null> | null;
  }

  /**
   * An edge in a connection.
   */
  interface IPersonVehiclesEdge {
    __typename: 'PersonVehiclesEdge';

    /**
     * The item at the end of the edge
     */
    node: IVehicle | null;

    /**
     * A cursor for use in pagination
     */
    cursor: string;
  }

  /**
   * A single transport craft that does not have hyperdrive capability
   */
  interface IVehicle {
    __typename: 'Vehicle';

    /**
     * The name of this vehicle. The common name, such as \\"Sand Crawler\\" or \\"Speeder
     * bike\\".
     */
    name: string | null;

    /**
     * The model or official name of this vehicle. Such as \\"All-Terrain Attack
     * Transport\\".
     */
    model: string | null;

    /**
     * The class of this vehicle, such as \\"Wheeled\\" or \\"Repulsorcraft\\".
     */
    vehicleClass: string | null;

    /**
     * The manufacturers of this vehicle.
     */
    manufacturers: Array<string | null> | null;

    /**
     * The cost of this vehicle new, in Galactic Credits.
     */
    costInCredits: number | null;

    /**
     * The length of this vehicle in meters.
     */
    length: number | null;

    /**
     * The number of personnel needed to run or pilot this vehicle.
     */
    crew: string | null;

    /**
     * The number of non-essential people this vehicle can transport.
     */
    passengers: string | null;

    /**
     * The maximum speed of this vehicle in atmosphere.
     */
    maxAtmospheringSpeed: number | null;

    /**
     * The maximum number of kilograms that this vehicle can transport.
     */
    cargoCapacity: number | null;

    /**
     * The maximum length of time that this vehicle can provide consumables for its
     * entire crew without having to resupply.
     */
    consumables: string | null;
    pilotConnection: IVehiclePilotsConnection | null;
    filmConnection: IVehicleFilmsConnection | null;

    /**
     * The ISO 8601 date format of the time that this resource was created.
     */
    created: string | null;

    /**
     * The ISO 8601 date format of the time that this resource was edited.
     */
    edited: string | null;

    /**
     * The ID of an object
     */
    id: string;
  }

  interface IPilotConnectionOnVehicleArguments {
    after?: string | null;
    first?: number | null;
    before?: string | null;
    last?: number | null;
  }

  interface IFilmConnectionOnVehicleArguments {
    after?: string | null;
    first?: number | null;
    before?: string | null;
    last?: number | null;
  }

  /**
   * A connection to a list of items.
   */
  interface IVehiclePilotsConnection {
    __typename: 'VehiclePilotsConnection';

    /**
     * Information to aid in pagination.
     */
    pageInfo: IPageInfo;

    /**
     * A list of edges.
     */
    edges: Array<IVehiclePilotsEdge | null> | null;

    /**
     * A count of the total number of objects in this connection, ignoring pagination.
     * This allows a client to fetch the first five objects by passing \\"5\\" as the
     * argument to \\"first\\", then fetch the total count so it could display \\"5 of 83\\",
     * for example.
     */
    totalCount: number | null;

    /**
     * A list of all of the objects returned in the connection. This is a convenience
     * field provided for quickly exploring the API; rather than querying for
     * \\"{ edges { node } }\\" when no edge data is needed, this field can be be used
     * instead. Note that when clients like Relay need to fetch the \\"cursor\\" field on
     * the edge to enable efficient pagination, this shortcut cannot be used, and the
     * full \\"{ edges { node } }\\" version should be used instead.
     */
    pilots: Array<IPerson | null> | null;
  }

  /**
   * An edge in a connection.
   */
  interface IVehiclePilotsEdge {
    __typename: 'VehiclePilotsEdge';

    /**
     * The item at the end of the edge
     */
    node: IPerson | null;

    /**
     * A cursor for use in pagination
     */
    cursor: string;
  }

  /**
   * A connection to a list of items.
   */
  interface IVehicleFilmsConnection {
    __typename: 'VehicleFilmsConnection';

    /**
     * Information to aid in pagination.
     */
    pageInfo: IPageInfo;

    /**
     * A list of edges.
     */
    edges: Array<IVehicleFilmsEdge | null> | null;

    /**
     * A count of the total number of objects in this connection, ignoring pagination.
     * This allows a client to fetch the first five objects by passing \\"5\\" as the
     * argument to \\"first\\", then fetch the total count so it could display \\"5 of 83\\",
     * for example.
     */
    totalCount: number | null;

    /**
     * A list of all of the objects returned in the connection. This is a convenience
     * field provided for quickly exploring the API; rather than querying for
     * \\"{ edges { node } }\\" when no edge data is needed, this field can be be used
     * instead. Note that when clients like Relay need to fetch the \\"cursor\\" field on
     * the edge to enable efficient pagination, this shortcut cannot be used, and the
     * full \\"{ edges { node } }\\" version should be used instead.
     */
    films: Array<IFilm | null> | null;
  }

  /**
   * An edge in a connection.
   */
  interface IVehicleFilmsEdge {
    __typename: 'VehicleFilmsEdge';

    /**
     * The item at the end of the edge
     */
    node: IFilm | null;

    /**
     * A cursor for use in pagination
     */
    cursor: string;
  }

  /**
   * A connection to a list of items.
   */
  interface IPlanetFilmsConnection {
    __typename: 'PlanetFilmsConnection';

    /**
     * Information to aid in pagination.
     */
    pageInfo: IPageInfo;

    /**
     * A list of edges.
     */
    edges: Array<IPlanetFilmsEdge | null> | null;

    /**
     * A count of the total number of objects in this connection, ignoring pagination.
     * This allows a client to fetch the first five objects by passing \\"5\\" as the
     * argument to \\"first\\", then fetch the total count so it could display \\"5 of 83\\",
     * for example.
     */
    totalCount: number | null;

    /**
     * A list of all of the objects returned in the connection. This is a convenience
     * field provided for quickly exploring the API; rather than querying for
     * \\"{ edges { node } }\\" when no edge data is needed, this field can be be used
     * instead. Note that when clients like Relay need to fetch the \\"cursor\\" field on
     * the edge to enable efficient pagination, this shortcut cannot be used, and the
     * full \\"{ edges { node } }\\" version should be used instead.
     */
    films: Array<IFilm | null> | null;
  }

  /**
   * An edge in a connection.
   */
  interface IPlanetFilmsEdge {
    __typename: 'PlanetFilmsEdge';

    /**
     * The item at the end of the edge
     */
    node: IFilm | null;

    /**
     * A cursor for use in pagination
     */
    cursor: string;
  }

  /**
   * A connection to a list of items.
   */
  interface ISpeciesPeopleConnection {
    __typename: 'SpeciesPeopleConnection';

    /**
     * Information to aid in pagination.
     */
    pageInfo: IPageInfo;

    /**
     * A list of edges.
     */
    edges: Array<ISpeciesPeopleEdge | null> | null;

    /**
     * A count of the total number of objects in this connection, ignoring pagination.
     * This allows a client to fetch the first five objects by passing \\"5\\" as the
     * argument to \\"first\\", then fetch the total count so it could display \\"5 of 83\\",
     * for example.
     */
    totalCount: number | null;

    /**
     * A list of all of the objects returned in the connection. This is a convenience
     * field provided for quickly exploring the API; rather than querying for
     * \\"{ edges { node } }\\" when no edge data is needed, this field can be be used
     * instead. Note that when clients like Relay need to fetch the \\"cursor\\" field on
     * the edge to enable efficient pagination, this shortcut cannot be used, and the
     * full \\"{ edges { node } }\\" version should be used instead.
     */
    people: Array<IPerson | null> | null;
  }

  /**
   * An edge in a connection.
   */
  interface ISpeciesPeopleEdge {
    __typename: 'SpeciesPeopleEdge';

    /**
     * The item at the end of the edge
     */
    node: IPerson | null;

    /**
     * A cursor for use in pagination
     */
    cursor: string;
  }

  /**
   * A connection to a list of items.
   */
  interface ISpeciesFilmsConnection {
    __typename: 'SpeciesFilmsConnection';

    /**
     * Information to aid in pagination.
     */
    pageInfo: IPageInfo;

    /**
     * A list of edges.
     */
    edges: Array<ISpeciesFilmsEdge | null> | null;

    /**
     * A count of the total number of objects in this connection, ignoring pagination.
     * This allows a client to fetch the first five objects by passing \\"5\\" as the
     * argument to \\"first\\", then fetch the total count so it could display \\"5 of 83\\",
     * for example.
     */
    totalCount: number | null;

    /**
     * A list of all of the objects returned in the connection. This is a convenience
     * field provided for quickly exploring the API; rather than querying for
     * \\"{ edges { node } }\\" when no edge data is needed, this field can be be used
     * instead. Note that when clients like Relay need to fetch the \\"cursor\\" field on
     * the edge to enable efficient pagination, this shortcut cannot be used, and the
     * full \\"{ edges { node } }\\" version should be used instead.
     */
    films: Array<IFilm | null> | null;
  }

  /**
   * An edge in a connection.
   */
  interface ISpeciesFilmsEdge {
    __typename: 'SpeciesFilmsEdge';

    /**
     * The item at the end of the edge
     */
    node: IFilm | null;

    /**
     * A cursor for use in pagination
     */
    cursor: string;
  }

  /**
   * A connection to a list of items.
   */
  interface IFilmStarshipsConnection {
    __typename: 'FilmStarshipsConnection';

    /**
     * Information to aid in pagination.
     */
    pageInfo: IPageInfo;

    /**
     * A list of edges.
     */
    edges: Array<IFilmStarshipsEdge | null> | null;

    /**
     * A count of the total number of objects in this connection, ignoring pagination.
     * This allows a client to fetch the first five objects by passing \\"5\\" as the
     * argument to \\"first\\", then fetch the total count so it could display \\"5 of 83\\",
     * for example.
     */
    totalCount: number | null;

    /**
     * A list of all of the objects returned in the connection. This is a convenience
     * field provided for quickly exploring the API; rather than querying for
     * \\"{ edges { node } }\\" when no edge data is needed, this field can be be used
     * instead. Note that when clients like Relay need to fetch the \\"cursor\\" field on
     * the edge to enable efficient pagination, this shortcut cannot be used, and the
     * full \\"{ edges { node } }\\" version should be used instead.
     */
    starships: Array<IStarship | null> | null;
  }

  /**
   * An edge in a connection.
   */
  interface IFilmStarshipsEdge {
    __typename: 'FilmStarshipsEdge';

    /**
     * The item at the end of the edge
     */
    node: IStarship | null;

    /**
     * A cursor for use in pagination
     */
    cursor: string;
  }

  /**
   * A connection to a list of items.
   */
  interface IFilmVehiclesConnection {
    __typename: 'FilmVehiclesConnection';

    /**
     * Information to aid in pagination.
     */
    pageInfo: IPageInfo;

    /**
     * A list of edges.
     */
    edges: Array<IFilmVehiclesEdge | null> | null;

    /**
     * A count of the total number of objects in this connection, ignoring pagination.
     * This allows a client to fetch the first five objects by passing \\"5\\" as the
     * argument to \\"first\\", then fetch the total count so it could display \\"5 of 83\\",
     * for example.
     */
    totalCount: number | null;

    /**
     * A list of all of the objects returned in the connection. This is a convenience
     * field provided for quickly exploring the API; rather than querying for
     * \\"{ edges { node } }\\" when no edge data is needed, this field can be be used
     * instead. Note that when clients like Relay need to fetch the \\"cursor\\" field on
     * the edge to enable efficient pagination, this shortcut cannot be used, and the
     * full \\"{ edges { node } }\\" version should be used instead.
     */
    vehicles: Array<IVehicle | null> | null;
  }

  /**
   * An edge in a connection.
   */
  interface IFilmVehiclesEdge {
    __typename: 'FilmVehiclesEdge';

    /**
     * The item at the end of the edge
     */
    node: IVehicle | null;

    /**
     * A cursor for use in pagination
     */
    cursor: string;
  }

  /**
   * A connection to a list of items.
   */
  interface IFilmCharactersConnection {
    __typename: 'FilmCharactersConnection';

    /**
     * Information to aid in pagination.
     */
    pageInfo: IPageInfo;

    /**
     * A list of edges.
     */
    edges: Array<IFilmCharactersEdge | null> | null;

    /**
     * A count of the total number of objects in this connection, ignoring pagination.
     * This allows a client to fetch the first five objects by passing \\"5\\" as the
     * argument to \\"first\\", then fetch the total count so it could display \\"5 of 83\\",
     * for example.
     */
    totalCount: number | null;

    /**
     * A list of all of the objects returned in the connection. This is a convenience
     * field provided for quickly exploring the API; rather than querying for
     * \\"{ edges { node } }\\" when no edge data is needed, this field can be be used
     * instead. Note that when clients like Relay need to fetch the \\"cursor\\" field on
     * the edge to enable efficient pagination, this shortcut cannot be used, and the
     * full \\"{ edges { node } }\\" version should be used instead.
     */
    characters: Array<IPerson | null> | null;
  }

  /**
   * An edge in a connection.
   */
  interface IFilmCharactersEdge {
    __typename: 'FilmCharactersEdge';

    /**
     * The item at the end of the edge
     */
    node: IPerson | null;

    /**
     * A cursor for use in pagination
     */
    cursor: string;
  }

  /**
   * A connection to a list of items.
   */
  interface IFilmPlanetsConnection {
    __typename: 'FilmPlanetsConnection';

    /**
     * Information to aid in pagination.
     */
    pageInfo: IPageInfo;

    /**
     * A list of edges.
     */
    edges: Array<IFilmPlanetsEdge | null> | null;

    /**
     * A count of the total number of objects in this connection, ignoring pagination.
     * This allows a client to fetch the first five objects by passing \\"5\\" as the
     * argument to \\"first\\", then fetch the total count so it could display \\"5 of 83\\",
     * for example.
     */
    totalCount: number | null;

    /**
     * A list of all of the objects returned in the connection. This is a convenience
     * field provided for quickly exploring the API; rather than querying for
     * \\"{ edges { node } }\\" when no edge data is needed, this field can be be used
     * instead. Note that when clients like Relay need to fetch the \\"cursor\\" field on
     * the edge to enable efficient pagination, this shortcut cannot be used, and the
     * full \\"{ edges { node } }\\" version should be used instead.
     */
    planets: Array<IPlanet | null> | null;
  }

  /**
   * An edge in a connection.
   */
  interface IFilmPlanetsEdge {
    __typename: 'FilmPlanetsEdge';

    /**
     * The item at the end of the edge
     */
    node: IPlanet | null;

    /**
     * A cursor for use in pagination
     */
    cursor: string;
  }

  /**
   * A connection to a list of items.
   */
  interface IPeopleConnection {
    __typename: 'PeopleConnection';

    /**
     * Information to aid in pagination.
     */
    pageInfo: IPageInfo;

    /**
     * A list of edges.
     */
    edges: Array<IPeopleEdge | null> | null;

    /**
     * A count of the total number of objects in this connection, ignoring pagination.
     * This allows a client to fetch the first five objects by passing \\"5\\" as the
     * argument to \\"first\\", then fetch the total count so it could display \\"5 of 83\\",
     * for example.
     */
    totalCount: number | null;

    /**
     * A list of all of the objects returned in the connection. This is a convenience
     * field provided for quickly exploring the API; rather than querying for
     * \\"{ edges { node } }\\" when no edge data is needed, this field can be be used
     * instead. Note that when clients like Relay need to fetch the \\"cursor\\" field on
     * the edge to enable efficient pagination, this shortcut cannot be used, and the
     * full \\"{ edges { node } }\\" version should be used instead.
     */
    people: Array<IPerson | null> | null;
  }

  /**
   * An edge in a connection.
   */
  interface IPeopleEdge {
    __typename: 'PeopleEdge';

    /**
     * The item at the end of the edge
     */
    node: IPerson | null;

    /**
     * A cursor for use in pagination
     */
    cursor: string;
  }

  /**
   * A connection to a list of items.
   */
  interface IPlanetsConnection {
    __typename: 'PlanetsConnection';

    /**
     * Information to aid in pagination.
     */
    pageInfo: IPageInfo;

    /**
     * A list of edges.
     */
    edges: Array<IPlanetsEdge | null> | null;

    /**
     * A count of the total number of objects in this connection, ignoring pagination.
     * This allows a client to fetch the first five objects by passing \\"5\\" as the
     * argument to \\"first\\", then fetch the total count so it could display \\"5 of 83\\",
     * for example.
     */
    totalCount: number | null;

    /**
     * A list of all of the objects returned in the connection. This is a convenience
     * field provided for quickly exploring the API; rather than querying for
     * \\"{ edges { node } }\\" when no edge data is needed, this field can be be used
     * instead. Note that when clients like Relay need to fetch the \\"cursor\\" field on
     * the edge to enable efficient pagination, this shortcut cannot be used, and the
     * full \\"{ edges { node } }\\" version should be used instead.
     */
    planets: Array<IPlanet | null> | null;
  }

  /**
   * An edge in a connection.
   */
  interface IPlanetsEdge {
    __typename: 'PlanetsEdge';

    /**
     * The item at the end of the edge
     */
    node: IPlanet | null;

    /**
     * A cursor for use in pagination
     */
    cursor: string;
  }

  /**
   * A connection to a list of items.
   */
  interface ISpeciesConnection {
    __typename: 'SpeciesConnection';

    /**
     * Information to aid in pagination.
     */
    pageInfo: IPageInfo;

    /**
     * A list of edges.
     */
    edges: Array<ISpeciesEdge | null> | null;

    /**
     * A count of the total number of objects in this connection, ignoring pagination.
     * This allows a client to fetch the first five objects by passing \\"5\\" as the
     * argument to \\"first\\", then fetch the total count so it could display \\"5 of 83\\",
     * for example.
     */
    totalCount: number | null;

    /**
     * A list of all of the objects returned in the connection. This is a convenience
     * field provided for quickly exploring the API; rather than querying for
     * \\"{ edges { node } }\\" when no edge data is needed, this field can be be used
     * instead. Note that when clients like Relay need to fetch the \\"cursor\\" field on
     * the edge to enable efficient pagination, this shortcut cannot be used, and the
     * full \\"{ edges { node } }\\" version should be used instead.
     */
    species: Array<ISpecies | null> | null;
  }

  /**
   * An edge in a connection.
   */
  interface ISpeciesEdge {
    __typename: 'SpeciesEdge';

    /**
     * The item at the end of the edge
     */
    node: ISpecies | null;

    /**
     * A cursor for use in pagination
     */
    cursor: string;
  }

  /**
   * A connection to a list of items.
   */
  interface IStarshipsConnection {
    __typename: 'StarshipsConnection';

    /**
     * Information to aid in pagination.
     */
    pageInfo: IPageInfo;

    /**
     * A list of edges.
     */
    edges: Array<IStarshipsEdge | null> | null;

    /**
     * A count of the total number of objects in this connection, ignoring pagination.
     * This allows a client to fetch the first five objects by passing \\"5\\" as the
     * argument to \\"first\\", then fetch the total count so it could display \\"5 of 83\\",
     * for example.
     */
    totalCount: number | null;

    /**
     * A list of all of the objects returned in the connection. This is a convenience
     * field provided for quickly exploring the API; rather than querying for
     * \\"{ edges { node } }\\" when no edge data is needed, this field can be be used
     * instead. Note that when clients like Relay need to fetch the \\"cursor\\" field on
     * the edge to enable efficient pagination, this shortcut cannot be used, and the
     * full \\"{ edges { node } }\\" version should be used instead.
     */
    starships: Array<IStarship | null> | null;
  }

  /**
   * An edge in a connection.
   */
  interface IStarshipsEdge {
    __typename: 'StarshipsEdge';

    /**
     * The item at the end of the edge
     */
    node: IStarship | null;

    /**
     * A cursor for use in pagination
     */
    cursor: string;
  }

  /**
   * A connection to a list of items.
   */
  interface IVehiclesConnection {
    __typename: 'VehiclesConnection';

    /**
     * Information to aid in pagination.
     */
    pageInfo: IPageInfo;

    /**
     * A list of edges.
     */
    edges: Array<IVehiclesEdge | null> | null;

    /**
     * A count of the total number of objects in this connection, ignoring pagination.
     * This allows a client to fetch the first five objects by passing \\"5\\" as the
     * argument to \\"first\\", then fetch the total count so it could display \\"5 of 83\\",
     * for example.
     */
    totalCount: number | null;

    /**
     * A list of all of the objects returned in the connection. This is a convenience
     * field provided for quickly exploring the API; rather than querying for
     * \\"{ edges { node } }\\" when no edge data is needed, this field can be be used
     * instead. Note that when clients like Relay need to fetch the \\"cursor\\" field on
     * the edge to enable efficient pagination, this shortcut cannot be used, and the
     * full \\"{ edges { node } }\\" version should be used instead.
     */
    vehicles: Array<IVehicle | null> | null;
  }

  /**
   * An edge in a connection.
   */
  interface IVehiclesEdge {
    __typename: 'VehiclesEdge';

    /**
     * The item at the end of the edge
     */
    node: IVehicle | null;

    /**
     * A cursor for use in pagination
     */
    cursor: string;
  }
}

// tslint:enable
"
`;

exports[`gql2ts namespace correctly translates enums 1`] = `
"// tslint:disable
// graphql typescript definitions

declare namespace GQL {
  interface IGraphQLResponseRoot {
    data?: IQuery;
    errors?: Array<IGraphQLResponseError>;
  }

  interface IGraphQLResponseError {
    /** Required for all errors */
    message: string;
    locations?: Array<IGraphQLResponseErrorLocation>;
    /** 7.2.2 says 'GraphQL servers may provide additional entries to error' */
    [propName: string]: any;
  }

  interface IGraphQLResponseErrorLocation {
    line: number;
    column: number;
  }

  interface IQuery {
    __typename: 'Query';
    colorEnum: Color | null;
  }

  const enum Color {
    RED = 'RED',
    GREEN = 'GREEN',
    BLUE = 'BLUE'
  }
}

// tslint:enable
"
`;

exports[`gql2ts namespace correctly uses a custom namespace 1`] = `
"// tslint:disable
// graphql typescript definitions

declare namespace StarWars {
  interface IGraphQLResponseRoot {
    data?: IRoot;
    errors?: Array<IGraphQLResponseError>;
  }

  interface IGraphQLResponseError {
    /** Required for all errors */
    message: string;
    locations?: Array<IGraphQLResponseErrorLocation>;
    /** 7.2.2 says 'GraphQL servers may provide additional entries to error' */
    [propName: string]: any;
  }

  interface IGraphQLResponseErrorLocation {
    line: number;
    column: number;
  }

  interface IRoot {
    __typename: 'Root';
    allFilms: IFilmsConnection | null;
    film: IFilm | null;
    allPeople: IPeopleConnection | null;
    person: IPerson | null;
    allPlanets: IPlanetsConnection | null;
    planet: IPlanet | null;
    allSpecies: ISpeciesConnection | null;
    species: ISpecies | null;
    allStarships: IStarshipsConnection | null;
    starship: IStarship | null;
    allVehicles: IVehiclesConnection | null;
    vehicle: IVehicle | null;

    /**
     * Fetches an object given its ID
     */
    node: Node | null;
  }

  interface IAllFilmsOnRootArguments {
    after?: string | null;
    first?: number | null;
    before?: string | null;
    last?: number | null;
  }

  interface IFilmOnRootArguments {
    id?: string | null;
    filmID?: string | null;
  }

  interface IAllPeopleOnRootArguments {
    after?: string | null;
    first?: number | null;
    before?: string | null;
    last?: number | null;
  }

  interface IPersonOnRootArguments {
    id?: string | null;
    personID?: string | null;
  }

  interface IAllPlanetsOnRootArguments {
    after?: string | null;
    first?: number | null;
    before?: string | null;
    last?: number | null;
  }

  interface IPlanetOnRootArguments {
    id?: string | null;
    planetID?: string | null;
  }

  interface IAllSpeciesOnRootArguments {
    after?: string | null;
    first?: number | null;
    before?: string | null;
    last?: number | null;
  }

  interface ISpeciesOnRootArguments {
    id?: string | null;
    speciesID?: string | null;
  }

  interface IAllStarshipsOnRootArguments {
    after?: string | null;
    first?: number | null;
    before?: string | null;
    last?: number | null;
  }

  interface IStarshipOnRootArguments {
    id?: string | null;
    starshipID?: string | null;
  }

  interface IAllVehiclesOnRootArguments {
    after?: string | null;
    first?: number | null;
    before?: string | null;
    last?: number | null;
  }

  interface IVehicleOnRootArguments {
    id?: string | null;
    vehicleID?: string | null;
  }

  interface INodeOnRootArguments {
    /**
     * The ID of an object
     */
    id: string;
  }

  /**
   * A connection to a list of items.
   */
  interface IFilmsConnection {
    __typename: 'FilmsConnection';

    /**
     * Information to aid in pagination.
     */
    pageInfo: IPageInfo;

    /**
     * A list of edges.
     */
    edges: Array<IFilmsEdge | null> | null;

    /**
     * A count of the total number of objects in this connection, ignoring pagination.
     * This allows a client to fetch the first five objects by passing \\"5\\" as the
     * argument to \\"first\\", then fetch the total count so it could display \\"5 of 83\\",
     * for example.
     */
    totalCount: number | null;

    /**
     * A list of all of the objects returned in the connection. This is a convenience
     * field provided for quickly exploring the API; rather than querying for
     * \\"{ edges { node } }\\" when no edge data is needed, this field can be be used
     * instead. Note that when clients like Relay need to fetch the \\"cursor\\" field on
     * the edge to enable efficient pagination, this shortcut cannot be used, and the
     * full \\"{ edges { node } }\\" version should be used instead.
     */
    films: Array<IFilm | null> | null;
  }

  /**
   * Information about pagination in a connection.
   */
  interface IPageInfo {
    __typename: 'PageInfo';

    /**
     * When paginating forwards, are there more items?
     */
    hasNextPage: boolean;

    /**
     * When paginating backwards, are there more items?
     */
    hasPreviousPage: boolean;

    /**
     * When paginating backwards, the cursor to continue.
     */
    startCursor: string | null;

    /**
     * When paginating forwards, the cursor to continue.
     */
    endCursor: string | null;
  }

  /**
   * An edge in a connection.
   */
  interface IFilmsEdge {
    __typename: 'FilmsEdge';

    /**
     * The item at the end of the edge
     */
    node: IFilm | null;

    /**
     * A cursor for use in pagination
     */
    cursor: string;
  }

  /**
   * A single film.
   */
  interface IFilm {
    __typename: 'Film';

    /**
     * The title of this film.
     */
    title: string | null;

    /**
     * The episode number of this film.
     */
    episodeID: number | null;

    /**
     * The opening paragraphs at the beginning of this film.
     */
    openingCrawl: string | null;

    /**
     * The name of the director of this film.
     */
    director: string | null;

    /**
     * The name(s) of the producer(s) of this film.
     */
    producers: Array<string | null> | null;

    /**
     * The ISO 8601 date format of film release at original creator country.
     */
    releaseDate: string | null;
    speciesConnection: IFilmSpeciesConnection | null;
    starshipConnection: IFilmStarshipsConnection | null;
    vehicleConnection: IFilmVehiclesConnection | null;
    characterConnection: IFilmCharactersConnection | null;
    planetConnection: IFilmPlanetsConnection | null;

    /**
     * The ISO 8601 date format of the time that this resource was created.
     */
    created: string | null;

    /**
     * The ISO 8601 date format of the time that this resource was edited.
     */
    edited: string | null;

    /**
     * The ID of an object
     */
    id: string;
  }

  interface ISpeciesConnectionOnFilmArguments {
    after?: string | null;
    first?: number | null;
    before?: string | null;
    last?: number | null;
  }

  interface IStarshipConnectionOnFilmArguments {
    after?: string | null;
    first?: number | null;
    before?: string | null;
    last?: number | null;
  }

  interface IVehicleConnectionOnFilmArguments {
    after?: string | null;
    first?: number | null;
    before?: string | null;
    last?: number | null;
  }

  interface ICharacterConnectionOnFilmArguments {
    after?: string | null;
    first?: number | null;
    before?: string | null;
    last?: number | null;
  }

  interface IPlanetConnectionOnFilmArguments {
    after?: string | null;
    first?: number | null;
    before?: string | null;
    last?: number | null;
  }

  /**
   * An object with an ID
   */
  type Node = IFilm | ISpecies | IPlanet | IPerson | IStarship | IVehicle;

  /**
   * An object with an ID
   */
  interface INode {
    __typename: 'Node';

    /**
     * The id of the object.
     */
    id: string;
  }

  /**
   * A connection to a list of items.
   */
  interface IFilmSpeciesConnection {
    __typename: 'FilmSpeciesConnection';

    /**
     * Information to aid in pagination.
     */
    pageInfo: IPageInfo;

    /**
     * A list of edges.
     */
    edges: Array<IFilmSpeciesEdge | null> | null;

    /**
     * A count of the total number of objects in this connection, ignoring pagination.
     * This allows a client to fetch the first five objects by passing \\"5\\" as the
     * argument to \\"first\\", then fetch the total count so it could display \\"5 of 83\\",
     * for example.
     */
    totalCount: number | null;

    /**
     * A list of all of the objects returned in the connection. This is a convenience
     * field provided for quickly exploring the API; rather than querying for
     * \\"{ edges { node } }\\" when no edge data is needed, this field can be be used
     * instead. Note that when clients like Relay need to fetch the \\"cursor\\" field on
     * the edge to enable efficient pagination, this shortcut cannot be used, and the
     * full \\"{ edges { node } }\\" version should be used instead.
     */
    species: Array<ISpecies | null> | null;
  }

  /**
   * An edge in a connection.
   */
  interface IFilmSpeciesEdge {
    __typename: 'FilmSpeciesEdge';

    /**
     * The item at the end of the edge
     */
    node: ISpecies | null;

    /**
     * A cursor for use in pagination
     */
    cursor: string;
  }

  /**
   * A type of person or character within the Star Wars Universe.
   */
  interface ISpecies {
    __typename: 'Species';

    /**
     * The name of this species.
     */
    name: string | null;

    /**
     * The classification of this species, such as \\"mammal\\" or \\"reptile\\".
     */
    classification: string | null;

    /**
     * The designation of this species, such as \\"sentient\\".
     */
    designation: string | null;

    /**
     * The average height of this species in centimeters.
     */
    averageHeight: number | null;

    /**
     * The average lifespan of this species in years, null if unknown.
     */
    averageLifespan: number | null;

    /**
     * Common eye colors for this species, null if this species does not typically
     * have eyes.
     */
    eyeColors: Array<string | null> | null;

    /**
     * Common hair colors for this species, null if this species does not typically
     * have hair.
     */
    hairColors: Array<string | null> | null;

    /**
     * Common skin colors for this species, null if this species does not typically
     * have skin.
     */
    skinColors: Array<string | null> | null;

    /**
     * The language commonly spoken by this species.
     */
    language: string | null;

    /**
     * A planet that this species originates from.
     */
    homeworld: IPlanet | null;
    personConnection: ISpeciesPeopleConnection | null;
    filmConnection: ISpeciesFilmsConnection | null;

    /**
     * The ISO 8601 date format of the time that this resource was created.
     */
    created: string | null;

    /**
     * The ISO 8601 date format of the time that this resource was edited.
     */
    edited: string | null;

    /**
     * The ID of an object
     */
    id: string;
  }

  interface IPersonConnectionOnSpeciesArguments {
    after?: string | null;
    first?: number | null;
    before?: string | null;
    last?: number | null;
  }

  interface IFilmConnectionOnSpeciesArguments {
    after?: string | null;
    first?: number | null;
    before?: string | null;
    last?: number | null;
  }

  /**
   * A large mass, planet or planetoid in the Star Wars Universe, at the time of
   * 0 ABY.
   */
  interface IPlanet {
    __typename: 'Planet';

    /**
     * The name of this planet.
     */
    name: string | null;

    /**
     * The diameter of this planet in kilometers.
     */
    diameter: number | null;

    /**
     * The number of standard hours it takes for this planet to complete a single
     * rotation on its axis.
     */
    rotationPeriod: number | null;

    /**
     * The number of standard days it takes for this planet to complete a single orbit
     * of its local star.
     */
    orbitalPeriod: number | null;

    /**
     * A number denoting the gravity of this planet, where \\"1\\" is normal or 1 standard
     * G. \\"2\\" is twice or 2 standard Gs. \\"0.5\\" is half or 0.5 standard Gs.
     */
    gravity: string | null;

    /**
     * The average population of sentient beings inhabiting this planet.
     */
    population: number | null;

    /**
     * The climates of this planet.
     */
    climates: Array<string | null> | null;

    /**
     * The terrains of this planet.
     */
    terrains: Array<string | null> | null;

    /**
     * The percentage of the planet surface that is naturally occuring water or bodies
     * of water.
     */
    surfaceWater: number | null;
    residentConnection: IPlanetResidentsConnection | null;
    filmConnection: IPlanetFilmsConnection | null;

    /**
     * The ISO 8601 date format of the time that this resource was created.
     */
    created: string | null;

    /**
     * The ISO 8601 date format of the time that this resource was edited.
     */
    edited: string | null;

    /**
     * The ID of an object
     */
    id: string;
  }

  interface IResidentConnectionOnPlanetArguments {
    after?: string | null;
    first?: number | null;
    before?: string | null;
    last?: number | null;
  }

  interface IFilmConnectionOnPlanetArguments {
    after?: string | null;
    first?: number | null;
    before?: string | null;
    last?: number | null;
  }

  /**
   * A connection to a list of items.
   */
  interface IPlanetResidentsConnection {
    __typename: 'PlanetResidentsConnection';

    /**
     * Information to aid in pagination.
     */
    pageInfo: IPageInfo;

    /**
     * A list of edges.
     */
    edges: Array<IPlanetResidentsEdge | null> | null;

    /**
     * A count of the total number of objects in this connection, ignoring pagination.
     * This allows a client to fetch the first five objects by passing \\"5\\" as the
     * argument to \\"first\\", then fetch the total count so it could display \\"5 of 83\\",
     * for example.
     */
    totalCount: number | null;

    /**
     * A list of all of the objects returned in the connection. This is a convenience
     * field provided for quickly exploring the API; rather than querying for
     * \\"{ edges { node } }\\" when no edge data is needed, this field can be be used
     * instead. Note that when clients like Relay need to fetch the \\"cursor\\" field on
     * the edge to enable efficient pagination, this shortcut cannot be used, and the
     * full \\"{ edges { node } }\\" version should be used instead.
     */
    residents: Array<IPerson | null> | null;
  }

  /**
   * An edge in a connection.
   */
  interface IPlanetResidentsEdge {
    __typename: 'PlanetResidentsEdge';

    /**
     * The item at the end of the edge
     */
    node: IPerson | null;

    /**
     * A cursor for use in pagination
     */
    cursor: string;
  }

  /**
   * An individual person or character within the Star Wars universe.
   */
  interface IPerson {
    __typename: 'Person';

    /**
     * The name of this person.
     */
    name: string | null;

    /**
     * The birth year of the person, using the in-universe standard of BBY or ABY -
     * Before the Battle of Yavin or After the Battle of Yavin. The Battle of Yavin is
     * a battle that occurs at the end of Star Wars episode IV: A New Hope.
     */
    birthYear: string | null;

    /**
     * The eye color of this person. Will be \\"unknown\\" if not known or \\"n/a\\" if the
     * person does not have an eye.
     */
    eyeColor: string | null;

    /**
     * The gender of this person. Either \\"Male\\", \\"Female\\" or \\"unknown\\",
     * \\"n/a\\" if the person does not have a gender.
     */
    gender: string | null;

    /**
     * The hair color of this person. Will be \\"unknown\\" if not known or \\"n/a\\" if the
     * person does not have hair.
     */
    hairColor: string | null;

    /**
     * The height of the person in centimeters.
     */
    height: number | null;

    /**
     * The mass of the person in kilograms.
     */
    mass: number | null;

    /**
     * The skin color of this person.
     */
    skinColor: string | null;

    /**
     * A planet that this person was born on or inhabits.
     */
    homeworld: IPlanet | null;
    filmConnection: IPersonFilmsConnection | null;

    /**
     * The species that this person belongs to, or null if unknown.
     */
    species: ISpecies | null;
    starshipConnection: IPersonStarshipsConnection | null;
    vehicleConnection: IPersonVehiclesConnection | null;

    /**
     * The ISO 8601 date format of the time that this resource was created.
     */
    created: string | null;

    /**
     * The ISO 8601 date format of the time that this resource was edited.
     */
    edited: string | null;

    /**
     * The ID of an object
     */
    id: string;
  }

  interface IFilmConnectionOnPersonArguments {
    after?: string | null;
    first?: number | null;
    before?: string | null;
    last?: number | null;
  }

  interface IStarshipConnectionOnPersonArguments {
    after?: string | null;
    first?: number | null;
    before?: string | null;
    last?: number | null;
  }

  interface IVehicleConnectionOnPersonArguments {
    after?: string | null;
    first?: number | null;
    before?: string | null;
    last?: number | null;
  }

  /**
   * A connection to a list of items.
   */
  interface IPersonFilmsConnection {
    __typename: 'PersonFilmsConnection';

    /**
     * Information to aid in pagination.
     */
    pageInfo: IPageInfo;

    /**
     * A list of edges.
     */
    edges: Array<IPersonFilmsEdge | null> | null;

    /**
     * A count of the total number of objects in this connection, ignoring pagination.
     * This allows a client to fetch the first five objects by passing \\"5\\" as the
     * argument to \\"first\\", then fetch the total count so it could display \\"5 of 83\\",
     * for example.
     */
    totalCount: number | null;

    /**
     * A list of all of the objects returned in the connection. This is a convenience
     * field provided for quickly exploring the API; rather than querying for
     * \\"{ edges { node } }\\" when no edge data is needed, this field can be be used
     * instead. Note that when clients like Relay need to fetch the \\"cursor\\" field on
     * the edge to enable efficient pagination, this shortcut cannot be used, and the
     * full \\"{ edges { node } }\\" version should be used instead.
     */
    films: Array<IFilm | null> | null;
  }

  /**
   * An edge in a connection.
   */
  interface IPersonFilmsEdge {
    __typename: 'PersonFilmsEdge';

    /**
     * The item at the end of the edge
     */
    node: IFilm | null;

    /**
     * A cursor for use in pagination
     */
    cursor: string;
  }

  /**
   * A connection to a list of items.
   */
  interface IPersonStarshipsConnection {
    __typename: 'PersonStarshipsConnection';

    /**
     * Information to aid in pagination.
     */
    pageInfo: IPageInfo;

    /**
     * A list of edges.
     */
    edges: Array<IPersonStarshipsEdge | null> | null;

    /**
     * A count of the total number of objects in this connection, ignoring pagination.
     * This allows a client to fetch the first five objects by passing \\"5\\" as the
     * argument to \\"first\\", then fetch the total count so it could display \\"5 of 83\\",
     * for example.
     */
    totalCount: number | null;

    /**
     * A list of all of the objects returned in the connection. This is a convenience
     * field provided for quickly exploring the API; rather than querying for
     * \\"{ edges { node } }\\" when no edge data is needed, this field can be be used
     * instead. Note that when clients like Relay need to fetch the \\"cursor\\" field on
     * the edge to enable efficient pagination, this shortcut cannot be used, and the
     * full \\"{ edges { node } }\\" version should be used instead.
     */
    starships: Array<IStarship | null> | null;
  }

  /**
   * An edge in a connection.
   */
  interface IPersonStarshipsEdge {
    __typename: 'PersonStarshipsEdge';

    /**
     * The item at the end of the edge
     */
    node: IStarship | null;

    /**
     * A cursor for use in pagination
     */
    cursor: string;
  }

  /**
   * A single transport craft that has hyperdrive capability.
   */
  interface IStarship {
    __typename: 'Starship';

    /**
     * The name of this starship. The common name, such as \\"Death Star\\".
     */
    name: string | null;

    /**
     * The model or official name of this starship. Such as \\"T-65 X-wing\\" or \\"DS-1
     * Orbital Battle Station\\".
     */
    model: string | null;

    /**
     * The class of this starship, such as \\"Starfighter\\" or \\"Deep Space Mobile
     * Battlestation\\"
     */
    starshipClass: string | null;

    /**
     * The manufacturers of this starship.
     */
    manufacturers: Array<string | null> | null;

    /**
     * The cost of this starship new, in galactic credits.
     */
    costInCredits: number | null;

    /**
     * The length of this starship in meters.
     */
    length: number | null;

    /**
     * The number of personnel needed to run or pilot this starship.
     */
    crew: string | null;

    /**
     * The number of non-essential people this starship can transport.
     */
    passengers: string | null;

    /**
     * The maximum speed of this starship in atmosphere. null if this starship is
     * incapable of atmosphering flight.
     */
    maxAtmospheringSpeed: number | null;

    /**
     * The class of this starships hyperdrive.
     */
    hyperdriveRating: number | null;

    /**
     * The Maximum number of Megalights this starship can travel in a standard hour.
     * A \\"Megalight\\" is a standard unit of distance and has never been defined before
     * within the Star Wars universe. This figure is only really useful for measuring
     * the difference in speed of starships. We can assume it is similar to AU, the
     * distance between our Sun (Sol) and Earth.
     */
    MGLT: number | null;

    /**
     * The maximum number of kilograms that this starship can transport.
     */
    cargoCapacity: number | null;

    /**
     * The maximum length of time that this starship can provide consumables for its
     * entire crew without having to resupply.
     */
    consumables: string | null;
    pilotConnection: IStarshipPilotsConnection | null;
    filmConnection: IStarshipFilmsConnection | null;

    /**
     * The ISO 8601 date format of the time that this resource was created.
     */
    created: string | null;

    /**
     * The ISO 8601 date format of the time that this resource was edited.
     */
    edited: string | null;

    /**
     * The ID of an object
     */
    id: string;
  }

  interface IPilotConnectionOnStarshipArguments {
    after?: string | null;
    first?: number | null;
    before?: string | null;
    last?: number | null;
  }

  interface IFilmConnectionOnStarshipArguments {
    after?: string | null;
    first?: number | null;
    before?: string | null;
    last?: number | null;
  }

  /**
   * A connection to a list of items.
   */
  interface IStarshipPilotsConnection {
    __typename: 'StarshipPilotsConnection';

    /**
     * Information to aid in pagination.
     */
    pageInfo: IPageInfo;

    /**
     * A list of edges.
     */
    edges: Array<IStarshipPilotsEdge | null> | null;

    /**
     * A count of the total number of objects in this connection, ignoring pagination.
     * This allows a client to fetch the first five objects by passing \\"5\\" as the
     * argument to \\"first\\", then fetch the total count so it could display \\"5 of 83\\",
     * for example.
     */
    totalCount: number | null;

    /**
     * A list of all of the objects returned in the connection. This is a convenience
     * field provided for quickly exploring the API; rather than querying for
     * \\"{ edges { node } }\\" when no edge data is needed, this field can be be used
     * instead. Note that when clients like Relay need to fetch the \\"cursor\\" field on
     * the edge to enable efficient pagination, this shortcut cannot be used, and the
     * full \\"{ edges { node } }\\" version should be used instead.
     */
    pilots: Array<IPerson | null> | null;
  }

  /**
   * An edge in a connection.
   */
  interface IStarshipPilotsEdge {
    __typename: 'StarshipPilotsEdge';

    /**
     * The item at the end of the edge
     */
    node: IPerson | null;

    /**
     * A cursor for use in pagination
     */
    cursor: string;
  }

  /**
   * A connection to a list of items.
   */
  interface IStarshipFilmsConnection {
    __typename: 'StarshipFilmsConnection';

    /**
     * Information to aid in pagination.
     */
    pageInfo: IPageInfo;

    /**
     * A list of edges.
     */
    edges: Array<IStarshipFilmsEdge | null> | null;

    /**
     * A count of the total number of objects in this connection, ignoring pagination.
     * This allows a client to fetch the first five objects by passing \\"5\\" as the
     * argument to \\"first\\", then fetch the total count so it could display \\"5 of 83\\",
     * for example.
     */
    totalCount: number | null;

    /**
     * A list of all of the objects returned in the connection. This is a convenience
     * field provided for quickly exploring the API; rather than querying for
     * \\"{ edges { node } }\\" when no edge data is needed, this field can be be used
     * instead. Note that when clients like Relay need to fetch the \\"cursor\\" field on
     * the edge to enable efficient pagination, this shortcut cannot be used, and the
     * full \\"{ edges { node } }\\" version should be used instead.
     */
    films: Array<IFilm | null> | null;
  }

  /**
   * An edge in a connection.
   */
  interface IStarshipFilmsEdge {
    __typename: 'StarshipFilmsEdge';

    /**
     * The item at the end of the edge
     */
    node: IFilm | null;

    /**
     * A cursor for use in pagination
     */
    cursor: string;
  }

  /**
   * A connection to a list of items.
   */
  interface IPersonVehiclesConnection {
    __typename: 'PersonVehiclesConnection';

    /**
     * Information to aid in pagination.
     */
    pageInfo: IPageInfo;

    /**
     * A list of edges.
     */
    edges: Array<IPersonVehiclesEdge | null> | null;

    /**
     * A count of the total number of objects in this connection, ignoring pagination.
     * This allows a client to fetch the first five objects by passing \\"5\\" as the
     * argument to \\"first\\", then fetch the total count so it could display \\"5 of 83\\",
     * for example.
     */
    totalCount: number | null;

    /**
     * A list of all of the objects returned in the connection. This is a convenience
     * field provided for quickly exploring the API; rather than querying for
     * \\"{ edges { node } }\\" when no edge data is needed, this field can be be used
     * instead. Note that when clients like Relay need to fetch the \\"cursor\\" field on
     * the edge to enable efficient pagination, this shortcut cannot be used, and the
     * full \\"{ edges { node } }\\" version should be used instead.
     */
    vehicles: Array<IVehicle | null> | null;
  }

  /**
   * An edge in a connection.
   */
  interface IPersonVehiclesEdge {
    __typename: 'PersonVehiclesEdge';

    /**
     * The item at the end of the edge
     */
    node: IVehicle | null;

    /**
     * A cursor for use in pagination
     */
    cursor: string;
  }

  /**
   * A single transport craft that does not have hyperdrive capability
   */
  interface IVehicle {
    __typename: 'Vehicle';

    /**
     * The name of this vehicle. The common name, such as \\"Sand Crawler\\" or \\"Speeder
     * bike\\".
     */
    name: string | null;

    /**
     * The model or official name of this vehicle. Such as \\"All-Terrain Attack
     * Transport\\".
     */
    model: string | null;

    /**
     * The class of this vehicle, such as \\"Wheeled\\" or \\"Repulsorcraft\\".
     */
    vehicleClass: string | null;

    /**
     * The manufacturers of this vehicle.
     */
    manufacturers: Array<string | null> | null;

    /**
     * The cost of this vehicle new, in Galactic Credits.
     */
    costInCredits: number | null;

    /**
     * The length of this vehicle in meters.
     */
    length: number | null;

    /**
     * The number of personnel needed to run or pilot this vehicle.
     */
    crew: string | null;

    /**
     * The number of non-essential people this vehicle can transport.
     */
    passengers: string | null;

    /**
     * The maximum speed of this vehicle in atmosphere.
     */
    maxAtmospheringSpeed: number | null;

    /**
     * The maximum number of kilograms that this vehicle can transport.
     */
    cargoCapacity: number | null;

    /**
     * The maximum length of time that this vehicle can provide consumables for its
     * entire crew without having to resupply.
     */
    consumables: string | null;
    pilotConnection: IVehiclePilotsConnection | null;
    filmConnection: IVehicleFilmsConnection | null;

    /**
     * The ISO 8601 date format of the time that this resource was created.
     */
    created: string | null;

    /**
     * The ISO 8601 date format of the time that this resource was edited.
     */
    edited: string | null;

    /**
     * The ID of an object
     */
    id: string;
  }

  interface IPilotConnectionOnVehicleArguments {
    after?: string | null;
    first?: number | null;
    before?: string | null;
    last?: number | null;
  }

  interface IFilmConnectionOnVehicleArguments {
    after?: string | null;
    first?: number | null;
    before?: string | null;
    last?: number | null;
  }

  /**
   * A connection to a list of items.
   */
  interface IVehiclePilotsConnection {
    __typename: 'VehiclePilotsConnection';

    /**
     * Information to aid in pagination.
     */
    pageInfo: IPageInfo;

    /**
     * A list of edges.
     */
    edges: Array<IVehiclePilotsEdge | null> | null;

    /**
     * A count of the total number of objects in this connection, ignoring pagination.
     * This allows a client to fetch the first five objects by passing \\"5\\" as the
     * argument to \\"first\\", then fetch the total count so it could display \\"5 of 83\\",
     * for example.
     */
    totalCount: number | null;

    /**
     * A list of all of the objects returned in the connection. This is a convenience
     * field provided for quickly exploring the API; rather than querying for
     * \\"{ edges { node } }\\" when no edge data is needed, this field can be be used
     * instead. Note that when clients like Relay need to fetch the \\"cursor\\" field on
     * the edge to enable efficient pagination, this shortcut cannot be used, and the
     * full \\"{ edges { node } }\\" version should be used instead.
     */
    pilots: Array<IPerson | null> | null;
  }

  /**
   * An edge in a connection.
   */
  interface IVehiclePilotsEdge {
    __typename: 'VehiclePilotsEdge';

    /**
     * The item at the end of the edge
     */
    node: IPerson | null;

    /**
     * A cursor for use in pagination
     */
    cursor: string;
  }

  /**
   * A connection to a list of items.
   */
  interface IVehicleFilmsConnection {
    __typename: 'VehicleFilmsConnection';

    /**
     * Information to aid in pagination.
     */
    pageInfo: IPageInfo;

    /**
     * A list of edges.
     */
    edges: Array<IVehicleFilmsEdge | null> | null;

    /**
     * A count of the total number of objects in this connection, ignoring pagination.
     * This allows a client to fetch the first five objects by passing \\"5\\" as the
     * argument to \\"first\\", then fetch the total count so it could display \\"5 of 83\\",
     * for example.
     */
    totalCount: number | null;

    /**
     * A list of all of the objects returned in the connection. This is a convenience
     * field provided for quickly exploring the API; rather than querying for
     * \\"{ edges { node } }\\" when no edge data is needed, this field can be be used
     * instead. Note that when clients like Relay need to fetch the \\"cursor\\" field on
     * the edge to enable efficient pagination, this shortcut cannot be used, and the
     * full \\"{ edges { node } }\\" version should be used instead.
     */
    films: Array<IFilm | null> | null;
  }

  /**
   * An edge in a connection.
   */
  interface IVehicleFilmsEdge {
    __typename: 'VehicleFilmsEdge';

    /**
     * The item at the end of the edge
     */
    node: IFilm | null;

    /**
     * A cursor for use in pagination
     */
    cursor: string;
  }

  /**
   * A connection to a list of items.
   */
  interface IPlanetFilmsConnection {
    __typename: 'PlanetFilmsConnection';

    /**
     * Information to aid in pagination.
     */
    pageInfo: IPageInfo;

    /**
     * A list of edges.
     */
    edges: Array<IPlanetFilmsEdge | null> | null;

    /**
     * A count of the total number of objects in this connection, ignoring pagination.
     * This allows a client to fetch the first five objects by passing \\"5\\" as the
     * argument to \\"first\\", then fetch the total count so it could display \\"5 of 83\\",
     * for example.
     */
    totalCount: number | null;

    /**
     * A list of all of the objects returned in the connection. This is a convenience
     * field provided for quickly exploring the API; rather than querying for
     * \\"{ edges { node } }\\" when no edge data is needed, this field can be be used
     * instead. Note that when clients like Relay need to fetch the \\"cursor\\" field on
     * the edge to enable efficient pagination, this shortcut cannot be used, and the
     * full \\"{ edges { node } }\\" version should be used instead.
     */
    films: Array<IFilm | null> | null;
  }

  /**
   * An edge in a connection.
   */
  interface IPlanetFilmsEdge {
    __typename: 'PlanetFilmsEdge';

    /**
     * The item at the end of the edge
     */
    node: IFilm | null;

    /**
     * A cursor for use in pagination
     */
    cursor: string;
  }

  /**
   * A connection to a list of items.
   */
  interface ISpeciesPeopleConnection {
    __typename: 'SpeciesPeopleConnection';

    /**
     * Information to aid in pagination.
     */
    pageInfo: IPageInfo;

    /**
     * A list of edges.
     */
    edges: Array<ISpeciesPeopleEdge | null> | null;

    /**
     * A count of the total number of objects in this connection, ignoring pagination.
     * This allows a client to fetch the first five objects by passing \\"5\\" as the
     * argument to \\"first\\", then fetch the total count so it could display \\"5 of 83\\",
     * for example.
     */
    totalCount: number | null;

    /**
     * A list of all of the objects returned in the connection. This is a convenience
     * field provided for quickly exploring the API; rather than querying for
     * \\"{ edges { node } }\\" when no edge data is needed, this field can be be used
     * instead. Note that when clients like Relay need to fetch the \\"cursor\\" field on
     * the edge to enable efficient pagination, this shortcut cannot be used, and the
     * full \\"{ edges { node } }\\" version should be used instead.
     */
    people: Array<IPerson | null> | null;
  }

  /**
   * An edge in a connection.
   */
  interface ISpeciesPeopleEdge {
    __typename: 'SpeciesPeopleEdge';

    /**
     * The item at the end of the edge
     */
    node: IPerson | null;

    /**
     * A cursor for use in pagination
     */
    cursor: string;
  }

  /**
   * A connection to a list of items.
   */
  interface ISpeciesFilmsConnection {
    __typename: 'SpeciesFilmsConnection';

    /**
     * Information to aid in pagination.
     */
    pageInfo: IPageInfo;

    /**
     * A list of edges.
     */
    edges: Array<ISpeciesFilmsEdge | null> | null;

    /**
     * A count of the total number of objects in this connection, ignoring pagination.
     * This allows a client to fetch the first five objects by passing \\"5\\" as the
     * argument to \\"first\\", then fetch the total count so it could display \\"5 of 83\\",
     * for example.
     */
    totalCount: number | null;

    /**
     * A list of all of the objects returned in the connection. This is a convenience
     * field provided for quickly exploring the API; rather than querying for
     * \\"{ edges { node } }\\" when no edge data is needed, this field can be be used
     * instead. Note that when clients like Relay need to fetch the \\"cursor\\" field on
     * the edge to enable efficient pagination, this shortcut cannot be used, and the
     * full \\"{ edges { node } }\\" version should be used instead.
     */
    films: Array<IFilm | null> | null;
  }

  /**
   * An edge in a connection.
   */
  interface ISpeciesFilmsEdge {
    __typename: 'SpeciesFilmsEdge';

    /**
     * The item at the end of the edge
     */
    node: IFilm | null;

    /**
     * A cursor for use in pagination
     */
    cursor: string;
  }

  /**
   * A connection to a list of items.
   */
  interface IFilmStarshipsConnection {
    __typename: 'FilmStarshipsConnection';

    /**
     * Information to aid in pagination.
     */
    pageInfo: IPageInfo;

    /**
     * A list of edges.
     */
    edges: Array<IFilmStarshipsEdge | null> | null;

    /**
     * A count of the total number of objects in this connection, ignoring pagination.
     * This allows a client to fetch the first five objects by passing \\"5\\" as the
     * argument to \\"first\\", then fetch the total count so it could display \\"5 of 83\\",
     * for example.
     */
    totalCount: number | null;

    /**
     * A list of all of the objects returned in the connection. This is a convenience
     * field provided for quickly exploring the API; rather than querying for
     * \\"{ edges { node } }\\" when no edge data is needed, this field can be be used
     * instead. Note that when clients like Relay need to fetch the \\"cursor\\" field on
     * the edge to enable efficient pagination, this shortcut cannot be used, and the
     * full \\"{ edges { node } }\\" version should be used instead.
     */
    starships: Array<IStarship | null> | null;
  }

  /**
   * An edge in a connection.
   */
  interface IFilmStarshipsEdge {
    __typename: 'FilmStarshipsEdge';

    /**
     * The item at the end of the edge
     */
    node: IStarship | null;

    /**
     * A cursor for use in pagination
     */
    cursor: string;
  }

  /**
   * A connection to a list of items.
   */
  interface IFilmVehiclesConnection {
    __typename: 'FilmVehiclesConnection';

    /**
     * Information to aid in pagination.
     */
    pageInfo: IPageInfo;

    /**
     * A list of edges.
     */
    edges: Array<IFilmVehiclesEdge | null> | null;

    /**
     * A count of the total number of objects in this connection, ignoring pagination.
     * This allows a client to fetch the first five objects by passing \\"5\\" as the
     * argument to \\"first\\", then fetch the total count so it could display \\"5 of 83\\",
     * for example.
     */
    totalCount: number | null;

    /**
     * A list of all of the objects returned in the connection. This is a convenience
     * field provided for quickly exploring the API; rather than querying for
     * \\"{ edges { node } }\\" when no edge data is needed, this field can be be used
     * instead. Note that when clients like Relay need to fetch the \\"cursor\\" field on
     * the edge to enable efficient pagination, this shortcut cannot be used, and the
     * full \\"{ edges { node } }\\" version should be used instead.
     */
    vehicles: Array<IVehicle | null> | null;
  }

  /**
   * An edge in a connection.
   */
  interface IFilmVehiclesEdge {
    __typename: 'FilmVehiclesEdge';

    /**
     * The item at the end of the edge
     */
    node: IVehicle | null;

    /**
     * A cursor for use in pagination
     */
    cursor: string;
  }

  /**
   * A connection to a list of items.
   */
  interface IFilmCharactersConnection {
    __typename: 'FilmCharactersConnection';

    /**
     * Information to aid in pagination.
     */
    pageInfo: IPageInfo;

    /**
     * A list of edges.
     */
    edges: Array<IFilmCharactersEdge | null> | null;

    /**
     * A count of the total number of objects in this connection, ignoring pagination.
     * This allows a client to fetch the first five objects by passing \\"5\\" as the
     * argument to \\"first\\", then fetch the total count so it could display \\"5 of 83\\",
     * for example.
     */
    totalCount: number | null;

    /**
     * A list of all of the objects returned in the connection. This is a convenience
     * field provided for quickly exploring the API; rather than querying for
     * \\"{ edges { node } }\\" when no edge data is needed, this field can be be used
     * instead. Note that when clients like Relay need to fetch the \\"cursor\\" field on
     * the edge to enable efficient pagination, this shortcut cannot be used, and the
     * full \\"{ edges { node } }\\" version should be used instead.
     */
    characters: Array<IPerson | null> | null;
  }

  /**
   * An edge in a connection.
   */
  interface IFilmCharactersEdge {
    __typename: 'FilmCharactersEdge';

    /**
     * The item at the end of the edge
     */
    node: IPerson | null;

    /**
     * A cursor for use in pagination
     */
    cursor: string;
  }

  /**
   * A connection to a list of items.
   */
  interface IFilmPlanetsConnection {
    __typename: 'FilmPlanetsConnection';

    /**
     * Information to aid in pagination.
     */
    pageInfo: IPageInfo;

    /**
     * A list of edges.
     */
    edges: Array<IFilmPlanetsEdge | null> | null;

    /**
     * A count of the total number of objects in this connection, ignoring pagination.
     * This allows a client to fetch the first five objects by passing \\"5\\" as the
     * argument to \\"first\\", then fetch the total count so it could display \\"5 of 83\\",
     * for example.
     */
    totalCount: number | null;

    /**
     * A list of all of the objects returned in the connection. This is a convenience
     * field provided for quickly exploring the API; rather than querying for
     * \\"{ edges { node } }\\" when no edge data is needed, this field can be be used
     * instead. Note that when clients like Relay need to fetch the \\"cursor\\" field on
     * the edge to enable efficient pagination, this shortcut cannot be used, and the
     * full \\"{ edges { node } }\\" version should be used instead.
     */
    planets: Array<IPlanet | null> | null;
  }

  /**
   * An edge in a connection.
   */
  interface IFilmPlanetsEdge {
    __typename: 'FilmPlanetsEdge';

    /**
     * The item at the end of the edge
     */
    node: IPlanet | null;

    /**
     * A cursor for use in pagination
     */
    cursor: string;
  }

  /**
   * A connection to a list of items.
   */
  interface IPeopleConnection {
    __typename: 'PeopleConnection';

    /**
     * Information to aid in pagination.
     */
    pageInfo: IPageInfo;

    /**
     * A list of edges.
     */
    edges: Array<IPeopleEdge | null> | null;

    /**
     * A count of the total number of objects in this connection, ignoring pagination.
     * This allows a client to fetch the first five objects by passing \\"5\\" as the
     * argument to \\"first\\", then fetch the total count so it could display \\"5 of 83\\",
     * for example.
     */
    totalCount: number | null;

    /**
     * A list of all of the objects returned in the connection. This is a convenience
     * field provided for quickly exploring the API; rather than querying for
     * \\"{ edges { node } }\\" when no edge data is needed, this field can be be used
     * instead. Note that when clients like Relay need to fetch the \\"cursor\\" field on
     * the edge to enable efficient pagination, this shortcut cannot be used, and the
     * full \\"{ edges { node } }\\" version should be used instead.
     */
    people: Array<IPerson | null> | null;
  }

  /**
   * An edge in a connection.
   */
  interface IPeopleEdge {
    __typename: 'PeopleEdge';

    /**
     * The item at the end of the edge
     */
    node: IPerson | null;

    /**
     * A cursor for use in pagination
     */
    cursor: string;
  }

  /**
   * A connection to a list of items.
   */
  interface IPlanetsConnection {
    __typename: 'PlanetsConnection';

    /**
     * Information to aid in pagination.
     */
    pageInfo: IPageInfo;

    /**
     * A list of edges.
     */
    edges: Array<IPlanetsEdge | null> | null;

    /**
     * A count of the total number of objects in this connection, ignoring pagination.
     * This allows a client to fetch the first five objects by passing \\"5\\" as the
     * argument to \\"first\\", then fetch the total count so it could display \\"5 of 83\\",
     * for example.
     */
    totalCount: number | null;

    /**
     * A list of all of the objects returned in the connection. This is a convenience
     * field provided for quickly exploring the API; rather than querying for
     * \\"{ edges { node } }\\" when no edge data is needed, this field can be be used
     * instead. Note that when clients like Relay need to fetch the \\"cursor\\" field on
     * the edge to enable efficient pagination, this shortcut cannot be used, and the
     * full \\"{ edges { node } }\\" version should be used instead.
     */
    planets: Array<IPlanet | null> | null;
  }

  /**
   * An edge in a connection.
   */
  interface IPlanetsEdge {
    __typename: 'PlanetsEdge';

    /**
     * The item at the end of the edge
     */
    node: IPlanet | null;

    /**
     * A cursor for use in pagination
     */
    cursor: string;
  }

  /**
   * A connection to a list of items.
   */
  interface ISpeciesConnection {
    __typename: 'SpeciesConnection';

    /**
     * Information to aid in pagination.
     */
    pageInfo: IPageInfo;

    /**
     * A list of edges.
     */
    edges: Array<ISpeciesEdge | null> | null;

    /**
     * A count of the total number of objects in this connection, ignoring pagination.
     * This allows a client to fetch the first five objects by passing \\"5\\" as the
     * argument to \\"first\\", then fetch the total count so it could display \\"5 of 83\\",
     * for example.
     */
    totalCount: number | null;

    /**
     * A list of all of the objects returned in the connection. This is a convenience
     * field provided for quickly exploring the API; rather than querying for
     * \\"{ edges { node } }\\" when no edge data is needed, this field can be be used
     * instead. Note that when clients like Relay need to fetch the \\"cursor\\" field on
     * the edge to enable efficient pagination, this shortcut cannot be used, and the
     * full \\"{ edges { node } }\\" version should be used instead.
     */
    species: Array<ISpecies | null> | null;
  }

  /**
   * An edge in a connection.
   */
  interface ISpeciesEdge {
    __typename: 'SpeciesEdge';

    /**
     * The item at the end of the edge
     */
    node: ISpecies | null;

    /**
     * A cursor for use in pagination
     */
    cursor: string;
  }

  /**
   * A connection to a list of items.
   */
  interface IStarshipsConnection {
    __typename: 'StarshipsConnection';

    /**
     * Information to aid in pagination.
     */
    pageInfo: IPageInfo;

    /**
     * A list of edges.
     */
    edges: Array<IStarshipsEdge | null> | null;

    /**
     * A count of the total number of objects in this connection, ignoring pagination.
     * This allows a client to fetch the first five objects by passing \\"5\\" as the
     * argument to \\"first\\", then fetch the total count so it could display \\"5 of 83\\",
     * for example.
     */
    totalCount: number | null;

    /**
     * A list of all of the objects returned in the connection. This is a convenience
     * field provided for quickly exploring the API; rather than querying for
     * \\"{ edges { node } }\\" when no edge data is needed, this field can be be used
     * instead. Note that when clients like Relay need to fetch the \\"cursor\\" field on
     * the edge to enable efficient pagination, this shortcut cannot be used, and the
     * full \\"{ edges { node } }\\" version should be used instead.
     */
    starships: Array<IStarship | null> | null;
  }

  /**
   * An edge in a connection.
   */
  interface IStarshipsEdge {
    __typename: 'StarshipsEdge';

    /**
     * The item at the end of the edge
     */
    node: IStarship | null;

    /**
     * A cursor for use in pagination
     */
    cursor: string;
  }

  /**
   * A connection to a list of items.
   */
  interface IVehiclesConnection {
    __typename: 'VehiclesConnection';

    /**
     * Information to aid in pagination.
     */
    pageInfo: IPageInfo;

    /**
     * A list of edges.
     */
    edges: Array<IVehiclesEdge | null> | null;

    /**
     * A count of the total number of objects in this connection, ignoring pagination.
     * This allows a client to fetch the first five objects by passing \\"5\\" as the
     * argument to \\"first\\", then fetch the total count so it could display \\"5 of 83\\",
     * for example.
     */
    totalCount: number | null;

    /**
     * A list of all of the objects returned in the connection. This is a convenience
     * field provided for quickly exploring the API; rather than querying for
     * \\"{ edges { node } }\\" when no edge data is needed, this field can be be used
     * instead. Note that when clients like Relay need to fetch the \\"cursor\\" field on
     * the edge to enable efficient pagination, this shortcut cannot be used, and the
     * full \\"{ edges { node } }\\" version should be used instead.
     */
    vehicles: Array<IVehicle | null> | null;
  }

  /**
   * An edge in a connection.
   */
  interface IVehiclesEdge {
    __typename: 'VehiclesEdge';

    /**
     * The item at the end of the edge
     */
    node: IVehicle | null;

    /**
     * A cursor for use in pagination
     */
    cursor: string;
  }
}

// tslint:enable
"
`;

exports[`gql2ts namespace correctly uses a namespace and ignores 1`] = `
"// tslint:disable
// graphql typescript definitions

declare namespace StarWars {
  interface IGraphQLResponseRoot {
    data?: IRoot;
    errors?: Array<IGraphQLResponseError>;
  }

  interface IGraphQLResponseError {
    /** Required for all errors */
    message: string;
    locations?: Array<IGraphQLResponseErrorLocation>;
    /** 7.2.2 says 'GraphQL servers may provide additional entries to error' */
    [propName: string]: any;
  }

  interface IGraphQLResponseErrorLocation {
    line: number;
    column: number;
  }

  interface IRoot {
    __typename: 'Root';
    allFilms: IFilmsConnection | null;
    film: IFilm | null;
    allPeople: IPeopleConnection | null;
    allPlanets: IPlanetsConnection | null;
    planet: IPlanet | null;
    allSpecies: ISpeciesConnection | null;
    species: ISpecies | null;
    allStarships: IStarshipsConnection | null;
    starship: IStarship | null;
    allVehicles: IVehiclesConnection | null;
    vehicle: IVehicle | null;

    /**
     * Fetches an object given its ID
     */
    node: Node | null;
  }

  interface IAllFilmsOnRootArguments {
    after?: string | null;
    first?: number | null;
    before?: string | null;
    last?: number | null;
  }

  interface IFilmOnRootArguments {
    id?: string | null;
    filmID?: string | null;
  }

  interface IAllPeopleOnRootArguments {
    after?: string | null;
    first?: number | null;
    before?: string | null;
    last?: number | null;
  }

  interface IAllPlanetsOnRootArguments {
    after?: string | null;
    first?: number | null;
    before?: string | null;
    last?: number | null;
  }

  interface IPlanetOnRootArguments {
    id?: string | null;
    planetID?: string | null;
  }

  interface IAllSpeciesOnRootArguments {
    after?: string | null;
    first?: number | null;
    before?: string | null;
    last?: number | null;
  }

  interface ISpeciesOnRootArguments {
    id?: string | null;
    speciesID?: string | null;
  }

  interface IAllStarshipsOnRootArguments {
    after?: string | null;
    first?: number | null;
    before?: string | null;
    last?: number | null;
  }

  interface IStarshipOnRootArguments {
    id?: string | null;
    starshipID?: string | null;
  }

  interface IAllVehiclesOnRootArguments {
    after?: string | null;
    first?: number | null;
    before?: string | null;
    last?: number | null;
  }

  interface IVehicleOnRootArguments {
    id?: string | null;
    vehicleID?: string | null;
  }

  interface INodeOnRootArguments {
    /**
     * The ID of an object
     */
    id: string;
  }

  /**
   * A connection to a list of items.
   */
  interface IFilmsConnection {
    __typename: 'FilmsConnection';

    /**
     * Information to aid in pagination.
     */
    pageInfo: IPageInfo;

    /**
     * A list of edges.
     */
    edges: Array<IFilmsEdge | null> | null;

    /**
     * A count of the total number of objects in this connection, ignoring pagination.
     * This allows a client to fetch the first five objects by passing \\"5\\" as the
     * argument to \\"first\\", then fetch the total count so it could display \\"5 of 83\\",
     * for example.
     */
    totalCount: number | null;

    /**
     * A list of all of the objects returned in the connection. This is a convenience
     * field provided for quickly exploring the API; rather than querying for
     * \\"{ edges { node } }\\" when no edge data is needed, this field can be be used
     * instead. Note that when clients like Relay need to fetch the \\"cursor\\" field on
     * the edge to enable efficient pagination, this shortcut cannot be used, and the
     * full \\"{ edges { node } }\\" version should be used instead.
     */
    films: Array<IFilm | null> | null;
  }

  /**
   * Information about pagination in a connection.
   */
  interface IPageInfo {
    __typename: 'PageInfo';

    /**
     * When paginating forwards, are there more items?
     */
    hasNextPage: boolean;

    /**
     * When paginating backwards, are there more items?
     */
    hasPreviousPage: boolean;

    /**
     * When paginating backwards, the cursor to continue.
     */
    startCursor: string | null;

    /**
     * When paginating forwards, the cursor to continue.
     */
    endCursor: string | null;
  }

  /**
   * An edge in a connection.
   */
  interface IFilmsEdge {
    __typename: 'FilmsEdge';

    /**
     * The item at the end of the edge
     */
    node: IFilm | null;

    /**
     * A cursor for use in pagination
     */
    cursor: string;
  }

  /**
   * A single film.
   */
  interface IFilm {
    __typename: 'Film';

    /**
     * The title of this film.
     */
    title: string | null;

    /**
     * The episode number of this film.
     */
    episodeID: number | null;

    /**
     * The opening paragraphs at the beginning of this film.
     */
    openingCrawl: string | null;

    /**
     * The name of the director of this film.
     */
    director: string | null;

    /**
     * The name(s) of the producer(s) of this film.
     */
    producers: Array<string | null> | null;

    /**
     * The ISO 8601 date format of film release at original creator country.
     */
    releaseDate: string | null;
    speciesConnection: IFilmSpeciesConnection | null;
    starshipConnection: IFilmStarshipsConnection | null;
    vehicleConnection: IFilmVehiclesConnection | null;
    characterConnection: IFilmCharactersConnection | null;
    planetConnection: IFilmPlanetsConnection | null;

    /**
     * The ISO 8601 date format of the time that this resource was created.
     */
    created: string | null;

    /**
     * The ISO 8601 date format of the time that this resource was edited.
     */
    edited: string | null;

    /**
     * The ID of an object
     */
    id: string;
  }

  interface ISpeciesConnectionOnFilmArguments {
    after?: string | null;
    first?: number | null;
    before?: string | null;
    last?: number | null;
  }

  interface IStarshipConnectionOnFilmArguments {
    after?: string | null;
    first?: number | null;
    before?: string | null;
    last?: number | null;
  }

  interface IVehicleConnectionOnFilmArguments {
    after?: string | null;
    first?: number | null;
    before?: string | null;
    last?: number | null;
  }

  interface ICharacterConnectionOnFilmArguments {
    after?: string | null;
    first?: number | null;
    before?: string | null;
    last?: number | null;
  }

  interface IPlanetConnectionOnFilmArguments {
    after?: string | null;
    first?: number | null;
    before?: string | null;
    last?: number | null;
  }

  /**
   * An object with an ID
   */
  type Node = IFilm | ISpecies | IPlanet | IStarship | IVehicle;

  /**
   * An object with an ID
   */
  interface INode {
    __typename: 'Node';

    /**
     * The id of the object.
     */
    id: string;
  }

  /**
   * A connection to a list of items.
   */
  interface IFilmSpeciesConnection {
    __typename: 'FilmSpeciesConnection';

    /**
     * Information to aid in pagination.
     */
    pageInfo: IPageInfo;

    /**
     * A list of edges.
     */
    edges: Array<IFilmSpeciesEdge | null> | null;

    /**
     * A count of the total number of objects in this connection, ignoring pagination.
     * This allows a client to fetch the first five objects by passing \\"5\\" as the
     * argument to \\"first\\", then fetch the total count so it could display \\"5 of 83\\",
     * for example.
     */
    totalCount: number | null;

    /**
     * A list of all of the objects returned in the connection. This is a convenience
     * field provided for quickly exploring the API; rather than querying for
     * \\"{ edges { node } }\\" when no edge data is needed, this field can be be used
     * instead. Note that when clients like Relay need to fetch the \\"cursor\\" field on
     * the edge to enable efficient pagination, this shortcut cannot be used, and the
     * full \\"{ edges { node } }\\" version should be used instead.
     */
    species: Array<ISpecies | null> | null;
  }

  /**
   * An edge in a connection.
   */
  interface IFilmSpeciesEdge {
    __typename: 'FilmSpeciesEdge';

    /**
     * The item at the end of the edge
     */
    node: ISpecies | null;

    /**
     * A cursor for use in pagination
     */
    cursor: string;
  }

  /**
   * A type of person or character within the Star Wars Universe.
   */
  interface ISpecies {
    __typename: 'Species';

    /**
     * The name of this species.
     */
    name: string | null;

    /**
     * The classification of this species, such as \\"mammal\\" or \\"reptile\\".
     */
    classification: string | null;

    /**
     * The designation of this species, such as \\"sentient\\".
     */
    designation: string | null;

    /**
     * The average height of this species in centimeters.
     */
    averageHeight: number | null;

    /**
     * The average lifespan of this species in years, null if unknown.
     */
    averageLifespan: number | null;

    /**
     * Common eye colors for this species, null if this species does not typically
     * have eyes.
     */
    eyeColors: Array<string | null> | null;

    /**
     * Common hair colors for this species, null if this species does not typically
     * have hair.
     */
    hairColors: Array<string | null> | null;

    /**
     * Common skin colors for this species, null if this species does not typically
     * have skin.
     */
    skinColors: Array<string | null> | null;

    /**
     * The language commonly spoken by this species.
     */
    language: string | null;

    /**
     * A planet that this species originates from.
     */
    homeworld: IPlanet | null;
    personConnection: ISpeciesPeopleConnection | null;
    filmConnection: ISpeciesFilmsConnection | null;

    /**
     * The ISO 8601 date format of the time that this resource was created.
     */
    created: string | null;

    /**
     * The ISO 8601 date format of the time that this resource was edited.
     */
    edited: string | null;

    /**
     * The ID of an object
     */
    id: string;
  }

  interface IPersonConnectionOnSpeciesArguments {
    after?: string | null;
    first?: number | null;
    before?: string | null;
    last?: number | null;
  }

  interface IFilmConnectionOnSpeciesArguments {
    after?: string | null;
    first?: number | null;
    before?: string | null;
    last?: number | null;
  }

  /**
   * A large mass, planet or planetoid in the Star Wars Universe, at the time of
   * 0 ABY.
   */
  interface IPlanet {
    __typename: 'Planet';

    /**
     * The name of this planet.
     */
    name: string | null;

    /**
     * The diameter of this planet in kilometers.
     */
    diameter: number | null;

    /**
     * The number of standard hours it takes for this planet to complete a single
     * rotation on its axis.
     */
    rotationPeriod: number | null;

    /**
     * The number of standard days it takes for this planet to complete a single orbit
     * of its local star.
     */
    orbitalPeriod: number | null;

    /**
     * A number denoting the gravity of this planet, where \\"1\\" is normal or 1 standard
     * G. \\"2\\" is twice or 2 standard Gs. \\"0.5\\" is half or 0.5 standard Gs.
     */
    gravity: string | null;

    /**
     * The average population of sentient beings inhabiting this planet.
     */
    population: number | null;

    /**
     * The climates of this planet.
     */
    climates: Array<string | null> | null;

    /**
     * The terrains of this planet.
     */
    terrains: Array<string | null> | null;

    /**
     * The percentage of the planet surface that is naturally occuring water or bodies
     * of water.
     */
    surfaceWater: number | null;
    residentConnection: IPlanetResidentsConnection | null;
    filmConnection: IPlanetFilmsConnection | null;

    /**
     * The ISO 8601 date format of the time that this resource was created.
     */
    created: string | null;

    /**
     * The ISO 8601 date format of the time that this resource was edited.
     */
    edited: string | null;

    /**
     * The ID of an object
     */
    id: string;
  }

  interface IResidentConnectionOnPlanetArguments {
    after?: string | null;
    first?: number | null;
    before?: string | null;
    last?: number | null;
  }

  interface IFilmConnectionOnPlanetArguments {
    after?: string | null;
    first?: number | null;
    before?: string | null;
    last?: number | null;
  }

  /**
   * A connection to a list of items.
   */
  interface IPlanetResidentsConnection {
    __typename: 'PlanetResidentsConnection';

    /**
     * Information to aid in pagination.
     */
    pageInfo: IPageInfo;

    /**
     * A list of edges.
     */
    edges: Array<IPlanetResidentsEdge | null> | null;

    /**
     * A count of the total number of objects in this connection, ignoring pagination.
     * This allows a client to fetch the first five objects by passing \\"5\\" as the
     * argument to \\"first\\", then fetch the total count so it could display \\"5 of 83\\",
     * for example.
     */
    totalCount: number | null;
  }

  /**
   * An edge in a connection.
   */
  interface IPlanetResidentsEdge {
    __typename: 'PlanetResidentsEdge';

    /**
     * A cursor for use in pagination
     */
    cursor: string;
  }

  /**
   * A connection to a list of items.
   */
  interface IPersonFilmsConnection {
    __typename: 'PersonFilmsConnection';

    /**
     * Information to aid in pagination.
     */
    pageInfo: IPageInfo;

    /**
     * A list of edges.
     */
    edges: Array<IPersonFilmsEdge | null> | null;

    /**
     * A count of the total number of objects in this connection, ignoring pagination.
     * This allows a client to fetch the first five objects by passing \\"5\\" as the
     * argument to \\"first\\", then fetch the total count so it could display \\"5 of 83\\",
     * for example.
     */
    totalCount: number | null;

    /**
     * A list of all of the objects returned in the connection. This is a convenience
     * field provided for quickly exploring the API; rather than querying for
     * \\"{ edges { node } }\\" when no edge data is needed, this field can be be used
     * instead. Note that when clients like Relay need to fetch the \\"cursor\\" field on
     * the edge to enable efficient pagination, this shortcut cannot be used, and the
     * full \\"{ edges { node } }\\" version should be used instead.
     */
    films: Array<IFilm | null> | null;
  }

  /**
   * An edge in a connection.
   */
  interface IPersonFilmsEdge {
    __typename: 'PersonFilmsEdge';

    /**
     * The item at the end of the edge
     */
    node: IFilm | null;

    /**
     * A cursor for use in pagination
     */
    cursor: string;
  }

  /**
   * A connection to a list of items.
   */
  interface IPersonStarshipsConnection {
    __typename: 'PersonStarshipsConnection';

    /**
     * Information to aid in pagination.
     */
    pageInfo: IPageInfo;

    /**
     * A list of edges.
     */
    edges: Array<IPersonStarshipsEdge | null> | null;

    /**
     * A count of the total number of objects in this connection, ignoring pagination.
     * This allows a client to fetch the first five objects by passing \\"5\\" as the
     * argument to \\"first\\", then fetch the total count so it could display \\"5 of 83\\",
     * for example.
     */
    totalCount: number | null;

    /**
     * A list of all of the objects returned in the connection. This is a convenience
     * field provided for quickly exploring the API; rather than querying for
     * \\"{ edges { node } }\\" when no edge data is needed, this field can be be used
     * instead. Note that when clients like Relay need to fetch the \\"cursor\\" field on
     * the edge to enable efficient pagination, this shortcut cannot be used, and the
     * full \\"{ edges { node } }\\" version should be used instead.
     */
    starships: Array<IStarship | null> | null;
  }

  /**
   * An edge in a connection.
   */
  interface IPersonStarshipsEdge {
    __typename: 'PersonStarshipsEdge';

    /**
     * The item at the end of the edge
     */
    node: IStarship | null;

    /**
     * A cursor for use in pagination
     */
    cursor: string;
  }

  /**
   * A single transport craft that has hyperdrive capability.
   */
  interface IStarship {
    __typename: 'Starship';

    /**
     * The name of this starship. The common name, such as \\"Death Star\\".
     */
    name: string | null;

    /**
     * The model or official name of this starship. Such as \\"T-65 X-wing\\" or \\"DS-1
     * Orbital Battle Station\\".
     */
    model: string | null;

    /**
     * The class of this starship, such as \\"Starfighter\\" or \\"Deep Space Mobile
     * Battlestation\\"
     */
    starshipClass: string | null;

    /**
     * The manufacturers of this starship.
     */
    manufacturers: Array<string | null> | null;

    /**
     * The cost of this starship new, in galactic credits.
     */
    costInCredits: number | null;

    /**
     * The length of this starship in meters.
     */
    length: number | null;

    /**
     * The number of personnel needed to run or pilot this starship.
     */
    crew: string | null;

    /**
     * The number of non-essential people this starship can transport.
     */
    passengers: string | null;

    /**
     * The maximum speed of this starship in atmosphere. null if this starship is
     * incapable of atmosphering flight.
     */
    maxAtmospheringSpeed: number | null;

    /**
     * The class of this starships hyperdrive.
     */
    hyperdriveRating: number | null;

    /**
     * The Maximum number of Megalights this starship can travel in a standard hour.
     * A \\"Megalight\\" is a standard unit of distance and has never been defined before
     * within the Star Wars universe. This figure is only really useful for measuring
     * the difference in speed of starships. We can assume it is similar to AU, the
     * distance between our Sun (Sol) and Earth.
     */
    MGLT: number | null;

    /**
     * The maximum number of kilograms that this starship can transport.
     */
    cargoCapacity: number | null;

    /**
     * The maximum length of time that this starship can provide consumables for its
     * entire crew without having to resupply.
     */
    consumables: string | null;
    pilotConnection: IStarshipPilotsConnection | null;
    filmConnection: IStarshipFilmsConnection | null;

    /**
     * The ISO 8601 date format of the time that this resource was created.
     */
    created: string | null;

    /**
     * The ISO 8601 date format of the time that this resource was edited.
     */
    edited: string | null;

    /**
     * The ID of an object
     */
    id: string;
  }

  interface IPilotConnectionOnStarshipArguments {
    after?: string | null;
    first?: number | null;
    before?: string | null;
    last?: number | null;
  }

  interface IFilmConnectionOnStarshipArguments {
    after?: string | null;
    first?: number | null;
    before?: string | null;
    last?: number | null;
  }

  /**
   * A connection to a list of items.
   */
  interface IStarshipPilotsConnection {
    __typename: 'StarshipPilotsConnection';

    /**
     * Information to aid in pagination.
     */
    pageInfo: IPageInfo;

    /**
     * A list of edges.
     */
    edges: Array<IStarshipPilotsEdge | null> | null;

    /**
     * A count of the total number of objects in this connection, ignoring pagination.
     * This allows a client to fetch the first five objects by passing \\"5\\" as the
     * argument to \\"first\\", then fetch the total count so it could display \\"5 of 83\\",
     * for example.
     */
    totalCount: number | null;
  }

  /**
   * An edge in a connection.
   */
  interface IStarshipPilotsEdge {
    __typename: 'StarshipPilotsEdge';

    /**
     * A cursor for use in pagination
     */
    cursor: string;
  }

  /**
   * A connection to a list of items.
   */
  interface IStarshipFilmsConnection {
    __typename: 'StarshipFilmsConnection';

    /**
     * Information to aid in pagination.
     */
    pageInfo: IPageInfo;

    /**
     * A list of edges.
     */
    edges: Array<IStarshipFilmsEdge | null> | null;

    /**
     * A count of the total number of objects in this connection, ignoring pagination.
     * This allows a client to fetch the first five objects by passing \\"5\\" as the
     * argument to \\"first\\", then fetch the total count so it could display \\"5 of 83\\",
     * for example.
     */
    totalCount: number | null;

    /**
     * A list of all of the objects returned in the connection. This is a convenience
     * field provided for quickly exploring the API; rather than querying for
     * \\"{ edges { node } }\\" when no edge data is needed, this field can be be used
     * instead. Note that when clients like Relay need to fetch the \\"cursor\\" field on
     * the edge to enable efficient pagination, this shortcut cannot be used, and the
     * full \\"{ edges { node } }\\" version should be used instead.
     */
    films: Array<IFilm | null> | null;
  }

  /**
   * An edge in a connection.
   */
  interface IStarshipFilmsEdge {
    __typename: 'StarshipFilmsEdge';

    /**
     * The item at the end of the edge
     */
    node: IFilm | null;

    /**
     * A cursor for use in pagination
     */
    cursor: string;
  }

  /**
   * A connection to a list of items.
   */
  interface IPersonVehiclesConnection {
    __typename: 'PersonVehiclesConnection';

    /**
     * Information to aid in pagination.
     */
    pageInfo: IPageInfo;

    /**
     * A list of edges.
     */
    edges: Array<IPersonVehiclesEdge | null> | null;

    /**
     * A count of the total number of objects in this connection, ignoring pagination.
     * This allows a client to fetch the first five objects by passing \\"5\\" as the
     * argument to \\"first\\", then fetch the total count so it could display \\"5 of 83\\",
     * for example.
     */
    totalCount: number | null;

    /**
     * A list of all of the objects returned in the connection. This is a convenience
     * field provided for quickly exploring the API; rather than querying for
     * \\"{ edges { node } }\\" when no edge data is needed, this field can be be used
     * instead. Note that when clients like Relay need to fetch the \\"cursor\\" field on
     * the edge to enable efficient pagination, this shortcut cannot be used, and the
     * full \\"{ edges { node } }\\" version should be used instead.
     */
    vehicles: Array<IVehicle | null> | null;
  }

  /**
   * An edge in a connection.
   */
  interface IPersonVehiclesEdge {
    __typename: 'PersonVehiclesEdge';

    /**
     * The item at the end of the edge
     */
    node: IVehicle | null;

    /**
     * A cursor for use in pagination
     */
    cursor: string;
  }

  /**
   * A single transport craft that does not have hyperdrive capability
   */
  interface IVehicle {
    __typename: 'Vehicle';

    /**
     * The name of this vehicle. The common name, such as \\"Sand Crawler\\" or \\"Speeder
     * bike\\".
     */
    name: string | null;

    /**
     * The model or official name of this vehicle. Such as \\"All-Terrain Attack
     * Transport\\".
     */
    model: string | null;

    /**
     * The class of this vehicle, such as \\"Wheeled\\" or \\"Repulsorcraft\\".
     */
    vehicleClass: string | null;

    /**
     * The manufacturers of this vehicle.
     */
    manufacturers: Array<string | null> | null;

    /**
     * The cost of this vehicle new, in Galactic Credits.
     */
    costInCredits: number | null;

    /**
     * The length of this vehicle in meters.
     */
    length: number | null;

    /**
     * The number of personnel needed to run or pilot this vehicle.
     */
    crew: string | null;

    /**
     * The number of non-essential people this vehicle can transport.
     */
    passengers: string | null;

    /**
     * The maximum speed of this vehicle in atmosphere.
     */
    maxAtmospheringSpeed: number | null;

    /**
     * The maximum number of kilograms that this vehicle can transport.
     */
    cargoCapacity: number | null;

    /**
     * The maximum length of time that this vehicle can provide consumables for its
     * entire crew without having to resupply.
     */
    consumables: string | null;
    pilotConnection: IVehiclePilotsConnection | null;
    filmConnection: IVehicleFilmsConnection | null;

    /**
     * The ISO 8601 date format of the time that this resource was created.
     */
    created: string | null;

    /**
     * The ISO 8601 date format of the time that this resource was edited.
     */
    edited: string | null;

    /**
     * The ID of an object
     */
    id: string;
  }

  interface IPilotConnectionOnVehicleArguments {
    after?: string | null;
    first?: number | null;
    before?: string | null;
    last?: number | null;
  }

  interface IFilmConnectionOnVehicleArguments {
    after?: string | null;
    first?: number | null;
    before?: string | null;
    last?: number | null;
  }

  /**
   * A connection to a list of items.
   */
  interface IVehiclePilotsConnection {
    __typename: 'VehiclePilotsConnection';

    /**
     * Information to aid in pagination.
     */
    pageInfo: IPageInfo;

    /**
     * A list of edges.
     */
    edges: Array<IVehiclePilotsEdge | null> | null;

    /**
     * A count of the total number of objects in this connection, ignoring pagination.
     * This allows a client to fetch the first five objects by passing \\"5\\" as the
     * argument to \\"first\\", then fetch the total count so it could display \\"5 of 83\\",
     * for example.
     */
    totalCount: number | null;
  }

  /**
   * An edge in a connection.
   */
  interface IVehiclePilotsEdge {
    __typename: 'VehiclePilotsEdge';

    /**
     * A cursor for use in pagination
     */
    cursor: string;
  }

  /**
   * A connection to a list of items.
   */
  interface IVehicleFilmsConnection {
    __typename: 'VehicleFilmsConnection';

    /**
     * Information to aid in pagination.
     */
    pageInfo: IPageInfo;

    /**
     * A list of edges.
     */
    edges: Array<IVehicleFilmsEdge | null> | null;

    /**
     * A count of the total number of objects in this connection, ignoring pagination.
     * This allows a client to fetch the first five objects by passing \\"5\\" as the
     * argument to \\"first\\", then fetch the total count so it could display \\"5 of 83\\",
     * for example.
     */
    totalCount: number | null;

    /**
     * A list of all of the objects returned in the connection. This is a convenience
     * field provided for quickly exploring the API; rather than querying for
     * \\"{ edges { node } }\\" when no edge data is needed, this field can be be used
     * instead. Note that when clients like Relay need to fetch the \\"cursor\\" field on
     * the edge to enable efficient pagination, this shortcut cannot be used, and the
     * full \\"{ edges { node } }\\" version should be used instead.
     */
    films: Array<IFilm | null> | null;
  }

  /**
   * An edge in a connection.
   */
  interface IVehicleFilmsEdge {
    __typename: 'VehicleFilmsEdge';

    /**
     * The item at the end of the edge
     */
    node: IFilm | null;

    /**
     * A cursor for use in pagination
     */
    cursor: string;
  }

  /**
   * A connection to a list of items.
   */
  interface IPlanetFilmsConnection {
    __typename: 'PlanetFilmsConnection';

    /**
     * Information to aid in pagination.
     */
    pageInfo: IPageInfo;

    /**
     * A list of edges.
     */
    edges: Array<IPlanetFilmsEdge | null> | null;

    /**
     * A count of the total number of objects in this connection, ignoring pagination.
     * This allows a client to fetch the first five objects by passing \\"5\\" as the
     * argument to \\"first\\", then fetch the total count so it could display \\"5 of 83\\",
     * for example.
     */
    totalCount: number | null;

    /**
     * A list of all of the objects returned in the connection. This is a convenience
     * field provided for quickly exploring the API; rather than querying for
     * \\"{ edges { node } }\\" when no edge data is needed, this field can be be used
     * instead. Note that when clients like Relay need to fetch the \\"cursor\\" field on
     * the edge to enable efficient pagination, this shortcut cannot be used, and the
     * full \\"{ edges { node } }\\" version should be used instead.
     */
    films: Array<IFilm | null> | null;
  }

  /**
   * An edge in a connection.
   */
  interface IPlanetFilmsEdge {
    __typename: 'PlanetFilmsEdge';

    /**
     * The item at the end of the edge
     */
    node: IFilm | null;

    /**
     * A cursor for use in pagination
     */
    cursor: string;
  }

  /**
   * A connection to a list of items.
   */
  interface ISpeciesPeopleConnection {
    __typename: 'SpeciesPeopleConnection';

    /**
     * Information to aid in pagination.
     */
    pageInfo: IPageInfo;

    /**
     * A list of edges.
     */
    edges: Array<ISpeciesPeopleEdge | null> | null;

    /**
     * A count of the total number of objects in this connection, ignoring pagination.
     * This allows a client to fetch the first five objects by passing \\"5\\" as the
     * argument to \\"first\\", then fetch the total count so it could display \\"5 of 83\\",
     * for example.
     */
    totalCount: number | null;
  }

  /**
   * An edge in a connection.
   */
  interface ISpeciesPeopleEdge {
    __typename: 'SpeciesPeopleEdge';

    /**
     * A cursor for use in pagination
     */
    cursor: string;
  }

  /**
   * A connection to a list of items.
   */
  interface ISpeciesFilmsConnection {
    __typename: 'SpeciesFilmsConnection';

    /**
     * Information to aid in pagination.
     */
    pageInfo: IPageInfo;

    /**
     * A list of edges.
     */
    edges: Array<ISpeciesFilmsEdge | null> | null;

    /**
     * A count of the total number of objects in this connection, ignoring pagination.
     * This allows a client to fetch the first five objects by passing \\"5\\" as the
     * argument to \\"first\\", then fetch the total count so it could display \\"5 of 83\\",
     * for example.
     */
    totalCount: number | null;

    /**
     * A list of all of the objects returned in the connection. This is a convenience
     * field provided for quickly exploring the API; rather than querying for
     * \\"{ edges { node } }\\" when no edge data is needed, this field can be be used
     * instead. Note that when clients like Relay need to fetch the \\"cursor\\" field on
     * the edge to enable efficient pagination, this shortcut cannot be used, and the
     * full \\"{ edges { node } }\\" version should be used instead.
     */
    films: Array<IFilm | null> | null;
  }

  /**
   * An edge in a connection.
   */
  interface ISpeciesFilmsEdge {
    __typename: 'SpeciesFilmsEdge';

    /**
     * The item at the end of the edge
     */
    node: IFilm | null;

    /**
     * A cursor for use in pagination
     */
    cursor: string;
  }

  /**
   * A connection to a list of items.
   */
  interface IFilmStarshipsConnection {
    __typename: 'FilmStarshipsConnection';

    /**
     * Information to aid in pagination.
     */
    pageInfo: IPageInfo;

    /**
     * A list of edges.
     */
    edges: Array<IFilmStarshipsEdge | null> | null;

    /**
     * A count of the total number of objects in this connection, ignoring pagination.
     * This allows a client to fetch the first five objects by passing \\"5\\" as the
     * argument to \\"first\\", then fetch the total count so it could display \\"5 of 83\\",
     * for example.
     */
    totalCount: number | null;

    /**
     * A list of all of the objects returned in the connection. This is a convenience
     * field provided for quickly exploring the API; rather than querying for
     * \\"{ edges { node } }\\" when no edge data is needed, this field can be be used
     * instead. Note that when clients like Relay need to fetch the \\"cursor\\" field on
     * the edge to enable efficient pagination, this shortcut cannot be used, and the
     * full \\"{ edges { node } }\\" version should be used instead.
     */
    starships: Array<IStarship | null> | null;
  }

  /**
   * An edge in a connection.
   */
  interface IFilmStarshipsEdge {
    __typename: 'FilmStarshipsEdge';

    /**
     * The item at the end of the edge
     */
    node: IStarship | null;

    /**
     * A cursor for use in pagination
     */
    cursor: string;
  }

  /**
   * A connection to a list of items.
   */
  interface IFilmVehiclesConnection {
    __typename: 'FilmVehiclesConnection';

    /**
     * Information to aid in pagination.
     */
    pageInfo: IPageInfo;

    /**
     * A list of edges.
     */
    edges: Array<IFilmVehiclesEdge | null> | null;

    /**
     * A count of the total number of objects in this connection, ignoring pagination.
     * This allows a client to fetch the first five objects by passing \\"5\\" as the
     * argument to \\"first\\", then fetch the total count so it could display \\"5 of 83\\",
     * for example.
     */
    totalCount: number | null;

    /**
     * A list of all of the objects returned in the connection. This is a convenience
     * field provided for quickly exploring the API; rather than querying for
     * \\"{ edges { node } }\\" when no edge data is needed, this field can be be used
     * instead. Note that when clients like Relay need to fetch the \\"cursor\\" field on
     * the edge to enable efficient pagination, this shortcut cannot be used, and the
     * full \\"{ edges { node } }\\" version should be used instead.
     */
    vehicles: Array<IVehicle | null> | null;
  }

  /**
   * An edge in a connection.
   */
  interface IFilmVehiclesEdge {
    __typename: 'FilmVehiclesEdge';

    /**
     * The item at the end of the edge
     */
    node: IVehicle | null;

    /**
     * A cursor for use in pagination
     */
    cursor: string;
  }

  /**
   * A connection to a list of items.
   */
  interface IFilmCharactersConnection {
    __typename: 'FilmCharactersConnection';

    /**
     * Information to aid in pagination.
     */
    pageInfo: IPageInfo;

    /**
     * A list of edges.
     */
    edges: Array<IFilmCharactersEdge | null> | null;

    /**
     * A count of the total number of objects in this connection, ignoring pagination.
     * This allows a client to fetch the first five objects by passing \\"5\\" as the
     * argument to \\"first\\", then fetch the total count so it could display \\"5 of 83\\",
     * for example.
     */
    totalCount: number | null;
  }

  /**
   * An edge in a connection.
   */
  interface IFilmCharactersEdge {
    __typename: 'FilmCharactersEdge';

    /**
     * A cursor for use in pagination
     */
    cursor: string;
  }

  /**
   * A connection to a list of items.
   */
  interface IFilmPlanetsConnection {
    __typename: 'FilmPlanetsConnection';

    /**
     * Information to aid in pagination.
     */
    pageInfo: IPageInfo;

    /**
     * A list of edges.
     */
    edges: Array<IFilmPlanetsEdge | null> | null;

    /**
     * A count of the total number of objects in this connection, ignoring pagination.
     * This allows a client to fetch the first five objects by passing \\"5\\" as the
     * argument to \\"first\\", then fetch the total count so it could display \\"5 of 83\\",
     * for example.
     */
    totalCount: number | null;

    /**
     * A list of all of the objects returned in the connection. This is a convenience
     * field provided for quickly exploring the API; rather than querying for
     * \\"{ edges { node } }\\" when no edge data is needed, this field can be be used
     * instead. Note that when clients like Relay need to fetch the \\"cursor\\" field on
     * the edge to enable efficient pagination, this shortcut cannot be used, and the
     * full \\"{ edges { node } }\\" version should be used instead.
     */
    planets: Array<IPlanet | null> | null;
  }

  /**
   * An edge in a connection.
   */
  interface IFilmPlanetsEdge {
    __typename: 'FilmPlanetsEdge';

    /**
     * The item at the end of the edge
     */
    node: IPlanet | null;

    /**
     * A cursor for use in pagination
     */
    cursor: string;
  }

  /**
   * A connection to a list of items.
   */
  interface IPeopleConnection {
    __typename: 'PeopleConnection';

    /**
     * Information to aid in pagination.
     */
    pageInfo: IPageInfo;

    /**
     * A list of edges.
     */
    edges: Array<IPeopleEdge | null> | null;

    /**
     * A count of the total number of objects in this connection, ignoring pagination.
     * This allows a client to fetch the first five objects by passing \\"5\\" as the
     * argument to \\"first\\", then fetch the total count so it could display \\"5 of 83\\",
     * for example.
     */
    totalCount: number | null;
  }

  /**
   * An edge in a connection.
   */
  interface IPeopleEdge {
    __typename: 'PeopleEdge';

    /**
     * A cursor for use in pagination
     */
    cursor: string;
  }

  /**
   * A connection to a list of items.
   */
  interface IPlanetsConnection {
    __typename: 'PlanetsConnection';

    /**
     * Information to aid in pagination.
     */
    pageInfo: IPageInfo;

    /**
     * A list of edges.
     */
    edges: Array<IPlanetsEdge | null> | null;

    /**
     * A count of the total number of objects in this connection, ignoring pagination.
     * This allows a client to fetch the first five objects by passing \\"5\\" as the
     * argument to \\"first\\", then fetch the total count so it could display \\"5 of 83\\",
     * for example.
     */
    totalCount: number | null;

    /**
     * A list of all of the objects returned in the connection. This is a convenience
     * field provided for quickly exploring the API; rather than querying for
     * \\"{ edges { node } }\\" when no edge data is needed, this field can be be used
     * instead. Note that when clients like Relay need to fetch the \\"cursor\\" field on
     * the edge to enable efficient pagination, this shortcut cannot be used, and the
     * full \\"{ edges { node } }\\" version should be used instead.
     */
    planets: Array<IPlanet | null> | null;
  }

  /**
   * An edge in a connection.
   */
  interface IPlanetsEdge {
    __typename: 'PlanetsEdge';

    /**
     * The item at the end of the edge
     */
    node: IPlanet | null;

    /**
     * A cursor for use in pagination
     */
    cursor: string;
  }

  /**
   * A connection to a list of items.
   */
  interface ISpeciesConnection {
    __typename: 'SpeciesConnection';

    /**
     * Information to aid in pagination.
     */
    pageInfo: IPageInfo;

    /**
     * A list of edges.
     */
    edges: Array<ISpeciesEdge | null> | null;

    /**
     * A count of the total number of objects in this connection, ignoring pagination.
     * This allows a client to fetch the first five objects by passing \\"5\\" as the
     * argument to \\"first\\", then fetch the total count so it could display \\"5 of 83\\",
     * for example.
     */
    totalCount: number | null;

    /**
     * A list of all of the objects returned in the connection. This is a convenience
     * field provided for quickly exploring the API; rather than querying for
     * \\"{ edges { node } }\\" when no edge data is needed, this field can be be used
     * instead. Note that when clients like Relay need to fetch the \\"cursor\\" field on
     * the edge to enable efficient pagination, this shortcut cannot be used, and the
     * full \\"{ edges { node } }\\" version should be used instead.
     */
    species: Array<ISpecies | null> | null;
  }

  /**
   * An edge in a connection.
   */
  interface ISpeciesEdge {
    __typename: 'SpeciesEdge';

    /**
     * The item at the end of the edge
     */
    node: ISpecies | null;

    /**
     * A cursor for use in pagination
     */
    cursor: string;
  }

  /**
   * A connection to a list of items.
   */
  interface IStarshipsConnection {
    __typename: 'StarshipsConnection';

    /**
     * Information to aid in pagination.
     */
    pageInfo: IPageInfo;

    /**
     * A list of edges.
     */
    edges: Array<IStarshipsEdge | null> | null;

    /**
     * A count of the total number of objects in this connection, ignoring pagination.
     * This allows a client to fetch the first five objects by passing \\"5\\" as the
     * argument to \\"first\\", then fetch the total count so it could display \\"5 of 83\\",
     * for example.
     */
    totalCount: number | null;

    /**
     * A list of all of the objects returned in the connection. This is a convenience
     * field provided for quickly exploring the API; rather than querying for
     * \\"{ edges { node } }\\" when no edge data is needed, this field can be be used
     * instead. Note that when clients like Relay need to fetch the \\"cursor\\" field on
     * the edge to enable efficient pagination, this shortcut cannot be used, and the
     * full \\"{ edges { node } }\\" version should be used instead.
     */
    starships: Array<IStarship | null> | null;
  }

  /**
   * An edge in a connection.
   */
  interface IStarshipsEdge {
    __typename: 'StarshipsEdge';

    /**
     * The item at the end of the edge
     */
    node: IStarship | null;

    /**
     * A cursor for use in pagination
     */
    cursor: string;
  }

  /**
   * A connection to a list of items.
   */
  interface IVehiclesConnection {
    __typename: 'VehiclesConnection';

    /**
     * Information to aid in pagination.
     */
    pageInfo: IPageInfo;

    /**
     * A list of edges.
     */
    edges: Array<IVehiclesEdge | null> | null;

    /**
     * A count of the total number of objects in this connection, ignoring pagination.
     * This allows a client to fetch the first five objects by passing \\"5\\" as the
     * argument to \\"first\\", then fetch the total count so it could display \\"5 of 83\\",
     * for example.
     */
    totalCount: number | null;

    /**
     * A list of all of the objects returned in the connection. This is a convenience
     * field provided for quickly exploring the API; rather than querying for
     * \\"{ edges { node } }\\" when no edge data is needed, this field can be be used
     * instead. Note that when clients like Relay need to fetch the \\"cursor\\" field on
     * the edge to enable efficient pagination, this shortcut cannot be used, and the
     * full \\"{ edges { node } }\\" version should be used instead.
     */
    vehicles: Array<IVehicle | null> | null;
  }

  /**
   * An edge in a connection.
   */
  interface IVehiclesEdge {
    __typename: 'VehiclesEdge';

    /**
     * The item at the end of the edge
     */
    node: IVehicle | null;

    /**
     * A cursor for use in pagination
     */
    cursor: string;
  }
}

// tslint:enable
"
`;

exports[`gql2ts union types correctly translates the schema into typescript defs 1`] = `
"interface IGraphQLResponseRoot {
data?: IQuery;
errors?: Array<IGraphQLResponseError>;
}

interface IGraphQLResponseError {
/** Required for all errors */
message: string;
locations?: Array<IGraphQLResponseErrorLocation>;
/** 7.2.2 says 'GraphQL servers may provide additional entries to error' */
[propName: string]: any;
}

interface IGraphQLResponseErrorLocation {
line: number;
column: number;
}

interface IQuery {
__typename: \\"Query\\";
heroNoParam: Character | null;
hero: Character | null;
human: IHuman | null;
droid: IDroid | null;
test: any | null;
humanOrDroid: HumanOrDroid | null;
getCharacters: Array<Character | null>;

/**
 * @deprecated \\"Field No Longer Available.\\"
 */
anOldField: string | null;
}

interface IHeroOnQueryArguments {
episode?: Episode | null;
}

interface IHumanOnQueryArguments {
id: string;
}

interface IDroidOnQueryArguments {
id: string;
}

interface ITestOnQueryArguments {
test?: any | null;
}

interface IHumanOrDroidOnQueryArguments {
id: string;
}

interface IGetCharactersOnQueryArguments {
ids: Array<string>;
}

type Character = IHuman | IDroid;

interface ICharacter {
__typename: \\"Character\\";
id: string;
name: string | null;
friends: Array<Character | null> | null;
appearsIn: Array<Episode | null> | null;

/**
 * @deprecated \\"Field No Longer Available.\\"
 */
anOldField: string | null;
nonNullArr: Array<Character | null>;
nonNullArrAndContents: Array<Character>;
nullArrNonNullContents: Array<Character> | null;
}

const enum Episode {
NEWHOPE = 'NEWHOPE',
EMPIRE = 'EMPIRE',
JEDI = 'JEDI'
}

interface IHuman {
__typename: \\"Human\\";
id: string;
name: string | null;
friends: Array<Character | null> | null;
appearsIn: Array<Episode | null> | null;
homePlanet: string | null;

/**
 * @deprecated \\"Field No Longer Available.\\"
 */
anOldField: string | null;
nonNullArr: Array<Character | null>;
nonNullArrAndContents: Array<Character>;
nullArrNonNullContents: Array<Character> | null;
}

interface IDroid {
__typename: \\"Droid\\";
id: string;
name: string | null;
friends: Array<Character | null> | null;
appearsIn: Array<Episode | null> | null;
primaryFunction: string | null;
primaryFunctionNonNull: string;

/**
 * @deprecated \\"Field No Longer Available.\\"
 */
anOldField: string | null;
nonNullArr: Array<Character | null>;
nonNullArrAndContents: Array<Character>;
nullArrNonNullContents: Array<Character> | null;
}

type HumanOrDroid = IHuman | IDroid;

"
`;
